<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>TOEFL｜Word List41</title>
      <link href="/2023/06/27/toefl-word-list41/"/>
      <url>/2023/06/27/toefl-word-list41/</url>
      
        <content type="html"><![CDATA[<h1 id="TOEFL-Vocabulary-feat-ChatGPT"><a href="#TOEFL-Vocabulary-feat-ChatGPT" class="headerlink" title="TOEFL Vocabulary (feat.ChatGPT)"></a>TOEFL Vocabulary (feat.ChatGPT)</h1><h2 id="Word-List-41-🚀"><a href="#Word-List-41-🚀" class="headerlink" title="Word List 41 🚀"></a>Word List 41 🚀</h2><table><thead><tr><th align="center">单词</th><th align="center">音标</th><th align="center">词性</th><th align="center">中文含义</th><th align="center">短语搭配</th></tr></thead><tbody><tr><td align="center">apprenticeship</td><td align="center">/əˈprɛntɪʃɪp/</td><td align="center">n.</td><td align="center">学徒期</td><td align="center">He served a one-year apprenticeship（他做了一年的学徒）</td></tr><tr><td align="center">barge</td><td align="center">/bɑːrdʒ/</td><td align="center">n.</td><td align="center">驳船，平底船</td><td align="center">barge into (闯入)</td></tr><tr><td align="center">beak</td><td align="center">/biːk/</td><td align="center">n.</td><td align="center">鸟嘴，喙</td><td align="center">beak of a bird (鸟的喙)</td></tr><tr><td align="center">bundle</td><td align="center">/ˈbʌndl/</td><td align="center">n.</td><td align="center">一束，一捆，一批</td><td align="center">a bundle of sticks（一捆树枝）/  a bundle of papers（一叠白纸）</td></tr><tr><td align="center">canoe</td><td align="center">/kəˈnuː/</td><td align="center">n.</td><td align="center">独木舟</td><td align="center">paddle a canoe (划独木舟)</td></tr><tr><td align="center">cartilage</td><td align="center">/ˈkɑːrtɪlɪdʒ/</td><td align="center">n.</td><td align="center">软骨，骨膜</td><td align="center">cartilage damage (软骨损伤)</td></tr><tr><td align="center">chamber</td><td align="center">/ˈtʃeɪmbər/</td><td align="center">n.</td><td align="center">室，房间</td><td align="center">chamber of commerce ）商会）/ the Senate/House chamber（参议院/众议院会议厅）</td></tr><tr><td align="center">chorus</td><td align="center">/ˈkɔːrəs/</td><td align="center">n.</td><td align="center">合唱/合唱团</td><td align="center">join in the chorus (加入合唱)</td></tr><tr><td align="center">clipper</td><td align="center">/ˈklɪpər/</td><td align="center">n.</td><td align="center">小剪子</td><td align="center">hair clipper（理发推子）</td></tr><tr><td align="center">compact</td><td align="center">/kəmˈpækt/ (adj), /ˈkɒmpækt/ (noun)</td><td align="center">adj./n.</td><td align="center">紧密的，简洁的；契约，合同</td><td align="center">a compact office（一间小巧的办公室）/ make a compact (订立契约)</td></tr><tr><td align="center">confront</td><td align="center">/kənˈfrʌnt/</td><td align="center">v.</td><td align="center">面对，对抗</td><td align="center">She was confronted with severe money problems（她面临严重的资金问题）</td></tr><tr><td align="center">considerate</td><td align="center">/kənˈsɪdərɪt/</td><td align="center">adj.</td><td align="center">体贴的，考虑他人感受的</td><td align="center">a charming and considerate man（一位有魅力且体贴的男士）</td></tr><tr><td align="center">downside</td><td align="center">/ˈdaʊnsaɪd/</td><td align="center">n.</td><td align="center">缺点，不利之处</td><td align="center">downside risk (下行风险)</td></tr><tr><td align="center">embryo</td><td align="center">/ˈembrioʊ/</td><td align="center">n.</td><td align="center">胚胎，萌芽</td><td align="center">human embryo (人类胚胎)</td></tr><tr><td align="center">exaggerate</td><td align="center">/ɪɡˈzædʒəreɪt/</td><td align="center">v.</td><td align="center">夸大，夸张</td><td align="center">exaggerate the truth (夸大事实)</td></tr><tr><td align="center">heyday</td><td align="center">/ˈheɪdeɪ/</td><td align="center">n.</td><td align="center">全盛期，黄金时期</td><td align="center">in its heyday (在全盛时期)</td></tr><tr><td align="center">imaginary</td><td align="center">/ɪˈmædʒɪnɛri/</td><td align="center">adj.</td><td align="center">想象的，虚构的</td><td align="center">Lots of children have imaginary friends（ 许多孩子都有假想的朋友）</td></tr><tr><td align="center">inclined</td><td align="center">/ɪnˈklaɪnd/</td><td align="center">adj.</td><td align="center">倾向于的</td><td align="center">be inclined to (倾向于)</td></tr><tr><td align="center">infancy</td><td align="center">/ˈɪnfənsi/</td><td align="center">n.</td><td align="center">婴儿期，初期</td><td align="center">in its infancy (处于初期)</td></tr><tr><td align="center"><strong>interplay</strong></td><td align="center">/ˌɪntərˈpleɪ/</td><td align="center">n.</td><td align="center">相互作用，交互</td><td align="center">the interplay of political, economic, social and cultural factors（政治、经济，社会和文化因素的互相影响）</td></tr><tr><td align="center">limestone</td><td align="center">/ˈlaɪmstoʊn/</td><td align="center">n.</td><td align="center">石灰石</td><td align="center">limestone quarry (石灰石采矿场)</td></tr><tr><td align="center">metabolic</td><td align="center">/ˌmetəˈbɒlɪk/</td><td align="center">adj.</td><td align="center">新陈代谢的</td><td align="center">metabolic rate (新陈代谢率)</td></tr><tr><td align="center"><strong>milieu</strong></td><td align="center">/miːlˈjʊə/</td><td align="center">n.</td><td align="center">环境，氛围</td><td align="center">social milieu (社会环境)</td></tr><tr><td align="center">oblivious</td><td align="center">/əˈblɪviəs/</td><td align="center">adj.</td><td align="center">忘记的/未察觉的</td><td align="center">oblivious to pain（感觉不到疼痛）/ oblivious to the danger (对危险未察觉)</td></tr><tr><td align="center"><strong>pasture</strong></td><td align="center">/ˈpæstʃər/</td><td align="center">n.</td><td align="center">牧场</td><td align="center">cattle pasture (牛的牧场)</td></tr><tr><td align="center">percussion</td><td align="center">/pərˈkʌʃən/</td><td align="center">n.</td><td align="center">打击乐器，冲击</td><td align="center">percussion instrument (打击乐器)</td></tr><tr><td align="center">physician</td><td align="center">/fɪˈzɪʃən/</td><td align="center">n.</td><td align="center">医师，内科医生</td><td align="center">family physician (家庭医生)</td></tr><tr><td align="center">portraiture</td><td align="center">/ˈpɔːrtrɪtʃər/</td><td align="center">n.</td><td align="center">画像技巧，肖像</td><td align="center">portrait painting (肖像画)</td></tr><tr><td align="center">prescription</td><td align="center">/prɪˈskrɪpʃən/</td><td align="center">n.</td><td align="center">处方，规定</td><td align="center">medical prescription (医疗处方)</td></tr><tr><td align="center"><strong>pretension</strong></td><td align="center">/prɪˈtenʃən/</td><td align="center">n.</td><td align="center">虚饰/做作</td><td align="center">He spoke without pretension（他有话直说，不装相）without pretension (毫无矫饰)</td></tr><tr><td align="center">propagate</td><td align="center">/ˈprɒpəɡeɪt/</td><td align="center">v.</td><td align="center">宣传，传播</td><td align="center">propagate an idea (传播一个想法)</td></tr><tr><td align="center">prose</td><td align="center">/proʊz/</td><td align="center">n.</td><td align="center">散文</td><td align="center">prose literature (散文文学)</td></tr><tr><td align="center">pulse</td><td align="center">/pʌls/</td><td align="center">n.</td><td align="center">脉搏，脉冲</td><td align="center">check one’s pulse (检查某人的脉搏)</td></tr><tr><td align="center">raft</td><td align="center">/ræft/</td><td align="center">n., v.</td><td align="center">木筏</td><td align="center">build a raft (建造一只木筏)</td></tr><tr><td align="center">ravine</td><td align="center">/rəˈviːn/</td><td align="center">n.</td><td align="center">峡谷，深谷</td><td align="center">deep ravine (深深的峡谷)</td></tr><tr><td align="center"><strong>rayon</strong></td><td align="center">/ˈreɪ.ɑːn/</td><td align="center">n.</td><td align="center">人造丝，人造纤维</td><td align="center">rayon fabric (人造丝织物)</td></tr><tr><td align="center">residential</td><td align="center">/ˌrezɪˈdenʃl/</td><td align="center">adj.</td><td align="center">住宅的，居民的</td><td align="center">residential area (住宅区)</td></tr><tr><td align="center">seismology</td><td align="center">/saɪzˈmɑːlədʒi/</td><td align="center">n.</td><td align="center">地震学</td><td align="center">study seismology (研究地震学)</td></tr><tr><td align="center">shrub</td><td align="center">/ʃrʌb/</td><td align="center">n.</td><td align="center">灌木</td><td align="center">garden shrub (园艺灌木)</td></tr><tr><td align="center">sidewalk</td><td align="center">/ˈsaɪdwɔːk/</td><td align="center">n.</td><td align="center">人行道</td><td align="center">walk on the sidewalk (走在人行道上)</td></tr><tr><td align="center">sociology</td><td align="center">/ˌsoʊsiˈɑːlədʒi/</td><td align="center">n.</td><td align="center">社会学</td><td align="center">study sociology (学习社会学)</td></tr><tr><td align="center">stationary</td><td align="center">/ˈsteɪʃəneri/</td><td align="center">adj.</td><td align="center">静止的，不动的</td><td align="center">remain stationary (保持静止)</td></tr><tr><td align="center">strategic</td><td align="center">/strəˈtiːdʒɪk/</td><td align="center">adj.</td><td align="center">战略的</td><td align="center">strategic planning (战略规划) / strategic nuclear weapons（战略性核武器）</td></tr><tr><td align="center">sulfur</td><td align="center">/ˈsʌlfər/</td><td align="center">n.</td><td align="center">硫磺</td><td align="center">sulfur compound (硫磺化合物)</td></tr><tr><td align="center"><strong>temperate</strong></td><td align="center">/ˈtɛmpərət/</td><td align="center">adj.</td><td align="center">温和的/温带的</td><td align="center">keep a temperate climate throughout the year（全年气候温和）</td></tr><tr><td align="center">torrent</td><td align="center">/ˈtɔːrənt/</td><td align="center">n.</td><td align="center">急流，洪流</td><td align="center">torrents of water gushed into the reservoir（急流涌进了水库）/ raging torrent（汹涌的急流）</td></tr></tbody></table><h2 id="Reference-📚"><a href="#Reference-📚" class="headerlink" title="Reference 📚"></a>Reference 📚</h2><ul><li>《TOEFL词汇（45天突破版）》</li><li><a href="https://openai.com/blog/chatgpt">https://openai.com/blog/chatgpt</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> TOEFL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TOEFL </tag>
            
            <tag> Vocabulary </tag>
            
            <tag> English </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TOEFL｜Word List40</title>
      <link href="/2023/06/27/toefl-word-list40/"/>
      <url>/2023/06/27/toefl-word-list40/</url>
      
        <content type="html"><![CDATA[<h1 id="TOEFL-Vocabulary-feat-ChatGPT"><a href="#TOEFL-Vocabulary-feat-ChatGPT" class="headerlink" title="TOEFL Vocabulary (feat.ChatGPT)"></a>TOEFL Vocabulary (feat.ChatGPT)</h1><h2 id="Word-List-40-🚀"><a href="#Word-List-40-🚀" class="headerlink" title="Word List 40 🚀"></a>Word List 40 🚀</h2><table><thead><tr><th align="center">单词</th><th align="center">音标</th><th align="center">词性</th><th align="center">中文含义</th><th align="center">短语搭配</th></tr></thead><tbody><tr><td align="center">alloy</td><td align="center">/ˈælɔɪ/</td><td align="center">n.</td><td align="center">合金</td><td align="center">Brass is an alloy of copper and zinc（黄铜是铜锌合金）</td></tr><tr><td align="center">altitude</td><td align="center">/ˈæltɪtjuːd/</td><td align="center">n.</td><td align="center">海拔高度</td><td align="center">high altitude（高海拔）</td></tr><tr><td align="center">backup</td><td align="center">/ˈbækʌp/</td><td align="center">n.</td><td align="center">备份，支持</td><td align="center">backup plan（备用计划）</td></tr><tr><td align="center">boulder</td><td align="center">/ˈboʊldər/</td><td align="center">n.</td><td align="center">巨石，大砾石</td><td align="center">rolling boulder（滚动的巨石）</td></tr><tr><td align="center">cashier</td><td align="center">/kæˈʃɪər/</td><td align="center">n.</td><td align="center">收银员</td><td align="center">supermarket cashier（超市收银员）</td></tr><tr><td align="center">centigrade</td><td align="center">/ˈsɛntɪɡreɪd/</td><td align="center">n.</td><td align="center">摄氏度</td><td align="center">twenty degrees centigrade（二十摄氏度）</td></tr><tr><td align="center">cipher</td><td align="center">/ˈsaɪfər/</td><td align="center">n.</td><td align="center">密码，零</td><td align="center">convert messages into ciphers（把信息转为密码）</td></tr><tr><td align="center">clump</td><td align="center">/klʌmp/</td><td align="center">n.</td><td align="center">一丛，一簇</td><td align="center">clump of trees（一丛树）</td></tr><tr><td align="center">concede</td><td align="center">/kənˈsiːd/</td><td align="center">v.</td><td align="center">承认/让步</td><td align="center">concede defeat（承认失败）</td></tr><tr><td align="center">conservative</td><td align="center">/kənˈsɜːrvətɪv/</td><td align="center">adj./n.</td><td align="center">保守的，保守主义者</td><td align="center">conservative values（保守的价值观）</td></tr><tr><td align="center">deform</td><td align="center">/dɪˈfɔːrm/</td><td align="center">v.</td><td align="center">变形，变形</td><td align="center">The disease had deformed his spine（疾病导致他脊柱变形）</td></tr><tr><td align="center">drought</td><td align="center">/draʊt/</td><td align="center">n.</td><td align="center">旱灾</td><td align="center">severe drought（严重旱灾）</td></tr><tr><td align="center">entail</td><td align="center">/ɪnˈteɪl/</td><td align="center">v.</td><td align="center">牵涉/导致</td><td align="center">entail a huge political risk（导致一个巨大的政治风险）</td></tr><tr><td align="center">evaporate</td><td align="center">/ɪˈvæpəreɪt/</td><td align="center">v.</td><td align="center">蒸发</td><td align="center">evaporate into the air（蒸发到空气中）</td></tr><tr><td align="center">exert</td><td align="center">/ɪɡˈzɜːrt/</td><td align="center">v.</td><td align="center">施加</td><td align="center">exert pressure（施加压力）</td></tr><tr><td align="center">extravagant</td><td align="center">/ɪkˈstrævəɡənt/</td><td align="center">adj.</td><td align="center">奢侈的</td><td align="center">extravagant lifestyle（奢侈的生活方式）</td></tr><tr><td align="center">facet</td><td align="center">/ˈfæsɪt/</td><td align="center">n.</td><td align="center">方面</td><td align="center">different facets of society（社会的不同方面）</td></tr><tr><td align="center">falcon</td><td align="center">/ˈfɔːlkən/</td><td align="center">n.</td><td align="center">猎鹰</td><td align="center">peregrine falcon（游隼）/ The launch of Falcon 9（猎鹰9号的发射）</td></tr><tr><td align="center">fray</td><td align="center">/freɪ/</td><td align="center">n.</td><td align="center">磨损</td><td align="center">This material frays easily（这布料容易磨损）</td></tr><tr><td align="center">fuse</td><td align="center">/fjuːz/</td><td align="center">v./n.</td><td align="center">熔化，熔丝</td><td align="center">blow a fuse（烧断保险丝）</td></tr><tr><td align="center">instrumental</td><td align="center">/ˌɪnstrəˈmɛntəl/</td><td align="center">adj.</td><td align="center">起很大作用的</td><td align="center">be instrumental in（起很大作用的）</td></tr><tr><td align="center">larynx</td><td align="center">/ˈlærɪŋks/</td><td align="center">n.</td><td align="center">喉</td><td align="center">larynx cancer（喉癌）</td></tr><tr><td align="center">mechanical</td><td align="center">/məˈkænɪkəl/</td><td align="center">adj.</td><td align="center">机械的</td><td align="center">mechanical failure（机械故障）</td></tr><tr><td align="center">mechanics</td><td align="center">/mɪˈkænɪks/</td><td align="center">n.</td><td align="center">机械学</td><td align="center">fluid mechanics（流体力学）</td></tr><tr><td align="center">mercantile</td><td align="center">/ˈmɜːrkəntaɪl/</td><td align="center">adj./n.</td><td align="center">商业的</td><td align="center">mercantile law（商法）/ a new mercantile class（新兴的商业阶层）/ mercantile ports（商业港口）</td></tr><tr><td align="center">mercury</td><td align="center">/ˈmɜːrkjʊri/</td><td align="center">n.</td><td align="center">水银/水星</td><td align="center">mercury thermometer（水银温度计）</td></tr><tr><td align="center">patent</td><td align="center">/ˈpætənt/</td><td align="center">n./v./adj.</td><td align="center">专利</td><td align="center">apply for a patent（申请专利）</td></tr><tr><td align="center">pertain</td><td align="center">/pərˈteɪn/</td><td align="center">v.</td><td align="center">适用/属于</td><td align="center">Those laws no longer pertain（那些法律已不适用了）/ pertain to（与…有关）</td></tr><tr><td align="center">plankton</td><td align="center">/ˈplæŋktɒn/</td><td align="center">n.</td><td align="center">浮游生物</td><td align="center">plankton net（浮游生物网）</td></tr><tr><td align="center">pollutant</td><td align="center">/pəˈluːtənt/</td><td align="center">n.</td><td align="center">污染物</td><td align="center">air pollutant（空气污染物）</td></tr><tr><td align="center">reef</td><td align="center">/riːf/</td><td align="center">n.</td><td align="center">礁</td><td align="center">coral reef（珊瑚礁）</td></tr><tr><td align="center">shrivel</td><td align="center">/ˈʃrɪvl/</td><td align="center">v.</td><td align="center">枯萎</td><td align="center">The leaves started to shrivel up（那些树叶开始枯萎了）</td></tr><tr><td align="center">sinuous</td><td align="center">/ˈsɪnjuəs/</td><td align="center">adj.</td><td align="center">曲折的，蜿蜒的</td><td align="center">sinuous path（蜿蜒的道路）</td></tr><tr><td align="center">stew</td><td align="center">/stjuː/</td><td align="center">v./n.</td><td align="center">炖</td><td align="center">stewed beef and potatoes（土豆炖牛肉）</td></tr><tr><td align="center">wilful</td><td align="center">/ˈwɪlfʊl/</td><td align="center">adj.</td><td align="center">故意的/任性的</td><td align="center">wilful damage（故意破坏）/ a wilful child（任性的孩子）</td></tr><tr><td align="center">wreck</td><td align="center">/rek/</td><td align="center">v./n.</td><td align="center">毁坏，残骸</td><td align="center">wreck of the Titanic（泰坦尼克号残骸）</td></tr></tbody></table><h2 id="Reference-📚"><a href="#Reference-📚" class="headerlink" title="Reference 📚"></a>Reference 📚</h2><ul><li>《TOEFL词汇（45天突破版）》</li><li><a href="https://openai.com/blog/chatgpt">https://openai.com/blog/chatgpt</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> TOEFL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TOEFL </tag>
            
            <tag> Vocabulary </tag>
            
            <tag> English </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TOEFL｜Word List 39</title>
      <link href="/2023/06/26/toefl-word-list39/"/>
      <url>/2023/06/26/toefl-word-list39/</url>
      
        <content type="html"><![CDATA[<h1 id="TOEFL-Vocabulary-feat-ChatGPT"><a href="#TOEFL-Vocabulary-feat-ChatGPT" class="headerlink" title="TOEFL Vocabulary (feat.ChatGPT)"></a>TOEFL Vocabulary (feat.ChatGPT)</h1><h2 id="Word-List-39-🚀"><a href="#Word-List-39-🚀" class="headerlink" title="Word List 39 🚀"></a>Word List 39 🚀</h2><table><thead><tr><th align="center">单词</th><th align="center">音标</th><th align="center">词性</th><th align="center">中文含义</th><th align="center">短语搭配</th></tr></thead><tbody><tr><td align="center">allay</td><td align="center">/əˈleɪ/</td><td align="center">v.</td><td align="center">减轻，缓和</td><td align="center">to allay fears/concern/suspicion（减轻恐惧；减轻忧虑；减少怀疑）</td></tr><tr><td align="center">assortment</td><td align="center">/əˈsɔːrtmənt/</td><td align="center">n.</td><td align="center">各种各样，混合物</td><td align="center">an assortment of gifts to choose from（各式各样可供挑选的礼品）</td></tr><tr><td align="center">automobile</td><td align="center">/ˌɔːtəˈmoʊbiːl/</td><td align="center">n.</td><td align="center">汽车</td><td align="center">a luxury automobile（豪华汽车）</td></tr><tr><td align="center">beaver</td><td align="center">/ˈbiːvər/</td><td align="center">n.</td><td align="center">河狸/勤奋工作的人</td><td align="center">work like a beaver（勤奋工作）</td></tr><tr><td align="center">blizzard</td><td align="center">/ˈblɪzərd/</td><td align="center">n.</td><td align="center">暴风雪</td><td align="center">get caught in a blizzard（被暴风雪困住）</td></tr><tr><td align="center">blues</td><td align="center">/bluːz/</td><td align="center">n.</td><td align="center">蓝调音乐 / 沮丧</td><td align="center">a blues song（蓝调歌曲）/ have the blues（感到沮丧）</td></tr><tr><td align="center">brush</td><td align="center">/brʌʃ/</td><td align="center">n./v.</td><td align="center">刷子/刷</td><td align="center">a hair brush（一把头发刷）/ brush against something（轻触某物）</td></tr><tr><td align="center">cabinet</td><td align="center">/ˈkæbɪnət/</td><td align="center">n.</td><td align="center">橱柜，内阁</td><td align="center">a kitchen cabinet（厨房橱柜）/ the Cabinet of Ministers（内阁部长们）</td></tr><tr><td align="center">chapel</td><td align="center">/ˈtʃæpəl/</td><td align="center">n.</td><td align="center">小教堂</td><td align="center">a wedding chapel（婚礼小教堂）</td></tr><tr><td align="center">demobilize</td><td align="center">/diːˈmoʊbəlaɪz/</td><td align="center">v.</td><td align="center">遣散</td><td align="center">demobilize troops（遣散军队）</td></tr><tr><td align="center">devoid</td><td align="center">/dɪˈvɔɪd/</td><td align="center">adj.</td><td align="center">缺乏的</td><td align="center">a face that is so devoid of emotion（没有感情的脸）</td></tr><tr><td align="center">dwarf</td><td align="center">/dwɔːrf/</td><td align="center">n./v.</td><td align="center">小矮人/侏儒</td><td align="center">a dwarf planet（矮行星）</td></tr><tr><td align="center">elevate</td><td align="center">/ˈɛlɪveɪt/</td><td align="center">v.</td><td align="center">提升，升高</td><td align="center">He was elevated to the post of president（他被提拔到总裁的职位）</td></tr><tr><td align="center">encase</td><td align="center">/ɪnˈkeɪs/</td><td align="center">v.</td><td align="center">包裹，装入</td><td align="center">The reactor is encased in concrete and steel（核反应堆由钢筋混凝土围住）</td></tr><tr><td align="center">encompass</td><td align="center">/ɪnˈkʌmpəs/</td><td align="center">v.</td><td align="center">包含，包围</td><td align="center">The group encompasses all ages（这个小组各种年龄的人都有）</td></tr><tr><td align="center">epoch</td><td align="center">/ˈɛpək/</td><td align="center">n.</td><td align="center">时代，纪元</td><td align="center">a historical epoch（一个历史时代）</td></tr><tr><td align="center">exempt</td><td align="center">/ɪgˈzɛmpt/</td><td align="center">adj./v.</td><td align="center">被免除的；免除</td><td align="center">exempt from taxes（免税）</td></tr><tr><td align="center">fountain</td><td align="center">/ˈfaʊntɪn/</td><td align="center">n.</td><td align="center">喷泉，源泉</td><td align="center">a water fountain（喷泉）</td></tr><tr><td align="center">glamorous</td><td align="center">/ˈglæmərəs/</td><td align="center">adj.</td><td align="center">有魅力的</td><td align="center">a glamorous outfit（有魅力的装扮）</td></tr><tr><td align="center">glare</td><td align="center">/glɛr/</td><td align="center">n./v.</td><td align="center">刺眼的光/怒视</td><td align="center">a glare of sunlight（阳光的刺眼光芒）/ glare at someone（怒视某人）</td></tr><tr><td align="center">gross</td><td align="center">/ɡroʊs/</td><td align="center">adj./n.</td><td align="center">总的</td><td align="center">gross income（总收入）</td></tr><tr><td align="center">insulation</td><td align="center">/ˌɪnsʊˈleɪʃən/</td><td align="center">n.</td><td align="center">隔绝的</td><td align="center">thermal insulation（热绝缘）</td></tr><tr><td align="center">intrusion</td><td align="center">/ɪnˈtruːʒən/</td><td align="center">n.</td><td align="center">侵扰，侵入</td><td align="center">to detect intrusion（检测入侵）</td></tr><tr><td align="center">irony</td><td align="center">/ˈaɪrəni/</td><td align="center">n.</td><td align="center">讽刺</td><td align="center">a sense of irony（讽刺感）</td></tr><tr><td align="center">kerosene</td><td align="center">/ˈkɛrəˌsiːn/</td><td align="center">n.</td><td align="center">煤油，火油</td><td align="center">a kerosene lamp（煤油灯） / A leakage of kerosene（泄漏的煤油）</td></tr><tr><td align="center">lava</td><td align="center">/ˈlɑːvə/</td><td align="center">n.</td><td align="center">熔岩</td><td align="center">a lava flow（熔岩流）</td></tr><tr><td align="center">linen</td><td align="center">/ˈlɪnɪn/</td><td align="center">n.</td><td align="center">亚麻布</td><td align="center">a linen tablecloth（亚麻桌布）</td></tr><tr><td align="center">mannerism</td><td align="center">/ˈmænəˌrɪzəm/</td><td align="center">n.</td><td align="center">习性，癖好</td><td align="center">a nervous mannerism（紧张的习性）</td></tr><tr><td align="center">mere</td><td align="center">/mɪr/</td><td align="center">adj.</td><td align="center">仅仅，只不过</td><td align="center">a mere child（只是个孩子）</td></tr><tr><td align="center">neutral</td><td align="center">/ˈnuːtrəl/</td><td align="center">adj.</td><td align="center">中立的</td><td align="center">remain neutral（保持中立）</td></tr><tr><td align="center">pervasive</td><td align="center">/pərˈveɪsɪv/</td><td align="center">adj.</td><td align="center">普遍的</td><td align="center">pervasive influence（普遍影响）</td></tr><tr><td align="center">photosynthesis</td><td align="center">/ˌfoʊtoʊˈsɪnθəsɪs/</td><td align="center">n.</td><td align="center">光合作用</td><td align="center">the process of photosynthesis（光合作用的过程）</td></tr><tr><td align="center">proliferation</td><td align="center">/prəˌlɪfəˈreɪʃn/</td><td align="center">n.</td><td align="center">增殖，繁殖</td><td align="center">proliferation of cells（细胞的增殖）</td></tr><tr><td align="center">prospect</td><td align="center">/ˈprɑːspɛkt/</td><td align="center">n.</td><td align="center">前景，期望</td><td align="center">the prospect of success（成功的前景）</td></tr><tr><td align="center">questionnaire</td><td align="center">/kwɛsʧəˈner/</td><td align="center">n.</td><td align="center">问卷</td><td align="center">fill out a questionnaire（填写问卷）</td></tr><tr><td align="center">resolve</td><td align="center">/rɪˈzɒlv/</td><td align="center">v.</td><td align="center">决定，决心</td><td align="center">resolve a problem（解决问题）</td></tr><tr><td align="center">rotation</td><td align="center">/roʊˈteɪʃn/</td><td align="center">n.</td><td align="center">旋转，轮换</td><td align="center">a rotation of crops（农作物的轮作）</td></tr><tr><td align="center">salient</td><td align="center">/ˈseɪliənt/</td><td align="center">adj.</td><td align="center">显著的，突出的</td><td align="center">a salient feature（显著特征）</td></tr><tr><td align="center">scavenger</td><td align="center">/ˈskævɪndʒər/</td><td align="center">n.</td><td align="center">清道夫，食腐动物</td><td align="center">a scavenger hunt（寻宝游戏）</td></tr><tr><td align="center">soybean</td><td align="center">/ˈsɔɪbiːn/</td><td align="center">n.</td><td align="center">大豆</td><td align="center">a soybean meal（大豆餐）</td></tr><tr><td align="center">spaghetti</td><td align="center">/spəˈɡeti/</td><td align="center">n.</td><td align="center">意大利面</td><td align="center">spaghetti with meatballs（肉丸意面）</td></tr><tr><td align="center">terrestrial</td><td align="center">/təˈrɛstriəl/</td><td align="center">adj.</td><td align="center">陆地的，地球的</td><td align="center">terrestrial ecosystem（陆地生态系统）</td></tr><tr><td align="center">tract</td><td align="center">/trækt/</td><td align="center">n.</td><td align="center">地域，领域</td><td align="center">a tract of land（一片土地）</td></tr><tr><td align="center">twig</td><td align="center">/twɪɡ/</td><td align="center">n.</td><td align="center">细枝</td><td align="center">snap a twig（折断细枝）</td></tr><tr><td align="center">uniformity</td><td align="center">/ˌjuːnɪˈfɔːrmɪti/</td><td align="center">n.</td><td align="center">一致性，统一性</td><td align="center">uniformity of design（设计的统一性）</td></tr><tr><td align="center">vibrate</td><td align="center">/vaɪˈbreɪt/</td><td align="center">v.</td><td align="center">振动</td><td align="center">vibrate with excitement（兴奋地颤抖）</td></tr><tr><td align="center">vocation</td><td align="center">/voʊˈkeɪʃn/</td><td align="center">n.</td><td align="center">职业，行业</td><td align="center">follow a vocation（追求职业）</td></tr><tr><td align="center">wrinkle</td><td align="center">/ˈrɪŋkl/</td><td align="center">n./v.</td><td align="center">皱纹；皱起</td><td align="center">a wrinkle in time（时间的皱纹）/ wrinkle one’s brow（皱眉）</td></tr></tbody></table><h2 id="Reference-📚"><a href="#Reference-📚" class="headerlink" title="Reference 📚"></a>Reference 📚</h2><ul><li>《TOEFL词汇（45天突破版）》</li><li><a href="https://openai.com/blog/chatgpt">https://openai.com/blog/chatgpt</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> TOEFL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TOEFL </tag>
            
            <tag> Vocabulary </tag>
            
            <tag> English </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TOEFL｜Word List 38</title>
      <link href="/2023/06/26/toefl-word-list38/"/>
      <url>/2023/06/26/toefl-word-list38/</url>
      
        <content type="html"><![CDATA[<h1 id="TOEFL-Vocabulary-feat-ChatGPT"><a href="#TOEFL-Vocabulary-feat-ChatGPT" class="headerlink" title="TOEFL Vocabulary (feat.ChatGPT)"></a>TOEFL Vocabulary (feat.ChatGPT)</h1><h2 id="Word-List-38-🚀"><a href="#Word-List-38-🚀" class="headerlink" title="Word List 38 🚀"></a>Word List 38 🚀</h2><table><thead><tr><th align="center">单词</th><th align="center">音标</th><th align="center">词性</th><th align="center">中文含义</th><th align="center">短语搭配</th></tr></thead><tbody><tr><td align="center">ablaze</td><td align="center">[əˈbleɪz]</td><td align="center">adj.</td><td align="center">着火的</td><td align="center">set ablaze（点燃）/ The building was soon ablaze（大楼很快就燃烧起来）</td></tr><tr><td align="center">aloft</td><td align="center">[əˈlɒft]</td><td align="center">adv.</td><td align="center">在空中</td><td align="center">He held the trophy proudly aloft（他骄傲地把奖杯举向空中）</td></tr><tr><td align="center">attain</td><td align="center">[əˈteɪn]</td><td align="center">v.</td><td align="center">达到</td><td align="center">attain a goal（达到目标）/ attain success（取得成功）</td></tr><tr><td align="center">breed</td><td align="center">[briːd]</td><td align="center">v.</td><td align="center">繁殖</td><td align="center">breed animals（繁殖动物）/ breed plants（培育植物）</td></tr><tr><td align="center">burrow</td><td align="center">[ˈbʌrəʊ]</td><td align="center">v.</td><td align="center">挖掘 / 洞穴</td><td align="center">burrow underground（在地下挖掘）/ burrow into the sand（钻入沙中）</td></tr><tr><td align="center">conclusive</td><td align="center">[kənˈkluːsɪv]</td><td align="center">adj.</td><td align="center">结论性的 / 确凿的</td><td align="center">reach a conclusive decision（作出结论性的决定）/ provide conclusive evidence（提供确凿证据）</td></tr><tr><td align="center">dawn</td><td align="center">[dɔːn]</td><td align="center">n.</td><td align="center">黎明</td><td align="center">at the crack of dawn（破晓/黎明时刻）</td></tr><tr><td align="center">disrupt</td><td align="center">[dɪsˈrʌpt]</td><td align="center">v.</td><td align="center">扰乱，打乱</td><td align="center">disrupt the meeting（打乱会议）</td></tr><tr><td align="center">endow</td><td align="center">[ɪnˈdaʊ]</td><td align="center">v.</td><td align="center">赋予</td><td align="center">endow with talent（赋予天赋）/ endow a scholarship（设立奖学金）</td></tr><tr><td align="center">ethical</td><td align="center">[ˈɛθɪkəl]</td><td align="center">adj.</td><td align="center">道德的</td><td align="center">ethical behavior（道德行为）/ ethical standards（道德标准）</td></tr><tr><td align="center">fumigate</td><td align="center">[ˈfjuːmɪɡeɪt]</td><td align="center">v.</td><td align="center">熏蒸，消毒</td><td align="center">fumigate a room（对房间进行熏蒸消毒）</td></tr><tr><td align="center">grasshopper</td><td align="center">[ˈɡræsˌhɒpər]</td><td align="center">n.</td><td align="center">蚱蜢</td><td align="center">chirping grasshopper（鸣蝉）</td></tr><tr><td align="center">humanitarian</td><td align="center">[hjuːˌmænɪˈtɛəriən]</td><td align="center">adj.</td><td align="center">人道主义的</td><td align="center">humanitarian aid（人道主义援助）</td></tr><tr><td align="center">husk</td><td align="center">[hʌsk]</td><td align="center">n.</td><td align="center">壳</td><td align="center">rice husk（稻壳） / corn husk（玉米皮）</td></tr><tr><td align="center">implication</td><td align="center">[ˌɪmplɪˈkeɪʃən]</td><td align="center">n.</td><td align="center">可能的影响 / 含义</td><td align="center">have implications for（对…有影响） / logical implication（逻辑含义）</td></tr><tr><td align="center">irritable</td><td align="center">[ˈɪrɪtəbl]</td><td align="center">adj.</td><td align="center">易怒的</td><td align="center">irritable temperament（易怒的脾气）</td></tr><tr><td align="center">landing</td><td align="center">[ˈlændɪŋ]</td><td align="center">n.</td><td align="center">着陆，登陆</td><td align="center">emergency landing（紧急着陆）</td></tr><tr><td align="center">limb</td><td align="center">[lɪmb]</td><td align="center">n.</td><td align="center">肢体</td><td align="center">upper limb（上肢） / lower limb（下肢）</td></tr><tr><td align="center">mass</td><td align="center">[mæs]</td><td align="center">n.</td><td align="center">大量</td><td align="center">mass production（大规模生产）</td></tr><tr><td align="center">morale</td><td align="center">[məˈræl]</td><td align="center">n.</td><td align="center">士气</td><td align="center">high morale（高昂士气）</td></tr><tr><td align="center">oversleep</td><td align="center">[ˌoʊvərˈsliːp]</td><td align="center">v.</td><td align="center">睡过头</td><td align="center">I overslept and missed the bus（我睡过了头，因此误了班车）</td></tr><tr><td align="center">oxide</td><td align="center">[ˈɑːksaɪd]</td><td align="center">n.</td><td align="center">氧化物</td><td align="center">iron oxide（氧化铁）</td></tr><tr><td align="center">patriot</td><td align="center">[ˈpeɪtriət]</td><td align="center">n.</td><td align="center">爱国者</td><td align="center">He regards himself as a patriot（他自认为是个爱国者）</td></tr><tr><td align="center">periodic</td><td align="center">/ˌpɪəriˈɒdɪk/</td><td align="center">adj.</td><td align="center">周期的，定期的</td><td align="center">periodic table（周期表）/ periodic maintenance（定期保养）</td></tr><tr><td align="center">pine</td><td align="center">/paɪn/</td><td align="center">n./v.</td><td align="center">松树；渴望</td><td align="center">pine tree（松树）/ pine for home（思念家乡）</td></tr><tr><td align="center">planetary</td><td align="center">/ˈplænɪteri/</td><td align="center">adj.</td><td align="center">行星的，全球的</td><td align="center">planetary system（行星系统）</td></tr><tr><td align="center">platitude</td><td align="center">/ˈplætɪtuːd/</td><td align="center">n.</td><td align="center">陈词滥调，老生常谈</td><td align="center">The talk is no more than a platitude（这番话无非是老生常谈）</td></tr><tr><td align="center">propensity</td><td align="center">/prəˈpensɪti/</td><td align="center">n.</td><td align="center">倾向</td><td align="center">propensity for risk（冒险倾向） / a propensity to lie（倾向于谎言）</td></tr><tr><td align="center">prosperity</td><td align="center">/prɒˈsperɪti/</td><td align="center">n.</td><td align="center">繁荣兴旺</td><td align="center">economic prosperity（经济繁荣）</td></tr><tr><td align="center">publication</td><td align="center">/ˌpʌblɪˈkeɪʃn/</td><td align="center">n.</td><td align="center">出版物，发布</td><td align="center">academic publication（学术出版物）</td></tr><tr><td align="center">refrigerate</td><td align="center">/rɪˈfrɪdʒəreɪt/</td><td align="center">v.</td><td align="center">使冷却，冷藏</td><td align="center">refrigerate food（冷藏食物） /  a refrigerated lorry/truck（冷藏货车/卡车）</td></tr><tr><td align="center">revert</td><td align="center">/rɪˈvɜːrt/</td><td align="center">v.</td><td align="center">恢复，回复</td><td align="center">revert to a previous state（恢复到前一个状态）</td></tr><tr><td align="center">revoke</td><td align="center">/rɪˈvoʊk/</td><td align="center">v.</td><td align="center">撤销，废除</td><td align="center">revoke a license（撤销许可证）</td></tr><tr><td align="center">rudimentary</td><td align="center">/ˌruːdɪˈmentəri/</td><td align="center">adj.</td><td align="center">初级的，基础的</td><td align="center">rudimentary skills（基础技能） / rudimentary knowledge（基础知识）</td></tr><tr><td align="center">staggering</td><td align="center">/ˈstæɡərɪŋ/</td><td align="center">adj.</td><td align="center">令人震惊的</td><td align="center">staggering amount（惊人的数量）</td></tr><tr><td align="center">textile</td><td align="center">/ˈtɛkstaɪl/</td><td align="center">n.</td><td align="center">纺织品</td><td align="center">textile industry（纺织行业）</td></tr><tr><td align="center">transparent</td><td align="center">/trænsˈpærənt/</td><td align="center">adj.</td><td align="center">透明的</td><td align="center">transparent material（透明材料）</td></tr><tr><td align="center">vertebrate</td><td align="center">/ˈvɜːrtɪbrət/</td><td align="center">n.</td><td align="center">脊椎动物</td><td align="center">vertebrate species（脊椎动物种类）</td></tr></tbody></table><h2 id="Reference-📚"><a href="#Reference-📚" class="headerlink" title="Reference 📚"></a>Reference 📚</h2><ul><li>《TOEFL词汇（45天突破版）》</li><li><a href="https://openai.com/blog/chatgpt">https://openai.com/blog/chatgpt</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> TOEFL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TOEFL </tag>
            
            <tag> Vocabulary </tag>
            
            <tag> English </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TOEFL｜Word List 37</title>
      <link href="/2023/06/25/toefl-word-list37/"/>
      <url>/2023/06/25/toefl-word-list37/</url>
      
        <content type="html"><![CDATA[<h1 id="TOEFL-Vocabulary-feat-ChatGPT"><a href="#TOEFL-Vocabulary-feat-ChatGPT" class="headerlink" title="TOEFL Vocabulary (feat.ChatGPT)"></a>TOEFL Vocabulary (feat.ChatGPT)</h1><h2 id="Word-List-37-🚀"><a href="#Word-List-37-🚀" class="headerlink" title="Word List 37 🚀"></a>Word List 37 🚀</h2><table><thead><tr><th align="center">单词</th><th align="center">音标</th><th align="center">词性</th><th align="center">中文含义</th><th align="center">短语搭配</th></tr></thead><tbody><tr><td align="center">ascribe</td><td align="center">[əˈskraɪb]</td><td align="center">v.</td><td align="center">归因于，归咎于</td><td align="center">He ascribed his failure to bad luck（他把自己的失败归咎于是运气不好）</td></tr><tr><td align="center">avert</td><td align="center">[əˈvɜːrt]</td><td align="center">v.</td><td align="center">避免，防止</td><td align="center">avert disaster（避免灾难）</td></tr><tr><td align="center">breakthrough</td><td align="center">[ˈbreɪkθruː]</td><td align="center">n.</td><td align="center">突破，突破性进展</td><td align="center">scientific breakthrough（科学突破）</td></tr><tr><td align="center">canopy</td><td align="center">[ˈkænəpiː]</td><td align="center">n.</td><td align="center">天篷，遮篷</td><td align="center">forest canopy（森林天篷）</td></tr><tr><td align="center">cascara</td><td align="center">[kəˈskærə]</td><td align="center">n.</td><td align="center">鼠李皮</td><td align="center">/</td></tr><tr><td align="center">chafe</td><td align="center">[tʃeɪf]</td><td align="center">v.</td><td align="center">摩擦，擦痛</td><td align="center">chafe against（摩擦）/ The collar was far too tight and chafed her neck（衣领紧得把她脖子磨痛了）</td></tr><tr><td align="center">chromosome</td><td align="center">[ˈkroʊməˌsoʊm]</td><td align="center">n.</td><td align="center">染色体</td><td align="center">human chromosome（人类染色体）</td></tr><tr><td align="center">combat</td><td align="center">[ˈkɑːmbæt]</td><td align="center">v.</td><td align="center">对抗，战斗</td><td align="center">combat terrorism（打击恐怖主义）</td></tr><tr><td align="center">compatible</td><td align="center">[kəmˈpætəbl]</td><td align="center">adj.</td><td align="center">兼容的，相容的</td><td align="center">compatible software（兼容软件）</td></tr><tr><td align="center">consonant</td><td align="center">[ˈkɑːnsənənt]</td><td align="center">adj. / n.</td><td align="center">辅音的；辅音音素</td><td align="center">consonant sound（辅音音素）</td></tr><tr><td align="center">constitute</td><td align="center">[ˈkɑːnstɪtuːt]</td><td align="center">v.</td><td align="center">构成，组成</td><td align="center">constitute a team（组成一个团队）</td></tr><tr><td align="center">courier</td><td align="center">[ˈkəriər]</td><td align="center">n.</td><td align="center">送货员，信使</td><td align="center">international courier（国际快递）</td></tr><tr><td align="center">devour</td><td align="center">[dɪˈvaʊər]</td><td align="center">v.</td><td align="center">狼吞虎咽</td><td align="center">devour a meal（狼吞虎咽地吃饭） / Devour Magic （吞噬魔法） / Flames devoured the house（大火吞噬了这栋房子）</td></tr><tr><td align="center">diagonal</td><td align="center">[daɪˈæɡənəl]</td><td align="center">adj. / n.</td><td align="center">对角的；对角线</td><td align="center">draw a diagonal line（画一条对角线）</td></tr><tr><td align="center">distress</td><td align="center">[dɪˈstrɛs]</td><td align="center">n. / v.</td><td align="center">苦恼，痛苦；使痛苦</td><td align="center">be in distress（处于困境中）；distress signal（求救信号）</td></tr><tr><td align="center">eclipse</td><td align="center">[ɪˈklɪps]</td><td align="center">n. / v.</td><td align="center">日食；使黯然失色</td><td align="center">an eclipse of the sun（日食）</td></tr><tr><td align="center">eject</td><td align="center">[ɪˈdʒɛkt]</td><td align="center">v.</td><td align="center">逐出，喷射</td><td align="center">eject someone from a party（将某人赶出聚会）</td></tr><tr><td align="center">evergreen</td><td align="center">[ˈɛvərˌɡrin]</td><td align="center">adj. / n.</td><td align="center">常青的，常绿植物</td><td align="center">evergreen forest（常绿林）</td></tr><tr><td align="center">genial</td><td align="center">[ˈdʒiːniəl]</td><td align="center">adj.</td><td align="center">友好的</td><td align="center">a genial smile（友好的微笑）/ genial and welcoming（和善友好）</td></tr><tr><td align="center">hum</td><td align="center">[hʌm]</td><td align="center">v. / n.</td><td align="center">哼曲子/嗡嗡声</td><td align="center">hum a tune（哼曲子）；the hum of a machine（机器的嗡嗡声）</td></tr><tr><td align="center">incessant</td><td align="center">[ɪnˈsɛsənt]</td><td align="center">adj.</td><td align="center">不停的，连续的</td><td align="center">incessant noise（持续不断的噪音）/ incessant rain（阴雨绵绵）</td></tr><tr><td align="center">ivory</td><td align="center">[ˈaɪvəri]</td><td align="center">n.</td><td align="center">象牙</td><td align="center">ivory trade（象牙贸易）</td></tr><tr><td align="center">loathsome</td><td align="center">[ˈloʊðsəm]</td><td align="center">adj.</td><td align="center">令人讨厌的</td><td align="center">a loathsome odor（令人讨厌的气味）</td></tr><tr><td align="center">lounge</td><td align="center">[laʊndʒ]</td><td align="center">v. / n.</td><td align="center">闲逛，休息室</td><td align="center">airport lounge（候机室）</td></tr><tr><td align="center">melodic</td><td align="center">/mɪˈlɑːdɪk/</td><td align="center">adj.</td><td align="center">旋律的，悦耳的</td><td align="center">a melodic and tuneful tune（ 一首旋律优美、悦耳动听的曲子）</td></tr><tr><td align="center">mount</td><td align="center">/maʊnt/</td><td align="center">n./v.</td><td align="center">组织/山</td><td align="center">mount a protest/campaign/an exhibition（发起抗议/运动/举办展览）/ Mount Kilimanjaro（乞力马扎罗山）</td></tr><tr><td align="center">musicologist</td><td align="center">/ˌmjuːzɪˈkɒlədʒɪst/</td><td align="center">n.</td><td align="center">音乐学家</td><td align="center">a prominent musicologist（著名的音乐学家）</td></tr><tr><td align="center">nicotine</td><td align="center">/ˈnɪkətiːn/</td><td align="center">n.</td><td align="center">尼古丁</td><td align="center">a nicotine patch（尼古丁贴片）</td></tr><tr><td align="center">plateau</td><td align="center">/ˈplætoʊ/</td><td align="center">n./v.</td><td align="center">高原；稳定期</td><td align="center">reach a plateau（进入稳定阶段）</td></tr><tr><td align="center">prey</td><td align="center">/preɪ/</td><td align="center">n./v.</td><td align="center">猎物</td><td align="center">stalk its prey（跟踪猎物）</td></tr><tr><td align="center">primodial</td><td align="center">/praɪˈmoʊdiəl/</td><td align="center">adj.</td><td align="center">原始的，最初的</td><td align="center">primordial instinct（原始本能）/ primordial forest（原始森林）</td></tr><tr><td align="center">prosperous</td><td align="center">/ˈprɒspərəs/</td><td align="center">adj.</td><td align="center">繁荣的</td><td align="center">a prosperous country（繁荣的国家）</td></tr><tr><td align="center">quote</td><td align="center">/kwoʊt/</td><td align="center">n./v.</td><td align="center">引述；报价</td><td align="center">quote a saying（引用谚语）</td></tr><tr><td align="center">recline</td><td align="center">/rɪˈklaɪn/</td><td align="center">v.</td><td align="center">斜靠，躺卧</td><td align="center">recline on a sofa（沙发上躺卧）</td></tr><tr><td align="center">recreation</td><td align="center">/ˌriːkriˈeɪʃn/</td><td align="center">n.</td><td align="center">娱乐，消遣</td><td align="center">recreation center（娱乐中心）</td></tr><tr><td align="center">reptile</td><td align="center">/ˈrɛptʌɪl/</td><td align="center">n.</td><td align="center">爬行动物</td><td align="center">a reptile zoo（爬行动物园）</td></tr><tr><td align="center">rinse</td><td align="center">/rɪns/</td><td align="center">n./v.</td><td align="center">冲洗，漂洗</td><td align="center">rinse a cup（冲洗杯子）</td></tr><tr><td align="center">scorch</td><td align="center">[skɔːrtʃ]</td><td align="center">v.</td><td align="center">烧焦，烤焦</td><td align="center">scorch the fabric（把织物烧焦）</td></tr><tr><td align="center">shore</td><td align="center">[ʃɔːr]</td><td align="center">n. / v.</td><td align="center">海岸，支撑</td><td align="center">rocky shore（岩石海岸）</td></tr><tr><td align="center">subdue</td><td align="center">[səbˈduː]</td><td align="center">v.</td><td align="center">征服/克制</td><td align="center">to subdue the rebels（镇压反叛者） / subdue one’s emotions（控制情绪）</td></tr><tr><td align="center">symbolic</td><td align="center">[sɪmˈbɑːlɪk]</td><td align="center">adj.</td><td align="center">象征的</td><td align="center">The dove is symbolic of peace（鸽子是和平的象征）</td></tr><tr><td align="center">synonym</td><td align="center">[ˈsɪnənɪm]</td><td align="center">n.</td><td align="center">同义词</td><td align="center">find a synonym（找到一个同义词）</td></tr><tr><td align="center">tavern</td><td align="center">[ˈtævərn]</td><td align="center">n.</td><td align="center">小酒馆</td><td align="center">old tavern（古老的小酒馆）</td></tr><tr><td align="center">theoretical</td><td align="center">[ˌθiːəˈretɪkəl]</td><td align="center">adj.</td><td align="center">理论的</td><td align="center">theoretical framework（理论框架）</td></tr><tr><td align="center">transition</td><td align="center">[trænˈzɪʃn]</td><td align="center">n.</td><td align="center">过渡，转变</td><td align="center">transition period（过渡期）</td></tr><tr><td align="center">vault</td><td align="center">[vɔːlt]</td><td align="center">n. / v.</td><td align="center">拱顶/跳过，跃过</td><td align="center">bank vault（银行保险库）/ vault the wall（跃过这堵墙）</td></tr><tr><td align="center">yeast</td><td align="center">[jiːst]</td><td align="center">n.</td><td align="center">酵母</td><td align="center">active yeast（活性酵母）</td></tr></tbody></table><h2 id="Reference-📚"><a href="#Reference-📚" class="headerlink" title="Reference 📚"></a>Reference 📚</h2><ul><li>《TOEFL词汇（45天突破版）》</li><li><a href="https://openai.com/blog/chatgpt">https://openai.com/blog/chatgpt</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> TOEFL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TOEFL </tag>
            
            <tag> Vocabulary </tag>
            
            <tag> English </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TOEFL｜Word List 36</title>
      <link href="/2023/06/25/toefl-word-list36/"/>
      <url>/2023/06/25/toefl-word-list36/</url>
      
        <content type="html"><![CDATA[<h1 id="TOEFL-Vocabulary-feat-ChatGPT"><a href="#TOEFL-Vocabulary-feat-ChatGPT" class="headerlink" title="TOEFL Vocabulary (feat.ChatGPT)"></a>TOEFL Vocabulary (feat.ChatGPT)</h1><h2 id="Word-List-36-🚀"><a href="#Word-List-36-🚀" class="headerlink" title="Word List 36 🚀"></a>Word List 36 🚀</h2><table><thead><tr><th align="center">单词</th><th align="center">音标</th><th align="center">词性</th><th align="center">中文含义</th><th align="center">短语搭配</th></tr></thead><tbody><tr><td align="center">accomodate</td><td align="center">[əˈkɒmədeɪt]</td><td align="center">v.</td><td align="center">容纳</td><td align="center">big enough to accommodate all the guest（能够容纳所有客人）/ accomodate  to（适应）</td></tr><tr><td align="center">afflict</td><td align="center">[əˈflɪkt]</td><td align="center">v.</td><td align="center">折磨</td><td align="center">be afflicted with the disease（受到疾病折磨）</td></tr><tr><td align="center">aquarium</td><td align="center">[əˈkweəriəm]</td><td align="center">n.</td><td align="center">水族馆</td><td align="center">visit the aquarium（参观水族馆）</td></tr><tr><td align="center">audit</td><td align="center">[ˈɔːdɪt]</td><td align="center">n.</td><td align="center">审计</td><td align="center">conduct an audit（进行审计）</td></tr><tr><td align="center">authorize</td><td align="center">[ˈɔːθəraɪz]</td><td align="center">v.</td><td align="center">授权</td><td align="center">authorize payment（授权付款）</td></tr><tr><td align="center">automatic</td><td align="center">[ˌɔːtəˈmætɪk]</td><td align="center">adj.</td><td align="center">自动的</td><td align="center">automatic doors（自动门）</td></tr><tr><td align="center">belie</td><td align="center">[bɪˈlaɪ]</td><td align="center">v.</td><td align="center">掩饰</td><td align="center">belie one’s true feelings（掩饰真实感受）/ belie the facts（掩盖事实）</td></tr><tr><td align="center">cactus</td><td align="center">[ˈkæktəs]</td><td align="center">n.</td><td align="center">仙人掌</td><td align="center">potted cactus（盆栽仙人掌）</td></tr><tr><td align="center">choir</td><td align="center">[kwaɪər]</td><td align="center">n.</td><td align="center">合唱团</td><td align="center">school choir（学校合唱团）</td></tr><tr><td align="center">citadel</td><td align="center">[ˈsɪtədəl]</td><td align="center">n.</td><td align="center">堡垒</td><td align="center">ancient citadel（古堡垒）</td></tr><tr><td align="center">commission</td><td align="center">[kəˈmɪʃən]</td><td align="center">n.</td><td align="center">委员会</td><td align="center">the European Commission（欧洲委员会）</td></tr><tr><td align="center">contrary</td><td align="center">[ˈkɒntrəri]</td><td align="center">adj.</td><td align="center">相反的</td><td align="center">contrary to expectations（出乎意料）</td></tr><tr><td align="center">convection</td><td align="center">[kənˈvɛkʃən]</td><td align="center">n.</td><td align="center">对流</td><td align="center">the rising convection（上升的对流）</td></tr><tr><td align="center">conversion</td><td align="center">[kənˈvɜːrʒən]</td><td align="center">n.</td><td align="center">转换</td><td align="center">conversion rate（转化率）</td></tr><tr><td align="center">correspondence</td><td align="center">[ˌkɒrɪsˈpɒndəns]</td><td align="center">n.</td><td align="center">通信，信件</td><td align="center">business correspondence（商务信函）/ personal correspondence（个人信件）</td></tr><tr><td align="center">counteract</td><td align="center">[ˌkaʊntərˈækt]</td><td align="center">v.</td><td align="center">抵消，阻止</td><td align="center">counteract the effects（抵消影响）</td></tr><tr><td align="center">delirium</td><td align="center">[dɪˈlɪriəm]</td><td align="center">n.</td><td align="center">精神错乱</td><td align="center">In my fever I had a long consistent delirium（我发烧的时候一度精神错乱）</td></tr><tr><td align="center">dispose</td><td align="center">[dɪˈspoʊz]</td><td align="center">v.</td><td align="center">处理</td><td align="center">dispose of waste（处理废物）</td></tr><tr><td align="center">edible</td><td align="center">[ˈɛdɪbl̩]</td><td align="center">adj.</td><td align="center">可食用的</td><td align="center">edible mushrooms（可食用蘑菇）</td></tr><tr><td align="center">elliptical</td><td align="center">[ɪˈlɪptɪkl̩]</td><td align="center">adj.</td><td align="center">椭圆的</td><td align="center">elliptical orbit（椭圆轨道）</td></tr><tr><td align="center">exposition</td><td align="center">[ˌɛkspəˈzɪʃən]</td><td align="center">n.</td><td align="center">阐述，展览</td><td align="center">art exposition（艺术展览）/ exposition of ideas（思想阐述）</td></tr><tr><td align="center">flora</td><td align="center">[ˈflɔːrə]</td><td align="center">n.</td><td align="center">植物群</td><td align="center">tropical flora（热带植物群）</td></tr><tr><td align="center">frost</td><td align="center">[frɒst]</td><td align="center">n.</td><td align="center">霜，冰冻</td><td align="center">frost formation（霜的形成）</td></tr><tr><td align="center">lichen</td><td align="center">[ˈlaɪkən]</td><td align="center">n.</td><td align="center">地衣，苔藓</td><td align="center">lichen-covered rocks（覆盖着青苔的岩石）</td></tr><tr><td align="center">likewise</td><td align="center">[ˈlaɪkwaɪz]</td><td align="center">adv.</td><td align="center">同样地</td><td align="center">think likewise（同样认为）/ to do likewise（也这样做）</td></tr><tr><td align="center">mechanize</td><td align="center">[ˈmɛkənaɪz]</td><td align="center">v.</td><td align="center">使机械化</td><td align="center">mechanize a process（使流程自动化）/ mechanization（机械化）</td></tr><tr><td align="center">novice</td><td align="center">[ˈnɒvɪs]</td><td align="center">n.</td><td align="center">新手</td><td align="center">a novice in photography（摄影新手）</td></tr><tr><td align="center">obedience</td><td align="center">[oʊˈbiːdiəns]</td><td align="center">n.</td><td align="center">服从</td><td align="center">obedience to authority（对权威的服从）</td></tr><tr><td align="center">obsolete</td><td align="center">[ˌɑːbsəˈliːt]</td><td align="center">adj.</td><td align="center">废弃的</td><td align="center">obsolete technology（过时的技术）</td></tr><tr><td align="center">outermost</td><td align="center">[ˌaʊtərˈmoʊst]</td><td align="center">adj.</td><td align="center">最外面的</td><td align="center">the outermost layer（最外层）</td></tr><tr><td align="center">pheromone</td><td align="center">[ˈfɛrəmoʊn]</td><td align="center">n.</td><td align="center">信息素</td><td align="center">release pheromones（释放信息素）</td></tr><tr><td align="center">porous</td><td align="center">[ˈpɔːrəs]</td><td align="center">adj.</td><td align="center">多孔的</td><td align="center">porous material（多孔材料）/ porous structure（多孔结构）</td></tr><tr><td align="center">powder</td><td align="center">[ˈpaʊdər]</td><td align="center">n.</td><td align="center">粉末</td><td align="center">chilli powder（辣椒粉）</td></tr><tr><td align="center">puddle</td><td align="center">[ˈpʌdəl]</td><td align="center">n.</td><td align="center">水坑</td><td align="center">muddy puddles（泥水坑）</td></tr><tr><td align="center">recoil</td><td align="center">[rɪˈkɔɪl]</td><td align="center">v.</td><td align="center">退却</td><td align="center">recoil in fear（因恐惧而退却）/ recoil from violence（回避暴力）</td></tr><tr><td align="center">reservoir</td><td align="center">[ˈrɛzərvwɑːr]</td><td align="center">n.</td><td align="center">水库</td><td align="center">natural reservoir（天然水库）/ reservoir of knowledge（知识储备）</td></tr><tr><td align="center">seminar</td><td align="center">[ˈsɛmɪnɑːr]</td><td align="center">n.</td><td align="center">研讨会，讲座</td><td align="center">attend a seminar（参加研讨会）/ organize a seminar（组织讲座）</td></tr><tr><td align="center">sentimental</td><td align="center">[ˌsɛntɪˈmɛntəl]</td><td align="center">adj.</td><td align="center">多愁善感的</td><td align="center">sentimental value（感情价值）/ sentimental song（多愁善感的歌曲）</td></tr><tr><td align="center">stature</td><td align="center">[ˈstætʃər]</td><td align="center">n.</td><td align="center">身材，身高</td><td align="center">a man of short stature（矮个子的男人）</td></tr><tr><td align="center">sting</td><td align="center">[stɪŋ]</td><td align="center">n.</td><td align="center">刺痛</td><td align="center">bee sting（蜜蜂蜇伤）/ feel the sting（感受刺痛）</td></tr><tr><td align="center">topographical</td><td align="center">[ˌtɒpəˈɡræfɪkəl]</td><td align="center">adj.</td><td align="center">地形的，地貌的</td><td align="center">topographical map（地形图）/ topographical features（地貌特征）</td></tr><tr><td align="center">validity</td><td align="center">[vəˈlɪdɪti]</td><td align="center">n.</td><td align="center">有效性</td><td align="center">question the validity（质疑有效性） / the validity of a contract（合同的有效性）</td></tr><tr><td align="center">varied</td><td align="center">[ˈvɛriɪd]</td><td align="center">adj.</td><td align="center">多样的</td><td align="center">varied flavors（各种口味）</td></tr><tr><td align="center">volatile</td><td align="center">[ˈvɒlətaɪl]</td><td align="center">adj.</td><td align="center">易挥发的，不稳定的</td><td align="center">volatile substance（易挥发物质）/ volatile situation（不稳定局势）</td></tr><tr><td align="center">ware</td><td align="center">[wɛr]</td><td align="center">n.</td><td align="center">商品</td><td align="center">pottery ware（陶器商品）/ kitchen ware（厨房用具）/ bathroom ware 浴室用品</td></tr><tr><td align="center">wary</td><td align="center">[ˈwɛri]</td><td align="center">adj.</td><td align="center">谨慎的</td><td align="center">be wary of strangers（对陌生人保持警惕）</td></tr></tbody></table><h2 id="Reference-📚"><a href="#Reference-📚" class="headerlink" title="Reference 📚"></a>Reference 📚</h2><ul><li>《TOEFL词汇（45天突破版）》</li><li><a href="https://openai.com/blog/chatgpt">https://openai.com/blog/chatgpt</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> TOEFL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TOEFL </tag>
            
            <tag> Vocabulary </tag>
            
            <tag> English </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TOEFL｜Word List 35</title>
      <link href="/2023/06/24/toefl-word-list35/"/>
      <url>/2023/06/24/toefl-word-list35/</url>
      
        <content type="html"><![CDATA[<h1 id="TOEFL-Vocabulary-feat-ChatGPT"><a href="#TOEFL-Vocabulary-feat-ChatGPT" class="headerlink" title="TOEFL Vocabulary (feat.ChatGPT)"></a>TOEFL Vocabulary (feat.ChatGPT)</h1><h2 id="Word-List-35-🚀"><a href="#Word-List-35-🚀" class="headerlink" title="Word List 35 🚀"></a>Word List 35 🚀</h2><table><thead><tr><th align="center">单词</th><th align="center">音标</th><th align="center">词性</th><th align="center">中文含义</th><th align="center">短语搭配</th></tr></thead><tbody><tr><td align="center">abut</td><td align="center">[əˈbʌt]</td><td align="center">v.</td><td align="center">邻接，毗邻</td><td align="center">abut against（与…毗邻）</td></tr><tr><td align="center">acoustic</td><td align="center">[əˈkuːstɪk]</td><td align="center">adj.</td><td align="center">声学的</td><td align="center">acoustic signal（听觉信号） / acoustic guitar（原声吉他）</td></tr><tr><td align="center">adolescence</td><td align="center">[ˌædəˈlɛsns]</td><td align="center">n.</td><td align="center">青春期，青少年时期</td><td align="center">adolescence stage（青春期阶段）</td></tr><tr><td align="center">affinity</td><td align="center">[əˈfɪnəti]</td><td align="center">n.</td><td align="center">亲近感</td><td align="center">have an affinity for music（对音乐的亲近）</td></tr><tr><td align="center">algae</td><td align="center">[ˈældʒiː]</td><td align="center">n.</td><td align="center">藻类</td><td align="center">green algae（绿藻）</td></tr><tr><td align="center">anchor</td><td align="center">[ˈæŋkər]</td><td align="center">n.</td><td align="center">锚，主持人</td><td align="center">drop anchor（抛锚）</td></tr><tr><td align="center">appetite</td><td align="center">[ˈæpɪtaɪt]</td><td align="center">n.</td><td align="center">食欲</td><td align="center">lose appetite（失去食欲）</td></tr><tr><td align="center">assemble</td><td align="center">[əˈsɛmbl]</td><td align="center">v.</td><td align="center">集合，装配</td><td align="center">assemble a team（组建团队）</td></tr><tr><td align="center">bicameral</td><td align="center">[baɪˈkæmərəl]</td><td align="center">adj.</td><td align="center">两院制的，两个议院的</td><td align="center">The Congress is bicameral（国会是两院制的）</td></tr><tr><td align="center">boast</td><td align="center">[boʊst]</td><td align="center">v.</td><td align="center">自夸，夸口</td><td align="center">boast about achievements（夸耀成就）</td></tr><tr><td align="center">braid</td><td align="center">[breɪd]</td><td align="center">n.</td><td align="center">辫子</td><td align="center">braided stream（辫状河流） / French braid（法式编发）</td></tr><tr><td align="center">bruise</td><td align="center">[bruːz]</td><td align="center">n.</td><td align="center">擦伤，挫伤</td><td align="center">a nasty bruise（严重擦伤）</td></tr><tr><td align="center">conscious</td><td align="center">[ˈkɑːnʃəs]</td><td align="center">adj.</td><td align="center">有意识的，意识到的</td><td align="center">be conscious of（意识到）</td></tr><tr><td align="center">conserve</td><td align="center">[kənˈsɜːrv]</td><td align="center">v.</td><td align="center">保护，保存</td><td align="center">conserve energy（节约能源）</td></tr><tr><td align="center">craft</td><td align="center">[kræft]</td><td align="center">n.</td><td align="center">工艺，手艺</td><td align="center">learn a craft（学一门手艺）</td></tr><tr><td align="center">crest</td><td align="center">[krɛst]</td><td align="center">n.</td><td align="center">顶部，山顶</td><td align="center">crest of a wave（浪峰）</td></tr><tr><td align="center">crustacean</td><td align="center">[krʌˈsteɪʃən]</td><td align="center">n.</td><td align="center">甲壳类动物</td><td align="center">crustacean species（甲壳类动物种类）</td></tr><tr><td align="center">dam</td><td align="center">[dæm]</td><td align="center">n.</td><td align="center">水坝</td><td align="center">build a dam（建造水坝）</td></tr><tr><td align="center">dent</td><td align="center">[dɛnt]</td><td align="center">n.</td><td align="center">凹痕，凹陷</td><td align="center">dent in the car（汽车的凹痕）</td></tr><tr><td align="center">disintegrate</td><td align="center">[dɪsˈɪntɪɡreɪt]</td><td align="center">v.</td><td align="center">分解，瓦解</td><td align="center">disintegrate into fragments（分解成碎片）</td></tr><tr><td align="center">downtown</td><td align="center">[ˈdaʊntaʊn]</td><td align="center">adv.</td><td align="center">在市中心</td><td align="center">downtown area（市中心地区）</td></tr><tr><td align="center">effectiveness</td><td align="center">[ɪˌfɛktɪvˈnɛs]</td><td align="center">n.</td><td align="center">有效性，功效</td><td align="center">measure the effectiveness（评估有效性）</td></tr><tr><td align="center">eloquent</td><td align="center">[ˈɛləkwənt]</td><td align="center">adj.</td><td align="center">雄辩的</td><td align="center">deliver an eloquent speech（发表雄辩的演讲）</td></tr><tr><td align="center">exhale</td><td align="center">[ɪkˈseɪl]</td><td align="center">v.</td><td align="center">呼气，吐出</td><td align="center">exhale deeply（深呼吸）</td></tr><tr><td align="center">fauna</td><td align="center">[ˈfɔːnə]</td><td align="center">n.</td><td align="center">动物群，动物区系</td><td align="center">flora and fauna（动植物群）</td></tr><tr><td align="center">fertilizer</td><td align="center">[ˈfɜːrtəlaɪzər]</td><td align="center">n.</td><td align="center">肥料</td><td align="center">chemical fertilizer（化肥）</td></tr><tr><td align="center">formidable</td><td align="center">[ˈfɔːrmɪdəbl]</td><td align="center">adj.</td><td align="center">艰难的 / 令人敬畏的</td><td align="center">a formidable task（艰巨的任务）/ a formidable opponent（强大的对手）</td></tr><tr><td align="center">gaseous</td><td align="center">[ˈɡæsiəs]</td><td align="center">adj.</td><td align="center">气体的</td><td align="center">gaseous state（气态）</td></tr><tr><td align="center">handful</td><td align="center">[ˈhændfʊl]</td><td align="center">n.</td><td align="center">少数</td><td align="center">a handful of people（少数人）</td></tr><tr><td align="center">imagist</td><td align="center">[ˈɪmədʒɪst]</td><td align="center">n.</td><td align="center">意象派诗人，意象派成员</td><td align="center">a prominent imagist poet（一位著名的意象派诗人）</td></tr><tr><td align="center">impulse</td><td align="center">[ˈɪmpʌls]</td><td align="center">n.</td><td align="center">冲动</td><td align="center">act on impulse（冲动行事）</td></tr><tr><td align="center">inanimate</td><td align="center">[ɪnˈænɪmət]</td><td align="center">adj.</td><td align="center">无生命的</td><td align="center">inanimate objects（无生命的物体）</td></tr><tr><td align="center">incentive</td><td align="center">[ɪnˈsɛntɪv]</td><td align="center">n.</td><td align="center">刺激，动力</td><td align="center">provide an incentive（提供动力）</td></tr><tr><td align="center">inject</td><td align="center">[ɪnˈdʒɛkt]</td><td align="center">v.</td><td align="center">注射，注入</td><td align="center">inject medication（注射药物）</td></tr><tr><td align="center">inscribe</td><td align="center">[ɪnˈskraɪb]</td><td align="center">v.</td><td align="center">雕刻，题写</td><td align="center">inscribe a name on a monument（在纪念碑上题写名字）</td></tr><tr><td align="center">kiln</td><td align="center">[kɪln]</td><td align="center">n.</td><td align="center">窑，炉</td><td align="center">pottery kiln（陶瓷窑）</td></tr><tr><td align="center">laser</td><td align="center">[ˈleɪzər]</td><td align="center">n.</td><td align="center">激光</td><td align="center">laser beam（激光束）</td></tr><tr><td align="center">loan</td><td align="center">[loʊn]</td><td align="center">n.</td><td align="center">贷款</td><td align="center">bank loan（银行贷款）</td></tr><tr><td align="center">minimal</td><td align="center">[ˈmɪnɪməl]</td><td align="center">adj.</td><td align="center">最小的</td><td align="center">minimal effort（最小的努力）</td></tr><tr><td align="center">opaque</td><td align="center">[oʊˈpeɪk]</td><td align="center">adj.</td><td align="center">不透明</td><td align="center">opaque glass（不透明玻璃）</td></tr><tr><td align="center">pedagogy</td><td align="center">[ˈpɛdəɡɑːdʒi]</td><td align="center">n.</td><td align="center">教育学</td><td align="center">effective pedagogy（有效的教育学）</td></tr><tr><td align="center">pollinator</td><td align="center">[ˈpɑːləneɪtər]</td><td align="center">n.</td><td align="center">传粉媒介</td><td align="center">flower pollinator（花粉传粉媒介）</td></tr><tr><td align="center">progressive</td><td align="center">[prəˈɡrɛsɪv]</td><td align="center">adj.</td><td align="center">进步的</td><td align="center">progressive development（进步发展）</td></tr><tr><td align="center">revival</td><td align="center">[rɪˈvaɪvl]</td><td align="center">n.</td><td align="center">复兴</td><td align="center">cultural revival（文化复兴）/ an economic revival （经济复苏）</td></tr><tr><td align="center">ritual</td><td align="center">[ˈrɪtʃuəl]</td><td align="center">n.</td><td align="center">仪式</td><td align="center">religious ritual（宗教仪式）</td></tr><tr><td align="center">saddle</td><td align="center">[ˈsædl]</td><td align="center">n.</td><td align="center">鞍，马鞍</td><td align="center">horse saddle（马鞍）</td></tr><tr><td align="center">seasoning</td><td align="center">[ˈsiːznɪŋ]</td><td align="center">n.</td><td align="center">调味品</td><td align="center">herbs and seasoning（草药和调味品）</td></tr><tr><td align="center">soloist</td><td align="center">[ˈsoʊloʊɪst]</td><td align="center">n.</td><td align="center">独奏者，独唱者</td><td align="center">talented soloist（有才华的独奏者）</td></tr><tr><td align="center">squirt</td><td align="center">[skwɜrt]</td><td align="center">v.</td><td align="center">喷出，溅出</td><td align="center">squirt water（喷水）</td></tr><tr><td align="center">thaw</td><td align="center">[θɔː]</td><td align="center">v.</td><td align="center">解冻，融化</td><td align="center">thaw a frozen pond（解冻冰冻的池塘）</td></tr><tr><td align="center">thorny</td><td align="center">[ˈθɔːrni]</td><td align="center">adj.</td><td align="center">多刺的</td><td align="center">thorny issue（棘手的问题）</td></tr><tr><td align="center">typify</td><td align="center">[ˈtaɪpɪfaɪ]</td><td align="center">v.</td><td align="center">代表，象征</td><td align="center">typify a generation（代表一代人） / clothes that typify the 1960s（20世纪60年代典型的服装）</td></tr><tr><td align="center">virtue</td><td align="center">[ˈvɜrtʃuː]</td><td align="center">n.</td><td align="center">美德，优点</td><td align="center">moral virtues（道德美德）</td></tr><tr><td align="center">virtuous</td><td align="center">[ˈvɜrtʃuːəs]</td><td align="center">adj.</td><td align="center">有美德的</td><td align="center">She lived an entirely virtuous life（她一生品行端正）</td></tr></tbody></table><h2 id="Reference-📚"><a href="#Reference-📚" class="headerlink" title="Reference 📚"></a>Reference 📚</h2><ul><li>《TOEFL词汇（45天突破版）》</li><li><a href="https://openai.com/blog/chatgpt">https://openai.com/blog/chatgpt</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> TOEFL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TOEFL </tag>
            
            <tag> Vocabulary </tag>
            
            <tag> English </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TOEFL｜Word List 34</title>
      <link href="/2023/06/24/toefl-word-list34/"/>
      <url>/2023/06/24/toefl-word-list34/</url>
      
        <content type="html"><![CDATA[<h1 id="TOEFL-Vocabulary-feat-ChatGPT"><a href="#TOEFL-Vocabulary-feat-ChatGPT" class="headerlink" title="TOEFL Vocabulary (feat.ChatGPT)"></a>TOEFL Vocabulary (feat.ChatGPT)</h1><h2 id="Word-List-34-🚀"><a href="#Word-List-34-🚀" class="headerlink" title="Word List 34 🚀"></a>Word List 34 🚀</h2><table><thead><tr><th align="center">单词</th><th align="center">音标</th><th align="center">词性</th><th align="center">中文含义</th><th align="center">短语搭配</th></tr></thead><tbody><tr><td align="center">accomplished</td><td align="center">[əˈkʌmplɪʃt]</td><td align="center">adj.</td><td align="center">技艺高超的/熟练的</td><td align="center">highly accomplished musician（技艺高超的音乐家）</td></tr><tr><td align="center">aesthetic</td><td align="center">[iːsˈθɛtɪk]</td><td align="center">adj.</td><td align="center">美学的，审美的</td><td align="center">aesthetic effect（美学效果）</td></tr><tr><td align="center">alert</td><td align="center">[əˈlɜːrt]</td><td align="center">adj.</td><td align="center">警觉的</td><td align="center">stay alert and vigilant（保持警觉）</td></tr><tr><td align="center">audition</td><td align="center">[ɔːˈdɪʃn]</td><td align="center">n.</td><td align="center">试演，试听</td><td align="center">attend an audition for a play（参加一场戏剧试镜）</td></tr><tr><td align="center">buck</td><td align="center">[bʌk]</td><td align="center">n.</td><td align="center">美元</td><td align="center">cost 10 bucks（花费十美元）</td></tr><tr><td align="center">burgeon</td><td align="center">[ˈbɜːrdʒən]</td><td align="center">v.</td><td align="center">迅速发展</td><td align="center">a burgeoning industry（蓬勃发展的行业）</td></tr><tr><td align="center">centric</td><td align="center">[ˈsɛntrɪk]</td><td align="center">adj.</td><td align="center">以…为中心</td><td align="center">customer-centric approach（以客户为中心的方案）</td></tr><tr><td align="center">compile</td><td align="center">[kəmˈpaɪl]</td><td align="center">v.</td><td align="center">汇编，编辑</td><td align="center">compile a list（编制一份清单）</td></tr><tr><td align="center">consequence</td><td align="center">[ˈkɒnsɪkwəns]</td><td align="center">n.</td><td align="center">结果，后果</td><td align="center">face the consequences of actions（承担行为后果）</td></tr><tr><td align="center">controversy</td><td align="center">[ˈkɒntrəvɜːrsi]</td><td align="center">n.</td><td align="center">争议，争论</td><td align="center">a topic of controversy in politics（政治上的争议话题）</td></tr><tr><td align="center">corona</td><td align="center">[kəˈroʊnə]</td><td align="center">n.</td><td align="center">日冕，冠状物</td><td align="center">solar corona during an eclipse（日食期间的日冕）</td></tr><tr><td align="center">diameter</td><td align="center">[daɪˈæmɪtər]</td><td align="center">n.</td><td align="center">直径</td><td align="center">measure the diameter of a circle（测量圆的直径）</td></tr><tr><td align="center">glacier</td><td align="center">[ˈɡleɪʃər]</td><td align="center">n.</td><td align="center">冰川</td><td align="center">glacier melt (冰川融化)</td></tr><tr><td align="center">gnaw</td><td align="center">[nɔː]</td><td align="center">v.</td><td align="center">咬</td><td align="center">gnaw on a bone (咬骨头)</td></tr><tr><td align="center">gulf</td><td align="center">[ɡʌlf]</td><td align="center">n.</td><td align="center">海湾</td><td align="center">the Persian Gulf (波斯湾)</td></tr><tr><td align="center">initially</td><td align="center">[ɪˈnɪʃəli]</td><td align="center">adv.</td><td align="center">最初，开始</td><td align="center">initially, I was confused (最初，我很困惑)</td></tr><tr><td align="center">intellect</td><td align="center">[ˈɪntəlɛkt]</td><td align="center">n.</td><td align="center">智力</td><td align="center">emotions develop in parallel with the intellect（ 情感与智力同步发展）</td></tr><tr><td align="center">internal</td><td align="center">[ɪnˈtɜːrnəl]</td><td align="center">adj.</td><td align="center">内部的</td><td align="center">internal organs (内脏器官)</td></tr><tr><td align="center">irregular</td><td align="center">[ɪˈrɛɡjələr]</td><td align="center">adj.</td><td align="center">不规则的</td><td align="center">irregular shape (不规则的形状)</td></tr><tr><td align="center">jumble</td><td align="center">[ˈdʒʌmbəl]</td><td align="center">n.</td><td align="center">杂乱的/混杂</td><td align="center">a jumble of papers (一堆杂乱的文件)</td></tr><tr><td align="center">kinetic</td><td align="center">[kɪˈnɛtɪk]</td><td align="center">adj.</td><td align="center">动力的</td><td align="center">kinetic energy (动能)</td></tr><tr><td align="center">libel</td><td align="center">[ˈlaɪbəl]</td><td align="center">n.</td><td align="center">诽谤</td><td align="center">sued sb for libel（起诉某人诽谤）</td></tr><tr><td align="center">maneuver</td><td align="center">[məˈnuːvər]</td><td align="center">n.</td><td align="center">策略/操纵/演习</td><td align="center">military maneuver (军事演习) / diplomatic manoeuvres（外交策略）</td></tr><tr><td align="center">mechanic</td><td align="center">[məˈkænɪk]</td><td align="center">n.</td><td align="center">机械师</td><td align="center">automotive mechanic (汽车技师)</td></tr><tr><td align="center">naked</td><td align="center">[ˈneɪkɪd]</td><td align="center">adj.</td><td align="center">裸露的</td><td align="center">naked truth（赤裸裸的事实）</td></tr><tr><td align="center">nickel</td><td align="center">[ˈnɪkəl]</td><td align="center">n.</td><td align="center">镍币</td><td align="center">a nickel coin（一枚镍币）</td></tr><tr><td align="center">oak</td><td align="center">[oʊk]</td><td align="center">n.</td><td align="center">橡树</td><td align="center">oak tree（橡树）</td></tr><tr><td align="center">outgas</td><td align="center">[ˌaʊtˈɡæs]</td><td align="center">v.</td><td align="center">脱气，释放气体</td><td align="center">outgas collectors（脱气采集装置）</td></tr><tr><td align="center">panorama</td><td align="center">[ˌpænəˈræmə]</td><td align="center">n.</td><td align="center">全景，全貌</td><td align="center">breathtaking panorama（令人惊叹的全景）</td></tr><tr><td align="center">partnership</td><td align="center">[ˈpɑːrtnərʃɪp]</td><td align="center">n.</td><td align="center">合伙</td><td align="center">business partnership（商业合伙关系）</td></tr><tr><td align="center">patriarch</td><td align="center">[ˈpeɪtriɑːrk]</td><td align="center">n.</td><td align="center">家长，族长</td><td align="center">church patriarch（教会长老）</td></tr><tr><td align="center">perish</td><td align="center">[ˈperɪʃ]</td><td align="center">v.</td><td align="center">毁灭，死亡</td><td align="center">perish together（同归于尽）</td></tr><tr><td align="center">precursor</td><td align="center">[priːˈkɜːrsər]</td><td align="center">n.</td><td align="center">先驱，前兆</td><td align="center">Error is the precursor of success（错误是正确的先导）</td></tr><tr><td align="center">primate</td><td align="center">[ˈpraɪmeɪt]</td><td align="center">n.</td><td align="center">灵长类动物</td><td align="center">non-human primate（非人类灵长类动物）</td></tr><tr><td align="center">pueblo</td><td align="center">[ˈpwɛbloʊ]</td><td align="center">n.</td><td align="center">印第安人村庄</td><td align="center">Hopi Pueblo（霍皮印第安人村庄）</td></tr><tr><td align="center">quartz</td><td align="center">[kwɔːrts]</td><td align="center">n.</td><td align="center">石英</td><td align="center">quartz crystal（石英晶体）</td></tr><tr><td align="center">ratify</td><td align="center">[ˈrætɪfaɪ]</td><td align="center">v.</td><td align="center">正式批准</td><td align="center">ratify a treaty（正式批准条约）</td></tr><tr><td align="center">receptor</td><td align="center">[rɪˈseptər]</td><td align="center">n.</td><td align="center">感受器</td><td align="center">the information receptors（信息感受器）</td></tr><tr><td align="center">revise</td><td align="center">[rɪˈvaɪz]</td><td align="center">v.</td><td align="center">修订</td><td align="center">revise a document（修订文件）</td></tr><tr><td align="center">rigid</td><td align="center">[ˈrɪdʒɪd]</td><td align="center">adj.</td><td align="center">死板的/僵硬的/刚硬的</td><td align="center">rigid rules（严格的规定）/ rigid structure（刚性结构）</td></tr><tr><td align="center">rustproof</td><td align="center">[ˈrʌstpruːf]</td><td align="center">adj.</td><td align="center">防锈的</td><td align="center">rustproof coating（防锈涂层）</td></tr><tr><td align="center">sediment</td><td align="center">[ˈsɛdɪmənt]</td><td align="center">n.</td><td align="center">沉淀</td><td align="center">a layer of sediment（一层沉积物）</td></tr><tr><td align="center">sociable</td><td align="center">[ˈsoʊʃəbl]</td><td align="center">adj.</td><td align="center">善社交</td><td align="center">sociable person（善于交际的人）</td></tr><tr><td align="center">souvenir</td><td align="center">[ˌsuːvəˈnɪr]</td><td align="center">n.</td><td align="center">纪念品</td><td align="center">souvenir shop（纪念品商店）</td></tr><tr><td align="center">spiny</td><td align="center">[ˈspaɪni]</td><td align="center">adj.</td><td align="center">多刺的</td><td align="center">a spiny cactus（多刺仙人掌）</td></tr><tr><td align="center">stardom</td><td align="center">[ˈstɑːrdəm]</td><td align="center">n.</td><td align="center">明星地位</td><td align="center">rise to stardom（成名）</td></tr><tr><td align="center">subspecies</td><td align="center">[ˈsʌbsipiːʃɪz]</td><td align="center">n.</td><td align="center">亚种</td><td align="center">distinct subspecies（明显的亚种）</td></tr><tr><td align="center">teem</td><td align="center">[tiːm]</td><td align="center">v.</td><td align="center">充满</td><td align="center">streets teeming with people（街道上挤满了人）</td></tr><tr><td align="center">wholesome</td><td align="center">[ˈhoʊlsəm]</td><td align="center">adj.</td><td align="center">健康的</td><td align="center">wholesome food（健康食品）</td></tr></tbody></table><h2 id="Reference-📚"><a href="#Reference-📚" class="headerlink" title="Reference 📚"></a>Reference 📚</h2><ul><li>《TOEFL词汇（45天突破版）》</li><li><a href="https://openai.com/blog/chatgpt">https://openai.com/blog/chatgpt</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> TOEFL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TOEFL </tag>
            
            <tag> Vocabulary </tag>
            
            <tag> English </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TOEFL｜Word List 33</title>
      <link href="/2023/06/23/toefl-word-list33/"/>
      <url>/2023/06/23/toefl-word-list33/</url>
      
        <content type="html"><![CDATA[<h1 id="TOEFL-Vocabulary-feat-ChatGPT"><a href="#TOEFL-Vocabulary-feat-ChatGPT" class="headerlink" title="TOEFL Vocabulary (feat.ChatGPT)"></a>TOEFL Vocabulary (feat.ChatGPT)</h1><h2 id="Word-List-33-🚀"><a href="#Word-List-33-🚀" class="headerlink" title="Word List 33 🚀"></a>Word List 33 🚀</h2><table><thead><tr><th align="center">单词</th><th align="center">音标</th><th align="center">词性</th><th align="center">中文含义</th><th align="center">短语搭配</th></tr></thead><tbody><tr><td align="center">academy</td><td align="center">[əˈkædəmi]</td><td align="center">n.</td><td align="center">学院，学会</td><td align="center">military academy (军事学院)</td></tr><tr><td align="center">acquaint</td><td align="center">[əˈkweɪnt]</td><td align="center">v.</td><td align="center">使熟悉，认识</td><td align="center">acquaint yourself with (熟悉某事物)</td></tr><tr><td align="center">adobe</td><td align="center">[əˈdoʊbi]</td><td align="center">n.</td><td align="center">泥砖，土坯</td><td align="center">adobe house (土坯房)</td></tr><tr><td align="center">asthma</td><td align="center">[ˈæzmə]</td><td align="center">n.</td><td align="center">哮喘</td><td align="center">asthma symptoms (哮喘症状)</td></tr><tr><td align="center">barb</td><td align="center">[bɑːrb]</td><td align="center">n.</td><td align="center">倒钩</td><td align="center">barb wire (倒钩铁丝)</td></tr><tr><td align="center">barrel</td><td align="center">[ˈbærəl]</td><td align="center">n.</td><td align="center">桶，筒</td><td align="center">oil barrel (石油桶)</td></tr><tr><td align="center">bead</td><td align="center">[biːd]</td><td align="center">n.</td><td align="center">珠子</td><td align="center">a string of beads（一串珠子）</td></tr><tr><td align="center">clumsy</td><td align="center">[ˈklʌmzi]</td><td align="center">adj.</td><td align="center">笨拙的</td><td align="center">clumsy movements (笨拙的动作)</td></tr><tr><td align="center">coherent</td><td align="center">[koʊˈhɪərənt]</td><td align="center">adj.</td><td align="center">连贯的，条理清楚</td><td align="center">coherent argument (连贯的论点)</td></tr><tr><td align="center">compass</td><td align="center">[ˈkʌmpəs]</td><td align="center">n.</td><td align="center">指南针</td><td align="center">magnetic compass (磁罗盘)</td></tr><tr><td align="center">configuration</td><td align="center">[kənˌfɪɡjəˈreɪʃən]</td><td align="center">n.</td><td align="center">结构，配置</td><td align="center">system configuration (系统配置)</td></tr><tr><td align="center">consort</td><td align="center">[ˈkɑːnsɔːrt]</td><td align="center">v.</td><td align="center">结交</td><td align="center">consort with friends (与朋友交往)</td></tr><tr><td align="center">contradict</td><td align="center">[ˌkɑːntrəˈdɪkt]</td><td align="center">v.</td><td align="center">反驳</td><td align="center">contradict a statement (反驳陈述)</td></tr><tr><td align="center">correspond</td><td align="center">[ˌkɔːrəˈspɑːnd]</td><td align="center">v.</td><td align="center">相一致，符号</td><td align="center">correspond to reality (与现实相符)</td></tr><tr><td align="center">delectable</td><td align="center">[dɪˈlɛktəbl]</td><td align="center">adj.</td><td align="center">美味的</td><td align="center">delectable desserts (美味的甜点)</td></tr><tr><td align="center">dependable</td><td align="center">[dɪˈpɛndəbl]</td><td align="center">adj.</td><td align="center">可靠的，可信赖的</td><td align="center">dependable friend (可靠的朋友)</td></tr><tr><td align="center">disrepute</td><td align="center">[dɪsˈrɛpjut]</td><td align="center">n.</td><td align="center">声名狼藉</td><td align="center">fall into disrepute (名誉扫地)</td></tr><tr><td align="center">diversion</td><td align="center">[daɪˈvɜːrʒən]</td><td align="center">n.</td><td align="center">转移，消遣</td><td align="center">diversion of attention (注意力转移) / a diversion of resources（资源的转移）</td></tr><tr><td align="center">effluent</td><td align="center">[ˈɛflʊənt]</td><td align="center">n.</td><td align="center">排放物，流出物</td><td align="center">industrial effluent (工业废水) / effluent treatment（废水处理）</td></tr><tr><td align="center">emergence</td><td align="center">[ɪˈmɜːrdʒəns]</td><td align="center">n.</td><td align="center">出现，浮现</td><td align="center">emergence of new ideas (新思想的出现)</td></tr><tr><td align="center">entrenched</td><td align="center">[ɪnˈtrɛn(t)ʃt]</td><td align="center">adj.</td><td align="center">根深蒂固的</td><td align="center">entrenched beliefs (根深蒂固的信念)</td></tr><tr><td align="center">feat</td><td align="center">[fiːt]</td><td align="center">n.</td><td align="center">技艺，功绩</td><td align="center">remarkable feat (卓越的壮举)</td></tr><tr><td align="center">fragrant</td><td align="center">[ˈfreɪɡrənt]</td><td align="center">adj.</td><td align="center">芳香的</td><td align="center">fragrant flowers (芬芳的花朵)</td></tr><tr><td align="center">grain</td><td align="center">[ɡreɪn]</td><td align="center">n.</td><td align="center">谷物</td><td align="center">wheat grain (小麦谷粒)</td></tr><tr><td align="center">grudge</td><td align="center">[ɡrʌdʒ]</td><td align="center">n.</td><td align="center">怨恨</td><td align="center">hold a grudge (怀恨在心)</td></tr><tr><td align="center">gull</td><td align="center">[ɡʌl]</td><td align="center">n.</td><td align="center">鸥鸟</td><td align="center">seagull (海鸥)</td></tr><tr><td align="center">henceforth</td><td align="center">[ˌhensˈfɔːrθ]</td><td align="center">adv.</td><td align="center">从此以后</td><td align="center">henceforth, I will be more careful (从此以后，我会更加小心)</td></tr><tr><td align="center">hierarchy</td><td align="center">[ˈhaɪərɑːrki]</td><td align="center">n.</td><td align="center">等级制度</td><td align="center">social hierarchy (社会等级制度)</td></tr><tr><td align="center">hostile</td><td align="center">[ˈhɑːstaɪl]</td><td align="center">adj.</td><td align="center">敌对的</td><td align="center">hostile environment (敌对的环境)</td></tr><tr><td align="center">jaw</td><td align="center">[dʒɔː]</td><td align="center">n.</td><td align="center">颚</td><td align="center">lower jaw (下颚)</td></tr><tr><td align="center">legislation</td><td align="center">[ˌlɛdʒɪsˈleɪʃən]</td><td align="center">n.</td><td align="center">立法</td><td align="center">pass legislation (通过立法)</td></tr><tr><td align="center">locomotive</td><td align="center">[ˌloʊkəˈmoʊtɪv]</td><td align="center">n.</td><td align="center">机车</td><td align="center">steam locomotive (蒸汽机车)</td></tr><tr><td align="center">lubricant</td><td align="center">[ˈluːbrɪkənt]</td><td align="center">n.</td><td align="center">润滑剂</td><td align="center">apply lubricant (涂抹润滑剂)</td></tr><tr><td align="center">mediate</td><td align="center">[ˈmiːdiˌeɪt]</td><td align="center">v.</td><td align="center">调解，斡旋</td><td align="center">mediate a dispute (调解争端)</td></tr><tr><td align="center">patronage</td><td align="center">[ˈpeɪtrənɪdʒ]</td><td align="center">n.</td><td align="center">赞助</td><td align="center">artistic patronage (艺术赞助)</td></tr><tr><td align="center">reciprocity</td><td align="center">[ˌresɪˈprɒsəti]</td><td align="center">n.</td><td align="center">相互性，互惠</td><td align="center">reciprocity agreement (互惠协议) / reciprocity principle（互惠原则）</td></tr><tr><td align="center">rigor(rigour)</td><td align="center">[ˈrɪɡər]</td><td align="center">n.</td><td align="center">严格</td><td align="center">be treated with the full rigour of the law（严格依法审）</td></tr><tr><td align="center">sew</td><td align="center">[soʊ]</td><td align="center">v.</td><td align="center">缝纫</td><td align="center">to knit and sew（缝缝织织）</td></tr><tr><td align="center">spawn</td><td align="center">[spɔːn]</td><td align="center">v.</td><td align="center">产卵，孵化</td><td align="center">spawn new ideas (孕育新的思想)</td></tr><tr><td align="center">squabble</td><td align="center">[ˈskwɑːbl]</td><td align="center">v.</td><td align="center">争吵</td><td align="center">Don’t squabble over trifles（不要为小事吵起来）</td></tr><tr><td align="center">subversive</td><td align="center">[səbˈvɜːrsɪv]</td><td align="center">adj.</td><td align="center">颠覆性的</td><td align="center">subversive activities (颠覆性活动)</td></tr><tr><td align="center">symmetry</td><td align="center">[ˈsɪmətri]</td><td align="center">n.</td><td align="center">对称</td><td align="center">symmetrical shape (对称的形状)</td></tr><tr><td align="center">unify</td><td align="center">[ˈjuːnɪfaɪ]</td><td align="center">v.</td><td align="center">统一</td><td align="center">unify the country (统一国家)</td></tr></tbody></table><h2 id="Reference-📚"><a href="#Reference-📚" class="headerlink" title="Reference 📚"></a>Reference 📚</h2><ul><li>《TOEFL词汇（45天突破版）》</li><li><a href="https://openai.com/blog/chatgpt">https://openai.com/blog/chatgpt</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> TOEFL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TOEFL </tag>
            
            <tag> Vocabulary </tag>
            
            <tag> English </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TOEFL｜Word List 32</title>
      <link href="/2023/06/22/toefl-word-list32/"/>
      <url>/2023/06/22/toefl-word-list32/</url>
      
        <content type="html"><![CDATA[<h1 id="TOEFL-Vocabulary-feat-ChatGPT"><a href="#TOEFL-Vocabulary-feat-ChatGPT" class="headerlink" title="TOEFL Vocabulary (feat.ChatGPT)"></a>TOEFL Vocabulary (feat.ChatGPT)</h1><h2 id="Word-List-32-🚀"><a href="#Word-List-32-🚀" class="headerlink" title="Word List 32 🚀"></a>Word List 32 🚀</h2><table><thead><tr><th align="center">单词</th><th align="center">音标</th><th align="center">词性</th><th align="center">中文含义</th><th align="center">短语搭配</th></tr></thead><tbody><tr><td align="center">abolition</td><td align="center">[ˌæbəˈlɪʃən]</td><td align="center">n.</td><td align="center">废除</td><td align="center">abolition of slavery (废除奴隶制度)</td></tr><tr><td align="center">accordion</td><td align="center">[əˈkɔrdiən]</td><td align="center">n.</td><td align="center">手风琴</td><td align="center">accordion music (手风琴音乐)</td></tr><tr><td align="center">aria</td><td align="center">[ˈɑːriə]</td><td align="center">n.</td><td align="center">咏叹调</td><td align="center">opera aria (歌剧咏叹调)</td></tr><tr><td align="center">bagel</td><td align="center">[ˈbeɪɡəl]</td><td align="center">n.</td><td align="center">百吉饼</td><td align="center">a bagel shop (百吉饼商店)</td></tr><tr><td align="center">barber</td><td align="center">[ˈbɑːrbər]</td><td align="center">n.</td><td align="center">理发师</td><td align="center">barber shop (理发店)</td></tr><tr><td align="center">circumference</td><td align="center">[sərˈkʌmfərəns]</td><td align="center">n.</td><td align="center">周长</td><td align="center">circle circumference (圆的周长)</td></tr><tr><td align="center">civil</td><td align="center">[ˈsɪvl]</td><td align="center">adj.</td><td align="center">公民的</td><td align="center">civil rights (公民权利)</td></tr><tr><td align="center">coalition</td><td align="center">[ˌkoʊəˈlɪʃən]</td><td align="center">n.</td><td align="center">联盟</td><td align="center">political coalition (政治联盟)</td></tr><tr><td align="center">competing</td><td align="center">[kəmˈpiːtɪŋ]</td><td align="center">adj.</td><td align="center">竞争的</td><td align="center">competing product（有竞争力的产品）</td></tr><tr><td align="center">confine</td><td align="center">[kənˈfaɪn]</td><td align="center">v.</td><td align="center">限制</td><td align="center">confine to a room (限制在房间内)</td></tr><tr><td align="center">contamination</td><td align="center">[kənˌtæmɪˈneɪʃən]</td><td align="center">n.</td><td align="center">污染</td><td align="center">water contamination (水污染)</td></tr><tr><td align="center">comtemporary</td><td align="center">[kənˈtɛmpəˌrɛri]</td><td align="center">adj.</td><td align="center">当代的</td><td align="center">comtemporary art (当代艺术)</td></tr><tr><td align="center">deceptive</td><td align="center">[dɪˈsɛptɪv]</td><td align="center">adj.</td><td align="center">欺骗的</td><td align="center">deceptive advertising (欺骗性广告)</td></tr><tr><td align="center">drainage</td><td align="center">[ˈdreɪnɪdʒ]</td><td align="center">n.</td><td align="center">排水系统</td><td align="center">drainage pipe (排水管道)</td></tr><tr><td align="center">dull</td><td align="center">[dʌl]</td><td align="center">adj.</td><td align="center">单调的</td><td align="center">Life in a small town could be deadly dull（小城镇的生活可能会非常没意思）</td></tr><tr><td align="center">envision</td><td align="center">[ɪnˈvɪʒən]</td><td align="center">v.</td><td align="center">想象，展望</td><td align="center">envision the future (展望未来)</td></tr><tr><td align="center">factual</td><td align="center">[ˈfæktʃuəl]</td><td align="center">adj.</td><td align="center">事实的</td><td align="center">factual evidence/errors (事实证据/错误)</td></tr><tr><td align="center">fatigue</td><td align="center">[fəˈtiːɡ]</td><td align="center">n.</td><td align="center">疲劳，疲乏</td><td align="center">physical fatigue (身体疲劳)</td></tr><tr><td align="center">flavoring</td><td align="center">[ˈfleɪvərɪŋ]</td><td align="center">n.</td><td align="center">调味品</td><td align="center">food flavoring (食品调味品)</td></tr><tr><td align="center">homestead</td><td align="center">[ˈhoʊmstɛd]</td><td align="center">n.</td><td align="center">家园，农场</td><td align="center">homestead farming (家庭农场)</td></tr><tr><td align="center">hospitable</td><td align="center">[hɑːˈspɪtəbl]</td><td align="center">adj.</td><td align="center">适宜的/好客的</td><td align="center">hospitable environment (宜人的环境) / The locals are hospitable and welcoming（当地人热情好客）</td></tr><tr><td align="center">imperative</td><td align="center">[ɪmˈpɛrətɪv]</td><td align="center">adj.</td><td align="center">迫切的</td><td align="center">an imperative task (紧急的任务)</td></tr><tr><td align="center">initiate</td><td align="center">[ɪˈnɪʃieɪt]</td><td align="center">v.</td><td align="center">开始，创始</td><td align="center">initiate a project (开始一个项目)</td></tr><tr><td align="center">intelligent</td><td align="center">[ɪnˈtɛlədʒənt]</td><td align="center">adj.</td><td align="center">聪明的</td><td align="center">intelligent decision (聪明的决定)</td></tr><tr><td align="center">jar</td><td align="center">[dʒɑːr]</td><td align="center">n.</td><td align="center">罐子</td><td align="center">glass jar (玻璃罐)</td></tr><tr><td align="center">labyrinth</td><td align="center">[ˈlæbərɪnθ]</td><td align="center">n.</td><td align="center">迷宫，曲径</td><td align="center">maze labyrinth (迷宫)</td></tr><tr><td align="center">marsh</td><td align="center">[mɑːrʃ]</td><td align="center">n.</td><td align="center">沼泽地</td><td align="center">marsh ecosystem (湿地生态系统)</td></tr><tr><td align="center">medication</td><td align="center">[mɛdɪˈkeɪʃən]</td><td align="center">n.</td><td align="center">药物治疗</td><td align="center">allergy medication (过敏药物)</td></tr><tr><td align="center">motif</td><td align="center">[moʊˈtiːf]</td><td align="center">n.</td><td align="center">主题，动机</td><td align="center">floral motif (花卉主题)</td></tr><tr><td align="center">multitude</td><td align="center">[ˈmʌltɪˌtud]</td><td align="center">n.</td><td align="center">大量</td><td align="center">a multitude of options (大量的选择)</td></tr><tr><td align="center">mundane</td><td align="center">[ˈmʌndeɪn]</td><td align="center">adj.</td><td align="center">平凡的，乏味的</td><td align="center">a mundane task/job（平凡的任务/职业）</td></tr><tr><td align="center">myriad</td><td align="center">[ˈmɪriəd]</td><td align="center">n.</td><td align="center">无数，大量</td><td align="center">a myriad of possibilities (无数的可能性)</td></tr><tr><td align="center">nectar</td><td align="center">[ˈnɛktər]</td><td align="center">n.</td><td align="center">花蜜</td><td align="center">sweet nectar (甜蜜花蜜)</td></tr><tr><td align="center">olfactory</td><td align="center">[oʊlˈfæktəri]</td><td align="center">adj.</td><td align="center">嗅觉的</td><td align="center">olfactory senses (嗅觉感知) / olfactory cells/nerves/organs（嗅觉细胞/神经/器官）</td></tr><tr><td align="center">pesticide</td><td align="center">[ˈpɛstɪsaɪd]</td><td align="center">n.</td><td align="center">杀虫剂</td><td align="center">organic pesticide (有机杀虫剂)</td></tr><tr><td align="center">plight</td><td align="center">[plaɪt]</td><td align="center">n.</td><td align="center">困境</td><td align="center">plight of refugees (难民困境)</td></tr><tr><td align="center">potassium</td><td align="center">[pəˈtæsiəm]</td><td align="center">n.</td><td align="center">钾元素</td><td align="center">potassium levels (钾离子水平)</td></tr><tr><td align="center">refined</td><td align="center">[rɪˈfaɪnd]</td><td align="center">adj.</td><td align="center">精细的</td><td align="center">refined taste (高雅的品味)</td></tr><tr><td align="center">revitalize</td><td align="center">[riːˈvaɪtəlaɪz]</td><td align="center">v.</td><td align="center">使恢复生机</td><td align="center">revitalize the economy (使经济恢复生机)</td></tr><tr><td align="center">roe</td><td align="center">[roʊ]</td><td align="center">n.</td><td align="center">鱼籽</td><td align="center">salmon roe (鲑鱼籽)</td></tr><tr><td align="center">sequoia</td><td align="center">[sɪˈkɔɪə]</td><td align="center">n.</td><td align="center">红杉树</td><td align="center">giant sequoia (巨杉树)</td></tr><tr><td align="center">submerge</td><td align="center">[səbˈmɜːrdʒ]</td><td align="center">v.</td><td align="center">淹没</td><td align="center">submerge in water (淹没在水中)</td></tr><tr><td align="center">subsistence</td><td align="center">[səbˈsɪstəns]</td><td align="center">n.</td><td align="center">维持生计</td><td align="center">to live below (the) subsistence level（生活在基本生活水平线以下） / subsistence farming (自给自足的农业)</td></tr><tr><td align="center">summit</td><td align="center">[ˈsʌmɪt]</td><td align="center">n.</td><td align="center">顶峰</td><td align="center">reach the summit (到达顶峰) / a summit conference（峰会）</td></tr><tr><td align="center">tarnish</td><td align="center">[ˈtɑːrnɪʃ]</td><td align="center">v.</td><td align="center">（使）失去光泽，暗淡/玷污</td><td align="center">tarnish reputation (玷污声誉)</td></tr><tr><td align="center">telegraph</td><td align="center">[ˈtɛləˌɡræf]</td><td align="center">n.</td><td align="center">电报</td><td align="center">send a telegraph (发送电报)</td></tr><tr><td align="center">tempt</td><td align="center">[tɛmpt]</td><td align="center">v.</td><td align="center">引诱，诱惑</td><td align="center">resist temptation (抵抗诱惑)</td></tr></tbody></table><h2 id="Reference-📚"><a href="#Reference-📚" class="headerlink" title="Reference 📚"></a>Reference 📚</h2><ul><li>《TOEFL词汇（45天突破版）》</li><li><a href="https://openai.com/blog/chatgpt">https://openai.com/blog/chatgpt</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> TOEFL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TOEFL </tag>
            
            <tag> Vocabulary </tag>
            
            <tag> English </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TOEFL｜Listening - TPO53</title>
      <link href="/2023/06/22/toefl-tpo53-listening/"/>
      <url>/2023/06/22/toefl-tpo53-listening/</url>
      
        <content type="html"><![CDATA[<h1 id="TOEFL｜Listening-TPO53"><a href="#TOEFL｜Listening-TPO53" class="headerlink" title="TOEFL｜Listening TPO53"></a>TOEFL｜Listening TPO53</h1><h2 id="模考信息-☘️"><a href="#模考信息-☘️" class="headerlink" title="模考信息 ☘️"></a>模考信息 ☘️</h2><blockquote><p>测试日期：2023.6.22</p><p>答对题数：22/28</p><p>模考分数：25/30</p></blockquote><h2 id="Set1-🍊"><a href="#Set1-🍊" class="headerlink" title="Set1 🍊"></a>Set1 🍊</h2><blockquote><p>测试日期：2023.6.22</p><p>得分情况：5/6</p><p>真题主页：<a href="https://toefl.kmf.com/listen/ets/new-order/0">https://toefl.kmf.com/listen/ets/new-order/0</a></p><p>模拟练习：<a href="https://toefl.kmf.com/listening/pre?id=21mb3j">https://toefl.kmf.com/listening/pre?id=21mb3j</a></p><p>题目分析：<a href="http://top.zhan.com/toefl/listen/review-1347-13.html?article_id=1347">http://top.zhan.com/toefl/listen/review-1347-13.html?article_id=1347</a></p><p>精听链接：<a href="https://toefl.kmf.com/listening/newdrilling/21mb3j">https://toefl.kmf.com/listening/newdrilling/21mb3j</a></p></blockquote><p>&lt;-NARRATOR: -&gt; Listen to a conversation between a student and his drama professor.</p><p>&lt;-FEMALE PROFESSOR:-&gt; Hi, Robert. So how’s your paper going?</p><p>&lt;-MALE STUDENT:-&gt; Pretty well. It’s a lot of work, but I’m getting into it, so I don’t mind. I’ll probably have some questions for you in the next week or so.</p><p>&lt;-FEMALE PROFESSOR:-&gt; OK, glad to hear you’re <strong>progressing</strong> so well.</p><p>&lt;-MALE STUDENT:-&gt; Um, there was something you said at the end of the lecture on Tuesday, something about there not really being any original plays…</p><p>&lt;-FEMALE PROFESSOR:-&gt; “There’s no such thing as an original play.” Yes, that’s the direct quote from Charles Mee.</p><p>&lt;-MALE STUDENT:-&gt; Mee. That’s with two E’s, right?</p><p>&lt;-FEMALE PROFESSOR:-&gt; Yep, M-E-E. You’ll probably be hearing a lot about him. He’s becoming a pretty famous <strong>playwright</strong>.</p><p>&lt;-MALE STUDENT:-&gt; Yeah, well, I’ve been thinking about his quote… I mean, there must be some original plays out there.</p><p>&lt;-FEMALE PROFESSOR:-&gt; I’ll grant that he’s overstating things <strong>somewhat</strong>. But the theater does have a long tradition of borrowing. Take Shakespeare; like most writers of his day, he borrowed plots from other sources <strong>unabashedly</strong>. And the ancient Greeks, all the plays they wrote were based on earlier plays, poems, and myths.</p><p>&lt;-MALE STUDENT:-&gt; And “borrowing” applies to plays being written nowadays, too?</p><p>&lt;-FEMALE PROFESSOR:-&gt; To some extent, yes. Mee, for example, he’s made a career out of remaking plays, one of which we’ll be studying soon.It’s called “Full Circle.” And Mee based it on an earlier play by a German playwright.</p><p>&lt;-MALE STUDENT:-&gt; Ohhh… “Full Circle.” Wasn’t that based on “The Caucasian Chalk Circle?”</p><p>&lt;-FEMALE PROFESSOR:-&gt; That’s right.</p><p>&lt;-MALE STUDENT:-&gt; I remember hearing about that play from my acting coach.</p><p>&lt;-FEMALE PROFESSOR:-&gt; Okay. Well, “The Caucasian Chalk Circle” was based on a play by yet another German playwright, someone who was fascinated by the ancient literatures of China, India, and Persia. And many of his works were adapted from those literatures, including his version of “The Chalk Circle,” which was based on an early Chinese play.</p><p>&lt;-MALE STUDENT:-&gt; So this “Full Circle” play by Charles Mee, the one we’re gonna study, it’s like the third or fourth remake.Wow! And we complain that Hollywood keeps making the same movies over and over again!</p><p>&lt;-FEMALE PROFESSOR:-&gt; Well, part of what Mee’s trying to do is drive home the point, that, one, theater’s always a collaborative effort…</p><p>&lt;-MALE STUDENT:-&gt; Well, yeah, the playwright, the director, the actors, people have to work together to produce a play.</p><p>&lt;-FEMALE PROFESSOR:-&gt; Yes, of course, but Mee means historically; the dramatic literature of early periods is hugely influential in shaping later dramatic works.</p><p>&lt;-MALE STUDENT:-&gt; So it’s like when a playwright bases a play on a previous playwright’s theme or message. It’s like they’re talking to each other, collaborating, uh, just not at the same time, right?</p><p>&lt;-FEMALE PROFESSOR:-&gt; Exactly. And the second point Mee’s trying to make, I think, is that it’s legitimate to retell an old story in a new way… in a way that’s, uh, <strong>more in line with contemporary concerns</strong>. So, when playwrights reinvent or update an earlier play, it shouldn’t be construed as a lack of imagination or an artistic failure.</p><hr><h2 id="Set2-🍉"><a href="#Set2-🍉" class="headerlink" title="Set2 🍉"></a>Set2 🍉</h2><blockquote><p>测试日期：2023.6.22</p><p>得分情况：5/6</p><p>真题主页：<a href="https://toefl.kmf.com/listen/ets/new-order/0">https://toefl.kmf.com/listen/ets/new-order/0</a></p><p>模拟练习：<a href="https://toefl.kmf.com/listening/pre?id=81mb9j">https://toefl.kmf.com/listening/pre?id=81mb9j</a></p><p>题目分析：<a href="http://top.zhan.com/toefl/listen/review-1352-13.html?article_id=1352">http://top.zhan.com/toefl/listen/review-1352-13.html?article_id=1352</a></p><p>精听链接：<a href="https://toefl.kmf.com/listening/newdrilling/81mb9j">https://toefl.kmf.com/listening/newdrilling/81mb9j</a></p></blockquote><p>&lt;-NARRATOR:-&gt;&nbsp;Listen to part of a lecture in a world history class.</p><p>&lt;-FEMALE PROFESSOR:-&gt; Now, <strong>according to Chinese legend</strong>, the first person to drink tea was a Chinese emperor who lived nearly 5,000 years ago.This emperor was… oh, you could call him an amateur scientist. And he wisely required all drinking water to be boiled, for <strong>hygiene</strong>.</p><p>So, once, uh, when visiting some distant part of his empire, he noticed that a breeze had blown some leaves into his pot of boiling water.And these leaves turned the water kind of brown.So… well, would it be your <strong>first impulse</strong> to drink this? Probably not.</p><p>But he thought <strong>the resulting brew</strong> smelled pretty good, and in the name of science and discovery, he tasted it, and the practice of drinking tea was born.Uh, well, a good story. But actually we cannot say with any certainty just who first discovered how to make tea.</p><p>We can be confident, though, that the Chinese have been using it in some form for close to 5,000 years. And, from those earliest times, more and more tea was cultivated to meet the growing demand, and tea became an important part of the economy of China.</p><p>In fact, it was formed into sort of bricks and used as a common type of currency for trade. But its effect on Chinese culture was even more profound.Tea became extremely popular in China, and scholars even wrote works discussing how to grow tea, prepare it, drink it… really <strong>championing</strong> tea… one of them saying it was like “<strong>the sweetest dew of heaven</strong>.” Now, recommendations like this could only add to its huge popularity there.</p><p>But tea was also spreading throughout Asia. In Japan, perhaps even more than in China, tea became a major cultural symbol—<strong>and one of refinement, of etiquette, and aesthetics</strong>. Uh, well, best seen in the traditional Japanese tea ceremony, which is still performed today. This is an intricate formal ritual, a ceremony that can take hours to complete.Clearly, tea became not just a beverage in Japanese culture—but much, much more.</p><p>Tea eventually got to western Europe after European traders, uh, mainly Portuguese and Dutch, brought the first small commercial shipment of tea back to Europe. Unfortunately, it was mostly just treated as a curiosity, since no one knew quite how it was supposed to be used. A few has some pretty strong opinions, though. One German doctor wrote a book saying tea was harmful, actually poisonous. But at about the same time, another doctor, uh, from Holland, wrote another book calling tea a miracle cure for just about everything.Who to believe? So, anyway, tea didn’t really catch on in Germany or France, as something just to enjoy drinking, they seemed to prefer coffee.</p><p>But England did take to tea, and to an extent that nobody could have foreseen… such that, even today we tend to associate England, uh, Great Britain with tea. And, uh, well, a bit of perspective, at the start of the eighteenth century, almost nobody in England drank tea; but by the end of it, almost everybody did. By the 1750s, official records show tea imports up from almost nothing to about 20 million kilos. And those records didn’t even begin to account for all the tea <strong>smuggled</strong> into the country illegally, to avoid paying taxes.</p><p>And as for reasons for the popularity of tea there … well, tea first became fashionable after the King of England married a Portuguese princess who loved tea, and pretty soon more and more people started copying her and drinking tea. Later, when a direct trade route was established between China and England, the supply of tea greatly increased.</p><p>Most important, though, tea drinking became sociable. And, uh, although <strong>coffee houses</strong> or <strong>taverns</strong> were generally considered to be for men only, tea shops became places where women could come and even bring their families. And soon there were tea parties, uh, books on <strong>tea etiquette</strong> and even tea gardens, parks filled with lights, and walkways, and, and <strong>venues</strong> for musical performances, places where people of all social classes could go to drink tea and socialize. By the end of the eighteenth century, all classes of English society drank tea, from royalty to common workers. <strong>Tea became a staple of everyday life</strong>, part of the common culture and, uh, traditionally considered by many… the very mark of being English.</p><hr><h2 id="Set4-🍒"><a href="#Set4-🍒" class="headerlink" title="Set4 🍒"></a>Set4 🍒</h2><blockquote><p>测试日期：2023.6.22</p><p>得分情况：4/5</p><p>真题主页：<a href="https://toefl.kmf.com/listen/ets/new-order/0">https://toefl.kmf.com/listen/ets/new-order/0</a></p><p>模拟练习：<a href="https://toefl.kmf.com/listening/pre?id=b1mbmj">https://toefl.kmf.com/listening/pre?id=b1mbmj</a></p><p>题目分析：<a href="http://top.zhan.com/toefl/listen/review-1352-13.html?article_id=1352">http://top.zhan.com/toefl/listen/review-1352-13.html?article_id=1352</a></p><p>精听链接：<a href="https://toefl.kmf.com/listening/newdrilling/b1mbmj">https://toefl.kmf.com/listening/newdrilling/b1mbmj</a></p></blockquote><p>&lt;-NARRATOR: -&gt; Listen to a conversation between a student and the cafeteria manager.</p><p>&lt;-MALE MANAGER:-&gt; Oh, hi, uh, you’re Amy, right?</p><p>&lt;-FEMALE STUDENT:-&gt; Yes.</p><p>&lt;-MALE MANAGER:-&gt; I haven’t seen you here for a while. Welcome back.</p><p>&lt;-FEMALE STUDENT:-&gt; Thanks, er, you’re right, I haven’t been eating here regularly like I used to.</p><p>&lt;-MALE MANAGER:-&gt; Why not?</p><p>&lt;-FEMALE STUDENT:-&gt; Couple of reasons. First of all, I have a class that ends during lunchtime. So, by the time I get here, there’s hardly any food left.</p><p>&lt;-MALE MANAGER:-&gt; Really?</p><p>&lt;-FEMALE STUDENT:-&gt; Yeah. And then, I have chemistry lab at night this semester. It’s two hours every Tuesday and Thursday. Y’know, that building’s way across campus. So I just eat something in my dorm before I leave, or skip dinner <strong>altogether</strong>. I come here afterward, but lab lets out at seven-thirty and…by then the cafeteria’s already closed.</p><p>&lt;-MALE MANAGER:-&gt; Oh, I’m really sorry. Well, what about getting something to go and eating it in class?</p><p>&lt;-FEMALE STUDENT:-&gt; I can’t. Food isn’t permitted anywhere near the laboratories. I wish you stayed open later.</p><p>&lt;-MALE MANAGER:-&gt; Have you complained formally? We’ve always had a suggestion box. And now, you can send us an e-mail.</p><p>&lt;-FEMALE STUDENT:-&gt; As a matter of fact, I did <strong>fill out a suggestion card</strong>. I asked for longer hours and for better food choices, too. But that was like weeks ago. And nothing’s changed from what I can see.</p><p>&lt;-MALE MANAGER:-&gt; You know, I was just <strong>promoted</strong> to cafeteria manager, and one of the things I’m trying to do is pay more attention to students’ concerns. There have been a lot of complaints similar to yours over the years.</p><p>&lt;-FEMALE STUDENT:-&gt; Yeah. A lot of my friends complain about the cafeteria, but we figure nothing will ever be done.</p><p>&lt;-MALE MANAGER:-&gt; Well, some things can change. For instance, you mentioned you’d like better food choices.Is there anything in particular you’d like added to our menu?</p><p>&lt;-FEMALE STUDENT:-&gt;Hmm, I guess it’d be nice to get hot cereal in the morning, and maybe a wider choice of soups and salads at lunch and dinner. And, there should definitely be enough food to feed everyone whenever the cafeteria’s open.</p><p>&lt;-MALE MANAGER:-&gt; Hmmm. All good suggestions. Say, <strong>were you aware</strong> that the university has recently formed a food advisory committee?It includes myself, a nutritionist, the school chef, a food-science professor, and the person who oversees the cafeteria budget.</p><p>&lt;-FEMALE STUDENT:-&gt; Do you want me to talk to the committee?</p><p>&lt;-MALE MANAGER:-&gt; I was thinking you might like to <strong>serve on</strong> the committee. If you’re interested, I’ll recommend you as the student representative.</p><p>&lt;-FEMALE STUDENT:-&gt; Ohhhh, I’m not so sure if I have enough spare time to get that involved.</p><p>&lt;-MALE MANAGER:-&gt; OK, then, why don’t I let you know when and where our next meeting is, and we’ll put you on the agenda? You may also want to send me an e-mail with all of your suggestions. Now that I’m in charge, I’ll make sure they’ll get serious consideration.</p><p>&lt;-FEMALE STUDENT:-&gt; I’d appreciate that. Thanks!</p><hr><h2 id="Set5-🍓"><a href="#Set5-🍓" class="headerlink" title="Set5 🍓"></a>Set5 🍓</h2><blockquote><p>测试日期：2023.6.22</p><p>得分情况：5/6</p><p>真题主页：<a href="https://toefl.kmf.com/listen/ets/new-order/0">https://toefl.kmf.com/listen/ets/new-order/0</a></p><p>模拟练习：<a href="https://toefl.kmf.com/listening/pre?id=c1mbsj">https://toefl.kmf.com/listening/pre?id=c1mbsj</a></p><p>题目分析：<a href="http://top.zhan.com/toefl/listen/review-1350-13-112128.html">http://top.zhan.com/toefl/listen/review-1350-13-112128.html</a></p><p>精听链接：<a href="https://toefl.kmf.com/listening/newdrilling/c1mbsj">https://toefl.kmf.com/listening/newdrilling/c1mbsj</a></p></blockquote><p>&lt;-NARRATOR: -&gt;Listen to part of a lecture in an environmental science class.</p><p>&lt;-FEMALE PROFESSOR:-&gt; The Chesapeake Bay, on the east coast of the United States, is huge—<strong>the largest estuary in the U.S</strong>.—and it’s very important to local economies. But, like many of the world’s waterways, the Chesapeake is being polluted; and efforts to stop that from happening have not been entirely successful.</p><p>And that’s partly because of the type of pollution affecting the Chesapeake… which may not be what you might predict. Uh, first let’s mention that the sources of pollution are of two general types. And let’s begin with what’s known as “point source pollution” .</p><p>Point source pollution has an identifiable source, and you can find the specific point where, say, <strong>one particular pipe is dumping pollutants into the bay</strong>—and then treat the water right there where the pollution’s coming from. And that’s what’s happened over the past 30 years or so. Modifications have been made at factories and <strong>sewage treatment plants</strong> to treat polluted water before it’s released into public waterways.But there’s also something we call “non-point source pollution.”</p><p>Nowadays, the most serious pollution threat doesn’t come from any particular source, like a factory or sewage treatment plant, but originates from many sources over a large area.And this non-point source pollution is a challenge to deal with, because it doesn’t just enter the bay through one pipe—you can’t identify precisely where it’s coming from.</p><p>And to be specific, the biggest problem now facing the Chesapeake Bay is due not to toxins, but to nutrients contained in chemical fertilizers used on farms all over the region.These nutrients—like <strong>phosphorus</strong> and especially nitrogen—wash away in what we call agricultural runoff. That’s when water from a hard rain or from melting snow carries these chemicals down to streams and into the bay, and there <strong>they stimulate the explosive growth of algae</strong>. And that uses up much of the oxygen in the water, oxygen that fish and other <strong>aquatic organisms</strong> need to stay alive.</p><p>So, since there’s no single place you can treat the runoff before it reaches the bay, any efforts to reduce this non-point source pollution generally need to be aimed at keeping pollution out of the streams in the first place.</p><p>But before we go into that, let’s look at the role of nitrogen fertilizer in modern farming. Until about 60 years ago, before a great increase in industrialization, this wasn’t a problem. In the past, farmers used natural fertilizers and <strong>rotated crops</strong> so that, in addition to commercial food crops, like corn and wheat, they might plant <strong>legumes</strong>, like alfalfa and clover, for animal feed. But these legumes also enriched the soil—<strong>by converting nitrogen in the atmosphere into nitrates</strong>—a form of nitrogen the crops like wheat or corn could use as a nutrient. And, these and other “cover crops,” planted to hold the soil after the wheat or corn was harvested—<strong>they stored much of the surplus nitrogen</strong> during the time of the year when the runoff tended to be greatest.</p><p>But farming practices changed as farmers came under pressure to use more and more chemical fertilizer in order to increase crop production on the same amount of land. But more isn’t always better, at least in terms of chemical fertilizer in the environment. And, along the way, farmers switched from legumes…to animal feeds more suited to intensive, large-scale animal production. And the excess nitrogen, once trapped by these cover crops, either washed away in the next big rain or went down into the groundwater and, either way, eventually ended up in the streams and the bay. And that, as we said, means more algae in the water and less oxygen for the fish and other aquatic life to breathe.</p><p>So what’s being done? Well, two things. First, after the main crops are harvested, more farmers are planting cover crops again—other kinds, like <strong>rye and barley</strong>—that hold the nitrogen and keep it from washing out of the soil during the months when that’s most likely to occur.</p><p>And the second strategy is to plant “buffer zones” at the edges of streams—not crops, but natural areas…trees. The roots of these trees can absorb the excess nitrogen in the runoff before it reaches the streams. Farmers sometimes <strong>object to</strong> letting trees grow on land where they might otherwise be cultivating crops. But there’s a government program that compensates them, that pays them for creating these buffer zones between their fields and the streams that eventually feed into bays like the Chesapeake. And it’s beginning to show some success.</p><hr><h2 id="Set6-🍇"><a href="#Set6-🍇" class="headerlink" title="Set6 🍇"></a>Set6 🍇</h2><blockquote><p>测试日期：2023.6.22</p><p>得分情况：5/6</p><p>真题主页：<a href="https://toefl.kmf.com/listen/ets/new-order/0">https://toefl.kmf.com/listen/ets/new-order/0</a></p><p>模拟练习：<a href="https://toefl.kmf.com/listening/pre?id=31mbzj">https://toefl.kmf.com/listening/pre?id=31mbzj</a></p><p>题目分析：<a href="http://top.zhan.com/toefl/listen/review-1353-13.html?article_id=1353">http://top.zhan.com/toefl/listen/review-1353-13.html?article_id=1353</a></p><p>精听链接：<a href="https://toefl.kmf.com/listening/newdrilling/31mbzj">https://toefl.kmf.com/listening/newdrilling/31mbzj</a></p></blockquote><p>&lt;-NARRATOR: -&gt;Listen to part of a lecture in an astronomy class.</p><p>&lt;-MALE PROFESSOR:-&gt; <strong>Saturn’s rings have always baffled astronomers</strong>. Until about 30 years ago, we thought <strong>the rings were composed of particles of ice and rock</strong> that were left over from Saturn’s formation—extra material that never managed to form, uh, <strong>coalesce into a moon</strong>. As you know, it’s believed that <strong>Saturn, and all the planets in our solar system coalesced from a swirling cloud of gas</strong> some 4.8 billion years ago. However, if the rings are made of leftovers from that process, then they’d also be about 4.8 billion years old. The problem is that anything gathering space dust for that long would certainly have darkened by now. But Saturn’s rings—most of them, anyway—are <strong>pristine</strong>…so bright and shiny that they make Saturn the jewel of the solar system.</p><p>So the hypothesis that the rings are just made of material left over from the time of planetary formation—that hypothesis must be wrong.Saturn’s rings are much younger than the planet itself. They may have formed only a few hundred million years ago—around the time the earliest dinosaurs lived on Earth. <strong>We realize now that the ring particles, which, uh, range in size from microscopic dust to boulders bigger than large houses</strong>. Well, a lot of these particles are eventually lost.We believe they gradually spiral down out of the rings and into the planet’s atmosphere.This occurs as a result of the planet’s gravity, and also because of the effects of its magnetic field …Now, if material from Saturn’s rings is being lost and nothing new is added from time to time, the rings would be disappearing.</p><p>But that’s not happening! So somehow, there must be new material feeding the ring system. Question is: Where’s this new material coming from? <strong>So we’re back to square one</strong>. But, instead of asking, “How did the rings form?” We should be asking… uh, anyone? Beth?</p><p>&lt;-FEMALE STUDENT:-&gt; How do the rings form?</p><p>&lt;-MALE PROFESSOR:-&gt; How do the rings form! Because they’re apparently replenishing themselves somehow.</p><p>Uh, OK, here’s one possibility—<strong>the moons, the dozens of moons that orbit Saturn are providing raw material for the rings</strong>. A moon <strong>in a system as complex as Saturn’s</strong>—and Saturn has at least 49 known moons, which vary tremendously in size and shape. Um, a moon in such a complex system is not only affected by the gravitational force of the planet, but also by that of the other moons.</p><p>&lt;-FEMALE STUDENT:-&gt; So the planet may be pulling a moon one way, and other moons may be pulling it…other ways?</p><p>&lt;-MALE PROFESSOR:-&gt; Exactly. <strong>Such forces could actually alter a moon’s orbit</strong>, and as a result, there might be a collision—one moon might crash into another—<strong>and the debris from that collision could become part of the rings</strong> .Then there are <strong>tidal forces</strong>. A moon might get too close to the planet and get broken apart by Saturn’s tidal forces.</p><p>&lt;-FEMALE STUDENT:-&gt; Excuse me. You mean, tidal forces, like high tide and low tide on the oceans?</p><p>&lt;-MALE PROFESSOR:-&gt; Well, by “tidal force,” I’m referring to the gravitational pull of Saturn on its moons. Um, in the mid-1800s, a French scientist named édouard Roche was studying the effects of a planet’s tidal forces on its moons.</p><p>Roche was able to show mathematically that if one <strong>celestial body</strong>—say, a moon—uh, if it passes too close to another—say, a planet—that has a gravitational force stronger than the force of self-attraction that holds the moon together, well, that first body, that moon, it’d be ripped apart. We call the distance at which this happens the “<strong>Roche limit</strong>.” So if one of Saturn’s moons reaches the Roche limit of the planet or even a larger moon, it would <strong>disintegrate</strong>—be torn apart, and thus add more material to the ring system.</p><p>And there’s another way new material might be added to Saturn’s rings—an asteroid crashing into one of the moons. This hypothesis is supported by the fact that some of the many rings are a bit <strong>reddish</strong> in color. Uh, yes, George?</p><p>&lt;-MALE STUDENT:-&gt; I’m sorry. I don’t follow the logic.</p><p>&lt;-MALE PROFESSOR:-&gt; Well, <strong>this reddish coloration suggests the presence of complex organic molecules</strong>—uh, carbon-based molecules—mixed in with the water-ice. Remember, the rest of Saturn’s rings are made almost entirely of water-ice. And none of Saturn’s moons is red. But asteroids could be… and thus could end up contributing to the ring system the kind of carbon-based molecules we’re talking about.</p>]]></content>
      
      
      <categories>
          
          <category> TOEFL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TOEFL </tag>
            
            <tag> English </tag>
            
            <tag> Listening </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TOEFL｜Word List 31</title>
      <link href="/2023/06/18/toefl-word-list31/"/>
      <url>/2023/06/18/toefl-word-list31/</url>
      
        <content type="html"><![CDATA[<h1 id="TOEFL-Vocabulary-feat-ChatGPT"><a href="#TOEFL-Vocabulary-feat-ChatGPT" class="headerlink" title="TOEFL Vocabulary (feat.ChatGPT)"></a>TOEFL Vocabulary (feat.ChatGPT)</h1><h2 id="Word-List-31-🚀"><a href="#Word-List-31-🚀" class="headerlink" title="Word List 31 🚀"></a>Word List 31 🚀</h2><table><thead><tr><th align="center">单词</th><th align="center">音标</th><th align="center">词性</th><th align="center">中文含义</th><th align="center">短语搭配</th></tr></thead><tbody><tr><td align="center">abreast</td><td align="center">[əˈbrɛst]</td><td align="center">adv.</td><td align="center">并列，并排地</td><td align="center">keep abreast of (跟上，紧跟) / to walk abreast（并排走）</td></tr><tr><td align="center">admission</td><td align="center">[ədˈmɪʃən]</td><td align="center">n.</td><td align="center">入场，准入</td><td align="center">admission ticket (入场券) / hospital admission（住院）</td></tr><tr><td align="center">amino</td><td align="center">[əˈmiːnoʊ]</td><td align="center">adj.</td><td align="center">氨基的</td><td align="center">amino acid (氨基酸)</td></tr><tr><td align="center">attendance</td><td align="center">[əˈtɛndəns]</td><td align="center">n.</td><td align="center">出席</td><td align="center">school attendance (学校出勤)</td></tr><tr><td align="center">barren</td><td align="center">[ˈbærən]</td><td align="center">adj.</td><td align="center">贫瘠的</td><td align="center">barren land (贫瘠的土地)</td></tr><tr><td align="center">base</td><td align="center">[beɪs]</td><td align="center">n.</td><td align="center">基础</td><td align="center">military base (军事基地)</td></tr><tr><td align="center">cavity</td><td align="center">[ˈkævəti]</td><td align="center">n.</td><td align="center">洞孔/ (牙齿的) 龋洞</td><td align="center">a cavity in the roof（屋顶的一个洞）</td></tr><tr><td align="center">circular</td><td align="center">[ˈsɜːrkjələr]</td><td align="center">adj.</td><td align="center">圆形的</td><td align="center">circular motion (圆周运动)</td></tr><tr><td align="center">condiment</td><td align="center">[ˈkɑndɪmənt]</td><td align="center">n.</td><td align="center">调味品</td><td align="center">condiment set（调味品套具）</td></tr><tr><td align="center">counseling</td><td align="center">[ˈkaʊnsəlɪŋ]</td><td align="center">n.</td><td align="center">咨询，辅导</td><td align="center">marriage counseling (婚姻咨询)</td></tr><tr><td align="center">craftsman</td><td align="center">[ˈkræftsmən]</td><td align="center">n.</td><td align="center">工匠</td><td align="center">skilled craftsman (熟练工匠)</td></tr><tr><td align="center">crude</td><td align="center">[kruːd]</td><td align="center">adj.</td><td align="center">粗糙的</td><td align="center">crude oil (原油)</td></tr><tr><td align="center">dedication</td><td align="center">[ˌdɛdɪˈkeɪʃən]</td><td align="center">n.</td><td align="center">奉献</td><td align="center">hard work and dedication（勤奋和奉献）/ book dedication (书籍献词)</td></tr><tr><td align="center">destruction</td><td align="center">[dɪˈstrʌkʃən]</td><td align="center">n.</td><td align="center">破坏</td><td align="center">destruction of property (财产破坏)</td></tr><tr><td align="center">distinct</td><td align="center">[dɪˈstɪŋkt]</td><td align="center">adj.</td><td align="center">明显的</td><td align="center">distinct difference (明显差异)</td></tr><tr><td align="center">disturbance</td><td align="center">[dɪˈstɜːrbəns]</td><td align="center">n.</td><td align="center">干扰</td><td align="center">noise disturbance (噪音干扰)</td></tr><tr><td align="center">exceptional</td><td align="center">[ɪkˈsɛpʃənl]</td><td align="center">adj.</td><td align="center">杰出的</td><td align="center">exceptional talent (杰出的才能)</td></tr><tr><td align="center">freight</td><td align="center">[freɪt]</td><td align="center">n.</td><td align="center">货物</td><td align="center">freight transportation (货运)</td></tr><tr><td align="center">gland</td><td align="center">[ɡlænd]</td><td align="center">n.</td><td align="center">腺</td><td align="center">salivary gland (唾液腺)</td></tr><tr><td align="center">idealize</td><td align="center">[aɪˈdiəˌlaɪz]</td><td align="center">v.</td><td align="center">理想化</td><td align="center">idealize a person (将人理想化)</td></tr><tr><td align="center">integrate</td><td align="center">[ˈɪntɪˌɡreɪt]</td><td align="center">v.</td><td align="center">整合</td><td align="center">integrate different cultures (整合不同文化)</td></tr><tr><td align="center">interstellar</td><td align="center">[ˌɪntərˈstɛlər]</td><td align="center">adj.</td><td align="center">星际的</td><td align="center">interstellar travel (星际旅行)</td></tr><tr><td align="center">laundry</td><td align="center">[ˈlɔndri]</td><td align="center">n.</td><td align="center">洗衣</td><td align="center">do the laundry (洗衣服)</td></tr><tr><td align="center">meteorological</td><td align="center">[ˌmitiərəˈlɑdʒɪkl]</td><td align="center">adj.</td><td align="center">气象的</td><td align="center">meteorological data (气象数据)</td></tr><tr><td align="center">pancreas</td><td align="center">[ˈpæŋkriəs]</td><td align="center">n.</td><td align="center">胰腺</td><td align="center">insulin is secreted by the pancreas（胰岛素是胰腺分泌的）</td></tr><tr><td align="center">perishable</td><td align="center">[ˈpɛrɪʃəbəl]</td><td align="center">adj.</td><td align="center">易腐烂的</td><td align="center">perishable goods/foods (易腐烂的货物/食物)</td></tr><tr><td align="center">pitch</td><td align="center">[pɪtʃ]</td><td align="center">n. / v.</td><td align="center">音调，投掷</td><td align="center">high pitch (高音调) / pitch a tent (搭帐篷)</td></tr><tr><td align="center">pliable</td><td align="center">[ˈplaɪəbəl]</td><td align="center">adj.</td><td align="center">易弯曲的/可塑的</td><td align="center">pliable material (可塑性材料)</td></tr><tr><td align="center">precede</td><td align="center">[prɪˈsid]</td><td align="center">v.</td><td align="center">在…之前</td><td align="center">precede a speech (在演讲之前)</td></tr><tr><td align="center">radius</td><td align="center">[ˈreɪdiəs]</td><td align="center">n.</td><td align="center">半径</td><td align="center">radius of a circle (圆的半径)</td></tr><tr><td align="center">remaining</td><td align="center">[rɪˈmeɪnɪŋ]</td><td align="center">adj.</td><td align="center">剩余的</td><td align="center">remaining time (剩余时间)</td></tr><tr><td align="center">repel</td><td align="center">[rɪˈpɛl]</td><td align="center">v.</td><td align="center">击退</td><td align="center">to repel an attack/invasion/invader（击退进攻/入侵/驱逐入侵者）</td></tr><tr><td align="center">rotate</td><td align="center">[roʊˈteɪt]</td><td align="center">v.</td><td align="center">旋转</td><td align="center">rotate a wheel (旋转车轮)</td></tr><tr><td align="center">signify</td><td align="center">[ˈsɪɡnɪfaɪ]</td><td align="center">v.</td><td align="center">表示，意味</td><td align="center">signify the importance of sth (表示某事的重要性)</td></tr><tr><td align="center">stir</td><td align="center">[stɜːr]</td><td align="center">v.</td><td align="center">搅拌</td><td align="center">stir the soup (搅拌汤)</td></tr><tr><td align="center">subsist</td><td align="center">[səbˈsɪst]</td><td align="center">v.</td><td align="center">存在</td><td align="center">subsist on rice (以米饭为生)</td></tr><tr><td align="center">tangle</td><td align="center">[ˈtæŋɡəl]</td><td align="center">v.</td><td align="center">缠结</td><td align="center">A tangle of wires（乱糟糟的一团电线）</td></tr><tr><td align="center">tornado</td><td align="center">[tɔrˈneɪdoʊ]</td><td align="center">n.</td><td align="center">龙卷风</td><td align="center">tornado warning (龙卷风警报)</td></tr><tr><td align="center">whereby</td><td align="center">[wɛərˈbaɪ]</td><td align="center">adv.</td><td align="center">凭借，通过</td><td align="center">whereby clause (凭借条款)</td></tr><tr><td align="center">wispy</td><td align="center">[ˈwɪspi]</td><td align="center">adj.</td><td align="center">轻飘飘的</td><td align="center">wispy clouds (轻飘飘的云)</td></tr><tr><td align="center">yarn</td><td align="center">[jɑrn]</td><td align="center">n.</td><td align="center">纱线</td><td align="center">knitting yarn (织毛线)</td></tr></tbody></table><h2 id="Reference-📚"><a href="#Reference-📚" class="headerlink" title="Reference 📚"></a>Reference 📚</h2><ul><li>《TOEFL词汇（45天突破版）》</li><li><a href="https://openai.com/blog/chatgpt">https://openai.com/blog/chatgpt</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> TOEFL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TOEFL </tag>
            
            <tag> Vocabulary </tag>
            
            <tag> English </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TOEFL｜Word List 30</title>
      <link href="/2023/06/17/toefl-word-list30/"/>
      <url>/2023/06/17/toefl-word-list30/</url>
      
        <content type="html"><![CDATA[<h1 id="TOEFL-Vocabulary-feat-ChatGPT"><a href="#TOEFL-Vocabulary-feat-ChatGPT" class="headerlink" title="TOEFL Vocabulary (feat.ChatGPT)"></a>TOEFL Vocabulary (feat.ChatGPT)</h1><h2 id="Word-List-30-🚀"><a href="#Word-List-30-🚀" class="headerlink" title="Word List 30 🚀"></a>Word List 30 🚀</h2><table><thead><tr><th align="center">单词</th><th align="center">音标</th><th align="center">词性</th><th align="center">中文含义</th><th align="center">短语搭配</th></tr></thead><tbody><tr><td align="center">aerobic</td><td align="center">[eəˈroʊbɪk]</td><td align="center">adj.</td><td align="center">有（需要）氧气的</td><td align="center">aerobic exercise (有氧运动)</td></tr><tr><td align="center">ammonia</td><td align="center">[əˈmoʊniə]</td><td align="center">n.</td><td align="center">氨</td><td align="center">ammonia gas (氨气)</td></tr><tr><td align="center">anthropology</td><td align="center">[ˌænθrəˈpɑlədʒi]</td><td align="center">n.</td><td align="center">人类学</td><td align="center">cultural anthropology (文化人类学)</td></tr><tr><td align="center">arithmetic</td><td align="center">[əˈrɪθmətɪk]</td><td align="center">n.</td><td align="center">算术</td><td align="center">learn arithmetic (学习算术)</td></tr><tr><td align="center">blip</td><td align="center">[blɪp]</td><td align="center">n.</td><td align="center">短暂的信号</td><td align="center">blip on the radar (雷达上的信号)</td></tr><tr><td align="center">brittle</td><td align="center">[ˈbrɪtəl]</td><td align="center">adj.</td><td align="center">脆弱的</td><td align="center">brittle material (脆弱材料)</td></tr><tr><td align="center">caribou</td><td align="center">[ˈkærɪbu]</td><td align="center">n.</td><td align="center">驯鹿</td><td align="center">migrate like caribou (像驯鹿一样迁徙)</td></tr><tr><td align="center">cholesterol</td><td align="center">[kəˈlɛstəˌroʊl]</td><td align="center">n.</td><td align="center">胆固醇</td><td align="center">high cholesterol (高胆固醇)</td></tr><tr><td align="center">counselor</td><td align="center">[ˈkaʊnsələr]</td><td align="center">n.</td><td align="center">顾问/辅导员</td><td align="center">counselor (辅导员)</td></tr><tr><td align="center">crystal</td><td align="center">[ˈkrɪstəl]</td><td align="center">n.</td><td align="center">水晶</td><td align="center">crystal earrings（水晶耳环）</td></tr><tr><td align="center">downward</td><td align="center">[ˈdaʊnwərd]</td><td align="center">adv.</td><td align="center">向下地</td><td align="center">move downward (向下移动)</td></tr><tr><td align="center">enclose</td><td align="center">[ɪnˈkloʊz]</td><td align="center">v.</td><td align="center">包围/随函附上</td><td align="center">enclose a letter (附上一封信)</td></tr><tr><td align="center">equator</td><td align="center">[ɪˈkweɪtər]</td><td align="center">n.</td><td align="center">赤道</td><td align="center">cross the equator (穿越赤道)</td></tr><tr><td align="center">glimpse</td><td align="center">[ɡlɪmps]</td><td align="center">n.</td><td align="center">一瞥</td><td align="center">catch a glimpse (瞥见)</td></tr><tr><td align="center">gravitational</td><td align="center">[ˌɡrævɪˈteɪʃən]</td><td align="center">adj.</td><td align="center">重力的，引力的</td><td align="center">gravitational force (重力)</td></tr><tr><td align="center">hail</td><td align="center">[heɪl]</td><td align="center">n.</td><td align="center">赞扬/冰雹</td><td align="center">hailstorm (冰雹暴)</td></tr><tr><td align="center">haven</td><td align="center">[ˈheɪvən]</td><td align="center">n.</td><td align="center">避难所</td><td align="center">safe haven (安全避难所)</td></tr><tr><td align="center">identification</td><td align="center">[aɪˌdɛntɪfɪˈkeɪʃən]</td><td align="center">n.</td><td align="center">身份识别，鉴定</td><td align="center">identification card (身份证)</td></tr><tr><td align="center">impart</td><td align="center">[ɪmˈpɑrt]</td><td align="center">v.</td><td align="center">传授</td><td align="center">impart knowledge (传授知识)</td></tr><tr><td align="center">inception</td><td align="center">[ɪnˈsɛpʃən]</td><td align="center">n.</td><td align="center">开始</td><td align="center">from inception to completion (从开始到完成)</td></tr><tr><td align="center">insanity</td><td align="center">[ɪnˈsænəti]</td><td align="center">n.</td><td align="center">精神错乱</td><td align="center">plead not guilty by reason of insanity (以精神失常为辩护)</td></tr><tr><td align="center">lengthen</td><td align="center">[ˈlɛŋθən]</td><td align="center">v.</td><td align="center">延长</td><td align="center">shadows were lengthening（影子变长）</td></tr><tr><td align="center">linguistic</td><td align="center">[lɪŋˈɡwɪstɪk]</td><td align="center">adj.</td><td align="center">语言的，语言学的</td><td align="center">linguistic diversity (语言多样性)</td></tr><tr><td align="center">lumber</td><td align="center">[ˈlʌmbər]</td><td align="center">n.</td><td align="center">木材</td><td align="center">lumber industry (木材产业)</td></tr><tr><td align="center">luminous</td><td align="center">[ˈluːmɪnəs]</td><td align="center">adj.</td><td align="center">发光的</td><td align="center">luminous stars (发光的星星)</td></tr><tr><td align="center">magnify</td><td align="center">[ˈmæɡnɪfaɪ]</td><td align="center">v.</td><td align="center">放大</td><td align="center">magnify a picture (放大一张照片)</td></tr><tr><td align="center">meridian</td><td align="center">[məˈrɪdiən]</td><td align="center">n.</td><td align="center">子午线</td><td align="center">meridian line（子午线）/ Greenwich meridian (格林威治子午线)</td></tr><tr><td align="center">outcry</td><td align="center">[ˈaʊtˌkraɪ]</td><td align="center">n.</td><td align="center">强烈抗议</td><td align="center">provoke a public outcry (引起公众强烈抗议)</td></tr><tr><td align="center">painstaking</td><td align="center">[ˈpeɪnzˌteɪkɪŋ]</td><td align="center">adj.</td><td align="center">十分小心的/ 极其仔细的</td><td align="center">a painstaking search（极其仔细的搜索）</td></tr><tr><td align="center">pronounced</td><td align="center">[prəˈnaʊnst]</td><td align="center">adj.</td><td align="center">明显的</td><td align="center">a pronounced accent (明显的口音)</td></tr><tr><td align="center">provincialism</td><td align="center">[prəˈvɪnʃəlˌɪzəm]</td><td align="center">n.</td><td align="center">地方主义，偏狭</td><td align="center">provincialism mindset (地方主义思维)</td></tr><tr><td align="center">pump</td><td align="center">[pʌmp]</td><td align="center">n.</td><td align="center">泵</td><td align="center">bicycle pump (自行车气筒)</td></tr><tr><td align="center">remainder</td><td align="center">[rɪˈmeɪndər]</td><td align="center">n.</td><td align="center">剩余</td><td align="center">the remainder of the coffee（剩余的咖啡）</td></tr><tr><td align="center">segment</td><td align="center">[ˈsɛɡmənt]</td><td align="center">n.</td><td align="center">部分</td><td align="center">market segment (市场细分)</td></tr><tr><td align="center">sprawl</td><td align="center">[sprɔl]</td><td align="center">v.</td><td align="center">蔓延，扩展</td><td align="center">urban sprawl (城市扩展)</td></tr><tr><td align="center">stadium</td><td align="center">[ˈsteɪdiəm]</td><td align="center">n.</td><td align="center">体育场</td><td align="center">football stadium (足球场)</td></tr><tr><td align="center">submarine</td><td align="center">[ˌsʌbməˈriːn]</td><td align="center">n.</td><td align="center">潜艇</td><td align="center">submarine warfare (潜艇战)</td></tr><tr><td align="center">telescope</td><td align="center">[ˈtɛləˌskoʊp]</td><td align="center">n.</td><td align="center">望远镜</td><td align="center">space telescope (空间望远镜)</td></tr><tr><td align="center">tragic</td><td align="center">[ˈtrædʒɪk]</td><td align="center">adj.</td><td align="center">悲剧</td><td align="center">tragic event (悲剧事件)</td></tr><tr><td align="center">uppermost</td><td align="center">[ˈʌpərˌmoʊst]</td><td align="center">adj.</td><td align="center">最高的</td><td align="center">uppermost floor (最高楼层)</td></tr><tr><td align="center">vascular</td><td align="center">[ˈvæskjələr]</td><td align="center">adj.</td><td align="center">血管的</td><td align="center">vascular system (血管系统)</td></tr><tr><td align="center">vegetarian</td><td align="center">[ˌvɛdʒəˈtɛriən]</td><td align="center">n.</td><td align="center">素食者</td><td align="center">vegetarian restaurant (素食餐厅)</td></tr><tr><td align="center">wit</td><td align="center">[wɪt]</td><td align="center">n.</td><td align="center">智慧</td><td align="center">to have a quick wit (才思敏捷)</td></tr><tr><td align="center">withstand</td><td align="center">[wɪðˈstænd]</td><td align="center">v.</td><td align="center">承受，经受</td><td align="center">withstand pressure (承受压力)</td></tr></tbody></table><h2 id="Reference-📚"><a href="#Reference-📚" class="headerlink" title="Reference 📚"></a>Reference 📚</h2><ul><li>《TOEFL词汇（45天突破版）》</li><li><a href="https://openai.com/blog/chatgpt">https://openai.com/blog/chatgpt</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> TOEFL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TOEFL </tag>
            
            <tag> Vocabulary </tag>
            
            <tag> English </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TOEFL｜Word List 29</title>
      <link href="/2023/06/16/toeel-word-list29/"/>
      <url>/2023/06/16/toeel-word-list29/</url>
      
        <content type="html"><![CDATA[<h1 id="TOEFL-Vocabulary-feat-ChatGPT"><a href="#TOEFL-Vocabulary-feat-ChatGPT" class="headerlink" title="TOEFL Vocabulary (feat.ChatGPT)"></a>TOEFL Vocabulary (feat.ChatGPT)</h1><h2 id="Word-List-29-🚀"><a href="#Word-List-29-🚀" class="headerlink" title="Word List 29 🚀"></a>Word List 29 🚀</h2><table><thead><tr><th align="center">单词</th><th align="center">音标</th><th align="center">词性</th><th align="center">中文含义</th><th align="center">短语搭配</th></tr></thead><tbody><tr><td align="center">agitation</td><td align="center">[ˌædʒɪˈteɪʃən]</td><td align="center">n.</td><td align="center">激动，焦虑/鼓动</td><td align="center">disguise one’s agitation（掩饰某人的不安）</td></tr><tr><td align="center">bandanna</td><td align="center">[bænˈdænə]</td><td align="center">n.</td><td align="center">大手帕，头巾</td><td align="center">wear a bandanna (戴头巾)</td></tr><tr><td align="center">bison</td><td align="center">[ˈbaɪsən]</td><td align="center">n.</td><td align="center">北美野牛</td><td align="center">American bison (美洲野牛)</td></tr><tr><td align="center">bland</td><td align="center">[blænd]</td><td align="center">adj.</td><td align="center">乏味的</td><td align="center">bland food (淡而无味的食物)</td></tr><tr><td align="center">camouflage</td><td align="center">[ˈkæməflɑʒ]</td><td align="center">n. / v.</td><td align="center">伪装，掩饰 / 伪装，掩盖</td><td align="center">camouflage clothing (迷彩服)</td></tr><tr><td align="center">chlorine</td><td align="center">[ˈklɔːriː]</td><td align="center">n.</td><td align="center">氯</td><td align="center">chlorine gas (氯气)</td></tr><tr><td align="center">choreographer</td><td align="center">[ˌkɔriəˈɡræfər]</td><td align="center">n.</td><td align="center">舞蹈编导/编舞者</td><td align="center">professional choreographer (专业舞蹈编导)</td></tr><tr><td align="center">clutch</td><td align="center">[klʌtʃ]</td><td align="center">n. / v.</td><td align="center">离合器，抓紧 / 抓住，紧握</td><td align="center">clutch a bag (紧握手提包)</td></tr><tr><td align="center">codify</td><td align="center">[ˈkoʊdɪˌfaɪ]</td><td align="center">v.</td><td align="center">编纂，整理</td><td align="center">codify laws (编纂法律)</td></tr><tr><td align="center">continuity</td><td align="center">[ˌkɑntɪˈnuəti]</td><td align="center">n.</td><td align="center">连续性</td><td align="center">maintain continuity (保持连续性)</td></tr><tr><td align="center">crater</td><td align="center">[ˈkreɪtər]</td><td align="center">n.</td><td align="center">火山口，弹坑</td><td align="center">impact crater (撞击坑)</td></tr><tr><td align="center">cubism</td><td align="center">[ˈkjuːˌbɪzəm]</td><td align="center">n.</td><td align="center">立体主义</td><td align="center">explore cubism (探索立体派)</td></tr><tr><td align="center">deposit</td><td align="center">[dɪˈpɑzɪt]</td><td align="center">n. / v.</td><td align="center">存款，押金 / 存放，沉积</td><td align="center">bank deposit (银行存款)</td></tr><tr><td align="center">deprive</td><td align="center">[dɪˈpraɪv]</td><td align="center">v.</td><td align="center">剥夺</td><td align="center">deprive of rights (剥夺权利）</td></tr><tr><td align="center">disciple</td><td align="center">[dɪˈsaɪpl]</td><td align="center">n.</td><td align="center">信徒，追随者</td><td align="center">a disciple of a philosophy (某哲学的信徒)</td></tr><tr><td align="center">feeble</td><td align="center">[ˈfiːbəl]</td><td align="center">adj.</td><td align="center">虚弱的，无力的</td><td align="center">a feeble argument (无力的论点)</td></tr><tr><td align="center">gallop</td><td align="center">[ˈɡæləp]</td><td align="center">n. / v.</td><td align="center">疾驰，飞跑 / 疾驰，飞跑</td><td align="center">at full gallop (全速奔跑)</td></tr><tr><td align="center">incapacitate</td><td align="center">[ˌɪnkəˈpæsɪˌteɪt]</td><td align="center">v.</td><td align="center">使失去能力</td><td align="center">His poor health incapacitate him for work（不佳的健康状态使他不能工作）</td></tr><tr><td align="center">indigestion</td><td align="center">[ˌɪndɪˈdʒɛstʃən]</td><td align="center">n.</td><td align="center">消化不良</td><td align="center">symptoms of indigestion (消化不良的症状)</td></tr><tr><td align="center">lethal</td><td align="center">[ˈliːθəl]</td><td align="center">adj.</td><td align="center">致命的</td><td align="center">lethal weapon (致命武器)</td></tr><tr><td align="center">membrane</td><td align="center">[ˈmɛmbreɪn]</td><td align="center">n.</td><td align="center">薄膜</td><td align="center">cell membrane (细胞膜)</td></tr><tr><td align="center">meteorite</td><td align="center">[ˈmiːtiəˌraɪt]</td><td align="center">n.</td><td align="center">陨石</td><td align="center">fallen meteorite (坠落的陨石)</td></tr><tr><td align="center">nocturnal</td><td align="center">[nɑkˈtɜrnəl]</td><td align="center">adj.</td><td align="center">夜间的</td><td align="center">nocturnal animals (夜行动物)</td></tr><tr><td align="center">notch</td><td align="center">[nɑtʃ]</td><td align="center">n. / v.</td><td align="center">刻痕，凹口</td><td align="center">score a notch (刻下一个记号)</td></tr><tr><td align="center">pigment</td><td align="center">[ˈpɪɡmənt]</td><td align="center">n.</td><td align="center">颜料</td><td align="center">natural pigment (天然颜料)</td></tr><tr><td align="center">piracy</td><td align="center">[ˈpaɪrəsi]</td><td align="center">n.</td><td align="center">海盗行为</td><td align="center">online piracy (网络盗版)</td></tr><tr><td align="center">pivotal</td><td align="center">[ˈpɪvətəl]</td><td align="center">adj.</td><td align="center">关键的</td><td align="center">play a pivotal role (发挥关键作用)</td></tr><tr><td align="center">replicate</td><td align="center">[ˈrɛplɪˌkeɪt]</td><td align="center">v.</td><td align="center">复制，复制</td><td align="center">replicate the experiment (复制实验)</td></tr><tr><td align="center">saturation</td><td align="center">[ˌsætʃəˈreɪʃən]</td><td align="center">n.</td><td align="center">饱和度</td><td align="center">color saturation (颜色饱和度)</td></tr><tr><td align="center">scrub</td><td align="center">[skrʌb]</td><td align="center">n. / v.</td><td align="center">擦洗，擦净</td><td align="center">scrub the floor (擦洗地板)</td></tr><tr><td align="center">sneaker</td><td align="center">[ˈsniːkər]</td><td align="center">n.</td><td align="center">运动鞋</td><td align="center">a pair of sneakers (一双运动鞋)</td></tr><tr><td align="center">stratum</td><td align="center">[ˈstreɪtəm]</td><td align="center">n.</td><td align="center">岩层/社会阶层</td><td align="center">rock strata（岩层）/upper stratum (上层阶级)</td></tr><tr><td align="center">supplant</td><td align="center">[səˈplænt]</td><td align="center">v.</td><td align="center">取代</td><td align="center">supplant a leader (取代领导者)</td></tr><tr><td align="center">symbolize</td><td align="center">[ˈsɪmbəˌlaɪz]</td><td align="center">v.</td><td align="center">象征</td><td align="center">symbolize freedom (象征自由)</td></tr><tr><td align="center">wick</td><td align="center">[wɪk]</td><td align="center">n.</td><td align="center">灯芯，蜡烛心</td><td align="center">light the wick (点燃蜡烛)</td></tr></tbody></table><h2 id="Reference-📚"><a href="#Reference-📚" class="headerlink" title="Reference 📚"></a>Reference 📚</h2><ul><li>《TOEFL词汇（45天突破版）》</li><li><a href="https://openai.com/blog/chatgpt">https://openai.com/blog/chatgpt</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> TOEFL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TOEFL </tag>
            
            <tag> Vocabulary </tag>
            
            <tag> English </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TOEFL｜Word List 28</title>
      <link href="/2023/06/15/toefl-word-list28/"/>
      <url>/2023/06/15/toefl-word-list28/</url>
      
        <content type="html"><![CDATA[<h1 id="TOEFL-Vocabulary-feat-ChatGPT"><a href="#TOEFL-Vocabulary-feat-ChatGPT" class="headerlink" title="TOEFL Vocabulary (feat.ChatGPT)"></a>TOEFL Vocabulary (feat.ChatGPT)</h1><h2 id="Word-List-28-🚀"><a href="#Word-List-28-🚀" class="headerlink" title="Word List 28 🚀"></a>Word List 28 🚀</h2><table><thead><tr><th align="center">单词</th><th align="center">音标</th><th align="center">词性</th><th align="center">中文含义</th><th align="center">短语搭配</th></tr></thead><tbody><tr><td align="center">atrophy</td><td align="center">[ˈætrəfi]</td><td align="center">n</td><td align="center">萎缩，衰退</td><td align="center">muscle atrophy (肌肉萎缩)</td></tr><tr><td align="center">backlighting</td><td align="center">[ˈbæklaɪtɪŋ]</td><td align="center">n</td><td align="center">背光</td><td align="center">backlighting display (背光显示)</td></tr><tr><td align="center">bog</td><td align="center">[bɔɡ]</td><td align="center">v</td><td align="center">陷入泥沼</td><td align="center">bogged down (陷入困境)</td></tr><tr><td align="center">celebrated</td><td align="center">[ˈsɛlɪbreɪtɪd]</td><td align="center">adj</td><td align="center">著名的</td><td align="center">celebrated artist (著名艺术家)</td></tr><tr><td align="center">constitution</td><td align="center">[ˌkɒnstɪˈtjuːʃn]</td><td align="center">n</td><td align="center">宪法，章程</td><td align="center">written constitution (书面宪法)</td></tr><tr><td align="center">cram</td><td align="center">[kræm]</td><td align="center">v</td><td align="center">填塞，死记硬背</td><td align="center">cram for an exam (为考试死记硬背)</td></tr><tr><td align="center">foment</td><td align="center">[fəʊˈmɛnt]</td><td align="center">v</td><td align="center">煽动，助长</td><td align="center">foment unrest (煽动骚乱)</td></tr><tr><td align="center">geometry</td><td align="center">[dʒiˈɒmɪtri]</td><td align="center">n</td><td align="center">几何学</td><td align="center">Euclidean geometry (欧几里得几何)</td></tr><tr><td align="center">gilding</td><td align="center">[ˈɡɪldɪŋ]</td><td align="center">n</td><td align="center">镀金，装饰</td><td align="center">gilding process (镀金过程)</td></tr><tr><td align="center">hydrothermal</td><td align="center">[ˌhaɪdrəˈθɜːrməl]</td><td align="center">adj</td><td align="center">热液的，热水的</td><td align="center">hydrothermal vent (热液喷口)</td></tr><tr><td align="center">immunity</td><td align="center">[ɪˈmjuːnɪti]</td><td align="center">n</td><td align="center">免疫力</td><td align="center">immunity to diseases (对疾病的免疫力)</td></tr><tr><td align="center">innate</td><td align="center">[ɪˈneɪt]</td><td align="center">adj</td><td align="center">天生的，固有的</td><td align="center">innate ability (天生的能力)</td></tr><tr><td align="center">intrude</td><td align="center">[ɪnˈtruːd]</td><td align="center">v</td><td align="center">闯入，侵入</td><td align="center">intrude on someone’s privacy (侵犯某人的隐私)</td></tr><tr><td align="center">meagre</td><td align="center">[ˈmiːɡər]</td><td align="center">adj</td><td align="center">数量很少的</td><td align="center">meagre resources (有限的资源) / meagre income（微薄的收入）</td></tr><tr><td align="center">mesmerize</td><td align="center">[ˈmɛzməraɪz]</td><td align="center">v</td><td align="center">迷住，使入迷</td><td align="center">mesmerize the audience (迷住观众)</td></tr><tr><td align="center">metropolis</td><td align="center">[mɪˈtrɒpəlɪs]</td><td align="center">n</td><td align="center">大都市，首府</td><td align="center">bustling metropolis (繁华的大都市)</td></tr><tr><td align="center">pique</td><td align="center">[piːk]</td><td align="center">v</td><td align="center">恼怒/激起</td><td align="center">left in a fit of pique（愤然离去） / pique someone’s interest (激起某人的兴趣)</td></tr><tr><td align="center">plaque</td><td align="center">[plæk]</td><td align="center">n</td><td align="center">牌匾</td><td align="center">unveiled a commemorative plaque (为纪念牌匾揭幕)</td></tr><tr><td align="center">playwright</td><td align="center">[ˈpleɪraɪt]</td><td align="center">n</td><td align="center">剧作家</td><td align="center">renowned playwright (著名剧作家)</td></tr><tr><td align="center">pulp</td><td align="center">[pʌlp]</td><td align="center">n</td><td align="center">纸浆，果肉</td><td align="center">wood pulp (木浆)</td></tr><tr><td align="center">reside</td><td align="center">[rɪˈzaɪd]</td><td align="center">v</td><td align="center">居住</td><td align="center">reside in a house (居住在一所房子里)</td></tr><tr><td align="center">stimulation</td><td align="center">[ˌstɪmjʊˈleɪʃn]</td><td align="center">n</td><td align="center">刺激，激励</td><td align="center">sensory stimulation (感官刺激）</td></tr><tr><td align="center">subliminal</td><td align="center">[sʌbˈlɪmɪnl]</td><td align="center">adj</td><td align="center">下意识的</td><td align="center">subliminal messages (下意识信息)</td></tr><tr><td align="center">solder</td><td align="center">[ˈsoʊldər]</td><td align="center">v</td><td align="center">焊接</td><td align="center">soldering iron (焊接铁)</td></tr><tr><td align="center">swamp</td><td align="center">[swɑːmp]</td><td align="center">n</td><td align="center">沼泽</td><td align="center">marshy swamp (湿地沼泽)</td></tr><tr><td align="center">upheaval</td><td align="center">[ʌpˈhiːvəl]</td><td align="center">n</td><td align="center">剧变</td><td align="center">social upheaval (社会剧变)</td></tr><tr><td align="center">utilitarian</td><td align="center">[ˌjuːtɪlɪˈteəriən]</td><td align="center">adj</td><td align="center">实用主义的</td><td align="center">utilitarian approach (实用主义方法)</td></tr><tr><td align="center">vacation</td><td align="center">[vəˈkeɪʃn]</td><td align="center">n</td><td align="center">假期，休假</td><td align="center">summer vacation (暑假)</td></tr></tbody></table><h2 id="Reference-📚"><a href="#Reference-📚" class="headerlink" title="Reference 📚"></a>Reference 📚</h2><ul><li>《TOEFL词汇（45天突破版）》</li><li><a href="https://openai.com/blog/chatgpt">https://openai.com/blog/chatgpt</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> TOEFL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TOEFL </tag>
            
            <tag> Vocabulary </tag>
            
            <tag> English </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EECS498｜Assignment1</title>
      <link href="/2023/06/14/eecs498-assignment1/"/>
      <url>/2023/06/14/eecs498-assignment1/</url>
      
        <content type="html"><![CDATA[<h1 id="EECS498-Assignment1"><a href="#EECS498-Assignment1" class="headerlink" title="EECS498 - Assignment1"></a>EECS498 - Assignment1</h1><blockquote><p>Assignment1: <a href="https://web.eecs.umich.edu/~justincj/teaching/eecs498/FA2019/assignment1.html">https://web.eecs.umich.edu/~justincj/teaching/eecs498/FA2019/assignment1.html</a></p><p>CV Study Group：723575589（QQ Group）</p></blockquote><h2 id="What-to-do-🚀"><a href="#What-to-do-🚀" class="headerlink" title="What to do 🚀"></a>What to do 🚀</h2><p>In this assignment, you will first learn how to use <a href="https://pytorch.org/">PyTorch</a> on <a href="https://colab.research.google.com/">Google Colab</a> environment. Then, you will practice putting together a simple image classification pipeline, based on the k-Nearest Neighbor. The goals of this assignment are as follows:</p><ul><li>Develop proficiency with PyTorch tensors</li><li>Gain experience using notebooks on Google Colab</li><li>Understand the basic Image Classification pipeline and the data-driven approach (train/predict stages)</li><li>Understand the train/val/test splits and the use of validation data for hyperparameter tuning</li><li>Implement and apply a k-Nearest Neighbor (kNN) classifier</li></ul><h3 id="Q1-PyTorch-101-50-points"><a href="#Q1-PyTorch-101-50-points" class="headerlink" title="Q1: PyTorch 101 (50 points)"></a>Q1: PyTorch 101 (50 points)</h3><p><a href="https://colab.research.google.com/drive/1CXSzT9vyAeuAjs1L5Kef1WbVj0yWjY57">Open in Colab</a></p><p>The notebook <strong>pytorch101.ipynb</strong> will walk you through the basics of working with tensors in PyTorch.</p><h3 id="Q2-k-Nearest-Neighbor-classifier-50-points"><a href="#Q2-k-Nearest-Neighbor-classifier-50-points" class="headerlink" title="Q2: k-Nearest Neighbor classifier (50 points)"></a>Q2: k-Nearest Neighbor classifier (50 points)</h3><p><a href="https://colab.research.google.com/drive/1Zsjp0S7gnyzA3A6ra1Fr1bf6MjxGug4z">Open in Colab</a></p><p>The notebook <strong>kNN.ipynb</strong> will walk you through implementing a kNN classifier.</p><h3 id="Steps"><a href="#Steps" class="headerlink" title="Steps"></a>Steps</h3><h4 id="1-Click-“Open-in-Colab”"><a href="#1-Click-“Open-in-Colab”" class="headerlink" title="1. Click “Open in Colab”"></a>1. Click “Open in Colab”</h4><p>This will launch the corresponding notebook in Google Colab. No installation or setup required!</p><p>For more information on using Colab, see our <a href="https://web.eecs.umich.edu/~justincj/teaching/eecs498/FA2019/colab.html">Colab tutorial</a>.</p><h4 id="2-Save-a-copy-in-Drive"><a href="#2-Save-a-copy-in-Drive" class="headerlink" title="2. Save a copy in Drive"></a>2. Save a copy in Drive</h4><p>Once the notebook launches, click File -&gt; “Save a copy in Drive…”. This will save a copy of the notebook in your own Google Drive account.</p><p>By default, when you save a copy the name will be prepended with “Copy of” – for example saving a copy of the notebook “pytorch101.ipynb” will create a file named “Copy of pytorch101.ipynb”. You should <strong>rename your copy to have the same name as the original file</strong>.</p><h4 id="3-Work-on-the-assignment"><a href="#3-Work-on-the-assignment" class="headerlink" title="3. Work on the assignment"></a>3. Work on the assignment</h4><p>Work through the notebook, executing cells and writing code as indicated. You can save your work in Google Drive (click “File” -&gt; “Save”) and resume later if you don’t want to complete it all at once.</p><p>While working on the assignment, keep the following in mind:</p><ul><li>The notebook has clearly marked blocks where you are expected to write code. <strong>Do not write or modify any code outside of these blocks</strong>.</li><li><strong>Do not add or delete cells from the notebook</strong>. You may add new cells to perform scratch computations, but you should delete them before submitting your work.</li><li><strong>Run all cells before submitting.</strong> You will only get credit for code that has been run.</li></ul><h4 id="4-Download-ipynb-file"><a href="#4-Download-ipynb-file" class="headerlink" title="4. Download .ipynb file"></a>4. Download .ipynb file</h4><p>Once you have completed a notebook, download the completed notebook by clicking “File” -&gt; “Download .ipynb”.</p><p><strong>Make sure your downloaded file has the same name as the original notebook</strong>; either <em>pytorch101.ipynb</em> or <em>kNN.ipynb</em> for this assignment.</p><h4 id="5-Submit-your-work-to-Canvas"><a href="#5-Submit-your-work-to-Canvas" class="headerlink" title="5. Submit your work to Canvas"></a>5. Submit your work to Canvas</h4><p>Create a <code>.zip</code> file containing your completed notebook; name it <strong><code>uniquename_umid.zip</code></strong> (e.g. <code>justincj_12345678.zip</code>).</p><p>Make sure you do not change the filenames or include any other files. Your submitted <code>.zip</code> file should contain two files named <code>pytorch101.ipynb</code> and <code>knn.ipynb</code>.</p><p>We have written a <a href="https://github.com/deepvision-class/tools#homework-validation">validation script</a> for you to check the structure of your submitted <code>.zip</code> file. This script does not check whether your homework is correct; it only makes sure that your submitted file has the right structure, that you didn’t modify any parts of the <code>.ipynb</code> files that you shouldn’t have, and that you didn’t miss any sections where you were supposed to write code. <strong>In order to be graded, your assignment must pass this validation script</strong>. It is your responsibility to make sure your assignment is properly formatted before you submit it.</p><p>When you are done, <a href="https://umich.instructure.com/courses/305935/assignments">upload your work to Canvas (UMich students only)</a>.</p><h2 id="Extra-Resources-📚"><a href="#Extra-Resources-📚" class="headerlink" title="Extra Resources 📚"></a>Extra Resources 📚</h2><blockquote><p>🍉 Notes: These extra learning resources are collected by Ricky X, which might be useful when tackling with the assignment.</p></blockquote><h3 id="PyTorch"><a href="#PyTorch" class="headerlink" title="PyTorch"></a>PyTorch</h3><h4 id="Google-Colab"><a href="#Google-Colab" class="headerlink" title="Google Colab"></a>Google Colab</h4><ul><li>Google CoLab Tutorial — How to setup a Pytorch Environment on CoLab<ul><li><a href="https://medium.com/analytics-vidhya/google-colab-tutorial-how-to-setup-a-deep-learning-environment-on-colab-bc5ab7569f02">https://medium.com/analytics-vidhya/google-colab-tutorial-how-to-setup-a-deep-learning-environment-on-colab-bc5ab7569f02</a></li></ul></li><li>How to navigate b/w cells in Google Colab when using vim editor setting?<ul><li><a href="https://stackoverflow.com/questions/65497443/how-to-navigate-b-w-cells-in-google-colab-when-using-vim-editor-setting">https://stackoverflow.com/questions/65497443/how-to-navigate-b-w-cells-in-google-colab-when-using-vim-editor-setting</a></li></ul></li></ul><h4 id="Tensor-basics"><a href="#Tensor-basics" class="headerlink" title="Tensor basics"></a>Tensor basics</h4><ul><li><p>Tensors for Neural Networks, Clearly Explained!!!</p><ul><li><a href="https://youtu.be/L35fFDpwIM4">https://youtu.be/L35fFDpwIM4</a></li></ul></li><li><p>What is a Tensor?</p><ul><li><a href="https://www.kdnuggets.com/2018/05/wtf-tensor.html">https://www.kdnuggets.com/2018/05/wtf-tensor.html</a></li></ul></li><li><p>Numpy Sum Axis Intuition</p><ul><li><a href="https://medium.com/@aerinykim/numpy-sum-axis-intuition-6eb94926a5d1">https://medium.com/@aerinykim/numpy-sum-axis-intuition-6eb94926a5d1</a></li></ul></li><li><p>Understanding dimensions in PyTorch</p><ul><li><a href="https://towardsdatascience.com/understanding-dimensions-in-pytorch-6edf9972d3be">https://towardsdatascience.com/understanding-dimensions-in-pytorch-6edf9972d3be</a></li></ul></li></ul><h4 id="Tensor-reshaping"><a href="#Tensor-reshaping" class="headerlink" title="Tensor reshaping"></a>Tensor reshaping</h4><ul><li><p>What does .view() do in PyTorch?</p><ul><li><a href="https://stackoverflow.com/questions/42479902/what-does-view-do-in-pytorch">https://stackoverflow.com/questions/42479902/what-does-view-do-in-pytorch</a></li></ul></li><li><p>Deep Learning : Discussion on “Reshape” tensor operation</p><ul><li><a href="https://www.youtube.com/watch?v=ibWclfNepkE&amp;ab_channel=Splunk&amp;MachineLearning">https://www.youtube.com/watch?v=ibWclfNepkE&amp;ab_channel=Splunk%26MachineLearning</a></li></ul></li><li><p>Deep Learning : Discussion on “Transpose” tensor operation</p><ul><li><a href="https://youtu.be/KQH0ohBBTX8">https://youtu.be/KQH0ohBBTX8</a></li></ul></li><li><p>Complete Pytorch Tensor Tutorial (Initializing Tensors, Math, Indexing, Reshaping</p><ul><li><a href="https://youtu.be/x9JiIFvlUwk">https://youtu.be/x9JiIFvlUwk</a></li></ul></li><li><p>torch.unsqueeze() and torch.squeeze()</p><ul><li><a href="https://zhuanlan.zhihu.com/p/86763381">https://zhuanlan.zhihu.com/p/86763381</a></li></ul></li></ul><h3 id="KNN"><a href="#KNN" class="headerlink" title="KNN"></a>KNN</h3><h3 id="Cross-Validation"><a href="#Cross-Validation" class="headerlink" title="Cross Validation"></a>Cross Validation</h3><ul><li>Lecture 8 - Data Splits, Models &amp; Cross-Validation | Stanford CS229: Machine Learning (Autumn 2018)<ul><li><a href="https://youtu.be/rjbkWSTjHzM">https://youtu.be/rjbkWSTjHzM</a></li></ul></li></ul><p>​</p><h2 id="Solution-🧑🏻‍💻"><a href="#Solution-🧑🏻‍💻" class="headerlink" title="Solution 🧑🏻‍💻"></a>Solution 🧑🏻‍💻</h2><p>Ricky’s GitHub Repository for EECS498 Assignments: <a href="https://github.com/Ricky2333/EECS498">https://github.com/Ricky2333/EECS498</a></p><blockquote><p>CV Study Group：723575589（QQ Group）</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> EECS498 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> EECS498 </tag>
            
            <tag> Computer Vision </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>科研工具｜Zotero数据同步</title>
      <link href="/2023/06/12/ke-yan-zotero-tong-bu/"/>
      <url>/2023/06/12/ke-yan-zotero-tong-bu/</url>
      
        <content type="html"><![CDATA[<p>在之前的博客中，摊主列举了不少 Zotero 的优点，阐述了 Zotero 这款文献管理软件的强大。</p><p>但是 Zotero 也有一些缺点，比如 <strong>云端服务器的存储容量</strong> 很小，这就导致多平台的数据同步出现问题。</p><p>像摊主的文献库中有不少计算机视觉（CV）的相关论文，一篇 Paper 的 PDF 大小在 10MB~20MB，甚至更多，基本上存了一段时间的文献后，就超出自带的 300MB 容量了。</p><p>在查阅资料后，摊主发现 <strong>Zotero</strong> 可以与 <strong>坚果云</strong> 进行联动，达到 <strong>扩展数据同步容量</strong> 的效果。</p><h2 id="相关资料-📚"><a href="#相关资料-📚" class="headerlink" title="相关资料 📚"></a>相关资料 📚</h2><p>【青柠学术】用坚果云无限扩展文献存间：<a href="https://mp.weixin.qq.com/s/SPKEtNTtFZgd7zIXbxSJfg">https://mp.weixin.qq.com/s/SPKEtNTtFZgd7zIXbxSJfg</a></p><p>【【Zotero同步】iPad端文献同步方法｜坚果云｜必收藏系列】 <a href="https://www.bilibili.com/video/BV1d14y1n7q6/?share_source=copy_web&amp;vd_source=33934722b558a5cefa750c1a9be72249">https://www.bilibili.com/video/BV1d14y1n7q6/?share_source=copy_web&amp;vd_source=33934722b558a5cefa750c1a9be72249</a></p><p>【从零开始读研】跨平台文献管理方案，Zotero+坚果云，实现Ipad论文笔记同步存储】 <a href="https://www.bilibili.com/video/BV1q3411g7vn/?share_source=copy_web&amp;vd_source=33934722b558a5cefa750c1a9be72249">https://www.bilibili.com/video/BV1q3411g7vn/?share_source=copy_web&amp;vd_source=33934722b558a5cefa750c1a9be72249</a></p>]]></content>
      
      
      <categories>
          
          <category> 科研 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 科研工具 </tag>
            
            <tag> Zotero </tag>
            
            <tag> 文献管理 </tag>
            
            <tag> 坚果云 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>科研工具｜Zotero下载</title>
      <link href="/2023/06/11/ke-yan-zotero-xia-zai/"/>
      <url>/2023/06/11/ke-yan-zotero-xia-zai/</url>
      
        <content type="html"><![CDATA[<h1 id="科研工具｜Zotero下载"><a href="#科研工具｜Zotero下载" class="headerlink" title="科研工具｜Zotero下载"></a>科研工具｜Zotero下载</h1><h2 id="Zotero-简介-📚"><a href="#Zotero-简介-📚" class="headerlink" title="Zotero 简介 📚"></a>Zotero 简介 📚</h2><p><strong>Zotero</strong> 是一款 <strong>跨平台</strong> 的 <strong>文献管理工具</strong>，可用于收集、整理和引用学术文献。</p><p>Zotero 支持 Windows、Mac 和 Linux 系统，下载安装非常简便。</p><blockquote><p>Zotero 官网主页：<a href="https://www.zotero.org/">https://www.zotero.org</a></p></blockquote><h2 id="Zotero-优点-🍉"><a href="#Zotero-优点-🍉" class="headerlink" title="Zotero 优点 🍉"></a>Zotero 优点 🍉</h2><p>在摊主看来，Zotero 有以下几个优点：</p><ul><li>开源、免费</li><li>支持多级目录（比如在 <code>DeepLearning</code> 目录下还可以创建多个子目录）</li><li>支持数据同步，可在多个设备上查看自己的文献库（搭配坚果云同步数据）</li><li>内置 PDF 阅览器，方便阅读文献</li><li>丰富的插件资源，可以高度个性化</li></ul><p>摊主也用过像 EndNote、Mendeley 等文献管理软件，但摊主个人觉得 Zotero 的使用体验最好。</p><h2 id="Zotero-下载-🧑🏻‍💻"><a href="#Zotero-下载-🧑🏻‍💻" class="headerlink" title="Zotero 下载 🧑🏻‍💻"></a>Zotero 下载 🧑🏻‍💻</h2><h3 id="Zotero（PC版）"><a href="#Zotero（PC版）" class="headerlink" title="Zotero（PC版）"></a>Zotero（PC版）</h3><p>Zotero 官网下载界面：<a href="https://www.zotero.org/download/">https://www.zotero.org/download/</a></p><p>Zotero 官网安装指南：<a href="https://www.zotero.org/support/installation">https://www.zotero.org/support/installation</a></p><p><img src="https://ricky-typora-notes.oss-cn-hangzhou.aliyuncs.com/image-20230611142242899.png" alt="Zotero PC版"></p><p><img src="https://ricky-typora-notes.oss-cn-hangzhou.aliyuncs.com/image-20230611142613057.png" alt="Zotero用户界面（Mac版）"></p><h3 id="Zotero-Connector（浏览器插件）"><a href="#Zotero-Connector（浏览器插件）" class="headerlink" title="Zotero Connector（浏览器插件）"></a>Zotero Connector（浏览器插件）</h3><blockquote><p>Zotero Connector 可以自动感应网页内容，将网页保存至Zotero中</p></blockquote><p>Zotero Connector官网下载界面：<a href="https://www.zotero.org/download/">https://www.zotero.org/download/</a></p><p><img src="https://ricky-typora-notes.oss-cn-hangzhou.aliyuncs.com/image-20230611143832252.png"></p><h3 id="Zoo-for-Zotero（安卓版）"><a href="#Zoo-for-Zotero（安卓版）" class="headerlink" title="Zoo for Zotero（安卓版）"></a>Zoo for Zotero（安卓版）</h3><p>Zoo for GitHub 网页：<a href="https://github.com/mickstar/Zoo-For-Zotero">https://github.com/mickstar/Zoo-For-Zotero</a></p><blockquote><p>官方下载链接为Google Play，如果无法访问，可通过网盘下载：<a href="https://rickyxcoder.lanzoul.com/ipZ0k0yv2yna">蓝奏云（提取码：f5mf）</a></p></blockquote><p><img src="https://ricky-typora-notes.oss-cn-hangzhou.aliyuncs.com/image-20230611145258199.png" alt="Zoo for Zotero用户界面"></p><h3 id="Zotero（iOS和iPadOS版）"><a href="#Zotero（iOS和iPadOS版）" class="headerlink" title="Zotero（iOS和iPadOS版）"></a>Zotero（iOS和iPadOS版）</h3><p>App Store 直接搜索下载即可。</p>]]></content>
      
      
      <categories>
          
          <category> 科研 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 科研工具 </tag>
            
            <tag> Zotero </tag>
            
            <tag> 文献管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>期末指北｜物联网</title>
      <link href="/2023/06/10/qi-mo-zhi-bei-wu-lian-wang/"/>
      <url>/2023/06/10/qi-mo-zhi-bei-wu-lian-wang/</url>
      
        <content type="html"><![CDATA[<h1 id="【期末指北】物联网原理与应用"><a href="#【期末指北】物联网原理与应用" class="headerlink" title="【期末指北】物联网原理与应用"></a>【期末指北】物联网原理与应用</h1><h2 id="写在最前-✍️"><a href="#写在最前-✍️" class="headerlink" title="写在最前 ✍️"></a>写在最前 ✍️</h2><p>本文记录了一些 《<strong>物联网原理与应用</strong>》课程的 <strong>主要知识点</strong>，供有需求的同学们学习使用。</p><p>部分内容由 <strong>ChatGPT</strong> 生成，摊主进行审核及整理。</p><hr><h2 id="题目类型-☘️"><a href="#题目类型-☘️" class="headerlink" title="题目类型 ☘️"></a>题目类型 ☘️</h2><table><thead><tr><th align="center">题目类型</th><th align="center">数量</th><th align="center">总分</th></tr></thead><tbody><tr><td align="center">简答题</td><td align="center">10题/6分</td><td align="center">60分</td></tr><tr><td align="center">论述题</td><td align="center">5题/8分</td><td align="center">40分</td></tr></tbody></table><h2 id="知识点详解-🧑🏻‍💻"><a href="#知识点详解-🧑🏻‍💻" class="headerlink" title="知识点详解 🧑🏻‍💻"></a>知识点详解 🧑🏻‍💻</h2><h3 id="一、-物联网的经典定义"><a href="#一、-物联网的经典定义" class="headerlink" title="一、 物联网的经典定义"></a>一、 物联网的经典定义</h3><p><strong>物联网</strong> 实际是中国人的发明， 整合了美国 CPS （ Cyber Physical Systems ） 、欧盟 IoT （ Internet of Things ） 和日本 U - Japan 等概念。</p><p><strong>物联网</strong> 是一个基于 <strong>互联网</strong>、<strong>传统电信网</strong> 等信息载体， 让所有能够被 <strong>独立寻址</strong> 的 <strong>普通物理对象</strong> 实现 <strong>互联互通</strong> 的 网络。</p><blockquote><p>能够 <strong>被独立寻址的物理对象</strong> 是指在计算机系统或通信系统中，可以通过唯一的地址或标识符来访问和识别的实体。这些对象可以是硬件设备、存储单元、网络节点或其他可操作的实体。</p></blockquote><p><strong>普通对象设备化</strong>，<strong>自治终端互联化</strong> 和 <strong>普适服务智能化</strong> 是其三个重要特征。</p><ul><li><strong>普通对象设备化</strong> 是通过将传感器、处理器和通信模块等技术嵌入到普通物体中，使成为物联网中的节点设备，能够感知环境、收集数据、进行计算等。</li><li><strong>自治终端互联化</strong> 指物联网中的设备不仅仅是被动地收集和传输数据，还有相互连接和通信的能力，能够主动与其他设备进行交互和合作。这种自治性使得物联网系统能够在没有中心控制的情况下，自主地进行协作、共享信息和实现智能化的功能。</li><li><strong>普适服务智能化</strong> 是利用人工智能、机器学习等技术，从海量的数据中提取有价值的信息，实现智能化的决策和响应，为用户提供更加智能化的服务。</li></ul><hr><h3 id="物联网的其他特点（选）"><a href="#物联网的其他特点（选）" class="headerlink" title="物联网的其他特点（选）"></a>物联网的其他特点（选）</h3><ol><li><strong>大规模连接性</strong>：物联网的一个主要特征是连接大规模的物理设备和对象，使它们能够相互通信和交换数据。这包括从个人设备到工业设备、城市基础设施等各种物体的广泛连接。</li><li><strong>实时性和即时性</strong>：物联网设备可以实时采集和传输数据，并快速响应用户的指令和需求。这使得物联网系统能够实现实时监控、远程控制和即时反馈，以满足用户的需求。</li><li><strong>数据驱动的决策</strong>：物联网通过收集和分析大量的数据，为用户和系统提供有价值的信息和洞察力。这些数据可以用于优化决策、改进业务流程、提高效率和创新服务等方面。</li><li><strong>安全和隐私保护</strong>：由于物联网涉及大量的数据传输和设备连接，安全和隐私保护是非常重要的方面。物联网系统需要采取安全措施，确保数据的机密性、完整性和可用性，并保护用户的隐私权。</li><li><strong>灵活性和可扩展性</strong>：物联网系统应具备灵活性和可扩展性，能够适应不断变化的环境和需求。它应该能够容纳不同类型的设备和技术，并能够随着需求的增长进行扩展和升级。</li></ol><hr><h3 id="二、物联网和互联网的关系"><a href="#二、物联网和互联网的关系" class="headerlink" title="二、物联网和互联网的关系"></a>二、物联网和互联网的关系</h3><p><strong>物联网和互联网</strong> 之间存在密切的关系，但又有一些区别。</p><p><strong>概念</strong></p><ul><li><p><strong>互联网</strong> 是指全球范围内连接着各种计算机和网络设备的巨大网络系统，通过标准的互联网协议，使得各种设备和计算机能够相互通信、交换数据和共享信息。</p><ul><li>互联网在 <strong>人与人</strong> 之间建立了连接 → 人联网</li></ul></li><li><p><strong>物联网</strong> 则是 <strong>在互联网的基础</strong> 上，将更广泛的物理设备、传感器和其他物理对象连接起来，从而实现智能化、自动化和实时化的数据交换与协同工作，使得互联网不仅限于人与人之间的连接，还包括物与物之间的连接。</p><ul><li>物联网在 <strong>物与物</strong> 之间建立了连接 → 物联网</li></ul></li></ul><p><strong>关系</strong></p><ul><li><strong>互联网</strong> 提供了物联网所需的基础设施和通信协议，为物联网的发展提供了技术支持和连接手段。</li><li><strong>物联网</strong> 的兴起也加强了互联网的应用范围和影响力。</li></ul><p>总的来说，<strong>物联网可以看成互联网的延伸和扩展</strong>，它利用互联网技术将更多的设备和物体连接起来，为人们提供更智能化、便捷化的生活和工作方式。</p><hr><h3 id="三、互联网和传统电信网的关系"><a href="#三、互联网和传统电信网的关系" class="headerlink" title="三、互联网和传统电信网的关系"></a>三、互联网和传统电信网的关系</h3><ol><li><strong>技术角度</strong><ul><li>互联网采用基于TCP/IP协议的分组交换技术，将数据分割成小的数据包进行传输，使得数据能够通过不同的路径进行转发和交换。</li><li>传统电信网采用电路交换技术，建立点对点的物理连接来传输数据，需要预先分配通信资源，如电话线路，来建立连接。</li></ul></li><li><strong>服务范围</strong><ul><li>互联网提供了广泛的应用和服务，如电子邮件、网页浏览、社交媒体、在线购物等，不仅限于传统的通信服务。</li><li>传统电信网主要提供传统的通信服务，如电话通信、传真、电报、广播、电视广播等。</li></ul></li><li><strong>连接方式</strong><ul><li>互联网采用无线和有线网络技术，可以通过多种方式接入，如Wi-Fi、移动数据网络、光纤等。</li><li>传统电信网通常是有线连接，使用传统的电话线路、光纤电缆、卫星链路等进行通信。</li></ul></li><li><strong>数据传输方式</strong><ul><li>互联网的数据传输采用分组交换，将数据分割成小的数据包进行传输，可以根据网络状况和最优路径进行动态路由和转发。</li><li>传统电信网的数据传输采用电路交换，建立固定的连接，数据在连接建立后直接传输。</li></ul></li><li><strong>灵活性和扩展性</strong><ul><li>互联网具有较高的灵活性和可扩展性，能够适应不断变化的需求和技术发展，支持各种设备和应用的互联互通。</li><li>传统电信网相对较为刚性，需要预先规划和配置通信资源，扩展和适应新的需求相对困难。</li></ul></li></ol><p>总体而言，互联网是建立在传统电信网基础之上的全球计算机网络系统，它在技术、服务范围、连接方式、数据传输方式以及灵活性和扩展性等方面与传统电信网有着明显的区别。互联网的兴起带来了更广泛的应用和服务，同时也对传统电信业产生了深远的影响和变革。</p><hr><h3 id="四、普适计算"><a href="#四、普适计算" class="headerlink" title="四、普适计算"></a>四、普适计算</h3><ul><li><strong>普适计算的基本概念</strong> 是将计算能力嵌入到日常环境中的各种设备和物体中，使得用户可以随时随地访问计算资源，进行交互，而无需明确意识到计算机的存在，其关键词可以概括为「感知」与「互联」</li><li><strong>普适计算的关键技术</strong> 包括传感器技术、嵌入式系统、网络通信、人机交互、数据挖掘和人工智能等。</li><li><strong>普适计算的应用领域</strong> 非常广泛，涵盖了智能家居、智能交通、健康医疗、智慧城市、工业自动化等多个领域。它可以改善人们的生活质量，提高工作效率，促进社会的可持续发展。</li></ul><hr><h3 id="五、物联网四层模型以及相关技术"><a href="#五、物联网四层模型以及相关技术" class="headerlink" title="五、物联网四层模型以及相关技术"></a>五、物联网四层模型以及相关技术</h3><p>四层模型（从底层开始）简单阐述一下他的相关技术</p><ul><li><p><strong>感知识别层</strong>（信息生成）</p><ul><li><p>关键词</p><ul><li>微型、便宜、节能</li></ul></li><li><p>技术</p><ul><li>RFID</li><li>传感器网络</li><li>定位系统</li></ul></li></ul></li><li><p><strong>网络构建层</strong>（信息传输）</p><ul><li><p>关键词</p><ul><li>低成本、低功耗、广覆盖</li></ul></li><li><p>技术</p><ul><li>无线广域网（WAN）：3G、4G、5G通信技术、LoRaWAN</li><li>无限城域网（MAN）：WiMax</li><li>无线局域网（LAN）：WiFi 技术</li><li>无线个域网（PAN）：蓝牙、ZigBee</li></ul></li></ul></li><li><p><strong>管理服务层</strong>（信息处理）</p><ul><li><p>关键词</p><ul><li>可拓展性、交互性、灵活性</li></ul></li><li><p>技术</p><ul><li>分布式机器学习</li><li>边缘计算</li></ul></li></ul></li><li><p><strong>综合应用层</strong>（信息应用）</p><ul><li><p>关键词</p><ul><li>连通性、智能化、生态系统</li></ul></li><li><p>案例</p><ul><li>智慧医疗</li><li>智慧教育</li></ul></li></ul></li></ul><hr><h3 id="六、室内定位技术"><a href="#六、室内定位技术" class="headerlink" title="六、室内定位技术"></a>六、室内定位技术</h3><p><strong>位置信息三大要素</strong>：所在物理位置、处在该地理位置的时间、处在该地理位置的 对象（人或设备）</p><p><strong>位置信息拓展</strong>：位置信息 对象所在的环境 对象的行为及活动</p><p><strong>技术挑战</strong>：异构网络和多变环境下的精确定位、大规模应用、基于位置的服务、信息安全和隐私保护问题。</p><p><strong>室内定位技术的案例</strong></p><ol><li><strong>Wi-Fi定位</strong>：利用Wi-Fi信号的接入点（AP）在室内进行定位。通过测量Wi-Fi信号的强度、延迟和多径传播等参数，可以确定设备相对于AP的位置。</li><li><strong>RFID定位</strong>：利用射频识别（RFID）技术进行定位，通过在室内部署一系列RFID读写器和标签，接收设备可以通过与标签之间的信号交互来确定自身位置。</li><li><strong>超声波定位</strong>：通过发射超声波信号并测量信号的到达时间来确定设备的位置，通常需要在室内安装超声波传感器和定位设备。</li><li><strong>视觉定位</strong>：使用摄像头或深度传感器进行室内定位，通过捕捉环境中的视觉特征，并利用图像处理和计算机视觉算法来分析和匹配特征，从而确定设备的位置。</li><li><strong>可见光通信定位</strong>：使用可见光通信技术进行定位。利用LED灯或红外发射器发出特定的光信号，接收设备通过接收信号并计算时间差来确定自身位置。</li></ol><hr><h3 id="七、基于WiFi的室内定位技术"><a href="#七、基于WiFi的室内定位技术" class="headerlink" title="七、基于WiFi的室内定位技术"></a>七、基于WiFi的室内定位技术</h3><p><strong>基于WiFi的室内定位技术</strong> 利用 WiFi信号的强度和特征，来确定移动设备在室内的位置，技术流程如下：</p><ol><li><strong>WiFi信号获取</strong>：移动设备通过WiFi接口扫描周围的WiFi网络，并获取到周围可用的WiFi信号列表。</li><li><strong>WiFi信号指纹数据库构建</strong>：预先在室内建立一个WiFi信号指纹数据库。这需要在待定位的区域内收集WiFi信号的强度和其他特征数据，并将其与对应的位置信息进行关联，构建指纹数据库。</li><li><strong>WiFi信号指纹匹配</strong>：通过对比移动设备获取到的WiFi信号列表与指纹数据库中的WiFi信号指纹进行匹配，找到与之最相似的WiFi信号指纹。</li><li><strong>位置推测</strong>：根据匹配到的WiFi信号指纹，确定移动设备所处的位置。这可以通过在指纹数据库中存储的位置信息进行关联，从而得出设备的位置。</li></ol><p>需要注意的是，WiFi信号在室内传播受到多种因素的影响，如墙壁、障碍物和信号干扰等，可能导致信号强度的不稳定性。因此，在构建指纹数据库时，需要收集足够数量和多样性的数据以提高定位的准确性和鲁棒性。另外，WiFi室内定位技术通常结合其他传感器（如惯性传感器、蓝牙等）一起使用，以进一步提高定位的精度和可靠性。</p><hr><h3 id="八、网络类型"><a href="#八、网络类型" class="headerlink" title="八、网络类型"></a>八、网络类型</h3><p>覆盖范围</p><ul><li><strong>广域网</strong>（Wide Area Network, WAN）：<ul><li>广域网是指跨越广阔地理范围的网络，，可用于连接远程地区、移动车辆和移动设备，实现全球性的通信。</li><li>案例<ul><li>互联网是一个典型的广域网，通过全球的互联网基础设施连接了世界各地的计算机和网络设备。</li><li>3G、4G、5G</li></ul></li></ul></li><li><strong>城域网</strong>（Metropolitan Area Network, MAN）：<ul><li>城域网是指覆盖城市区域的网络，可以覆盖数十公里的范围，用于提供城市级别的连接。</li><li>案例<ul><li>城市内的政府网络</li><li>城市内的校园网络</li></ul></li></ul></li><li><strong>局域网</strong>（Local Area Network, LAN）：<ul><li>办公室、学校、家庭等小范围内的网络，用于连接局部区域内的计算机、打印机、服务器等设备，例如企业内部的局域网、家庭网络等。</li><li>案例<ul><li>Wifi</li></ul></li></ul></li><li><strong>个域网</strong>（Personal Area Network, PAN）：<ul><li>个域网是指用于连接个人设备和周边设备的无线网络，通常在短距离范围内操作。</li><li>案例<ul><li>蓝牙</li><li>NFC</li></ul></li></ul></li><li><strong>蜂窝网络：</strong>蜂窝网络是移动通信系统，利用无线电波进行数据和语音通信。它包括蜂窝基站和移动设备，通过基站之间的划分区域（蜂窝）提供覆盖范围。</li></ul><hr><h3 id="九、云计算与边缘计算关系"><a href="#九、云计算与边缘计算关系" class="headerlink" title="九、云计算与边缘计算关系"></a>九、云计算与边缘计算关系</h3><p><strong>云计算</strong> 通过将计算资源、存储和应用程序等集中在 <strong>远程的数据中心（云）</strong> 中进行处理和管理，用户可以通过互联网访问云服务，实现灵活的资源调配和按需服务。</p><p><strong>边缘计算</strong> 则将数据处理和应用程序部署在离数据源和终端设备更近的 <strong>边缘节点</strong> 上，将计算资源和服务推向网络边缘。</p><ol><li><strong>数据处理位置</strong>：<ul><li>云计算将数据处理和应用程序运行在远程的云服务器上，用户通过互联网将数据发送到云进行处理。</li><li>边缘计算将数据处理和应用程序部署在离数据源和终端设备更近的边缘节点上，将计算资源和服务推向网络边缘。</li></ul></li><li><strong>数据处理延迟</strong>：<ul><li>云计算的数据处理和服务分发需要通过互联网进行，数据传输的延迟相对较高，适用于对延迟要求不敏感的应用场景。</li><li>边缘计算将数据处理推近到数据源附近，可以减少数据传输延迟，适用于对实时性要求较高的应用场景。</li></ul></li><li><strong>数据量和隐私</strong>：<ul><li>云计算适用于处理大规模数据和需要长时间计算的场景，适合存储和分析大量的数据。</li><li>边缘计算适用于处理实时数据和大规模设备连接的场景，可以在边缘节点上进行实时处理和决策，减少对云的依赖。</li></ul></li><li><strong>协同工作</strong>：<ul><li>云计算和边缘计算可以相互协作，形成混合架构，以满足不同的需求。</li><li>边缘计算可以处理一部分实时的数据和计算任务，而将更大规模和长时间计算的任务交给云来处理。</li></ul></li></ol><p>综上所述，云计算和边缘计算是两种不同的计算架构，互补而非互斥。它们可以根据应用需求和场景特点进行灵活的选择和结合，以实现更高效的数据处理和服务分发。</p><hr><h3 id="ZigBee协议的协议栈"><a href="#ZigBee协议的协议栈" class="headerlink" title="ZigBee协议的协议栈"></a>ZigBee协议的协议栈</h3><p><strong>ZigBee特点</strong></p><ol><li><strong>低功耗</strong>：Zigbee协议专为低功耗设备设计，以延长设备的电池寿命。设备在大部分时间处于休眠状态，只在需要时才进行通信。</li><li><strong>短距离通信</strong>：Zigbee协议适用于短距离通信，通常在10到100米的范围内，适用于室内和室外环境。</li><li><strong>自组织网络</strong>：Zigbee设备能够自动组网，通过自主的网络协议在网络中建立和维护拓扑结构。设备可以加入和退出网络，实现动态的设备管理。</li><li><strong>低数据速率</strong>：Zigbee协议的数据传输速率相对较低，通常在几十kbps到几百kbps之间。它适用于传输小量的传感器数据和简单的控制命令。</li></ol><p><strong>ZigBee协议栈</strong></p><blockquote><p><strong>协议栈</strong>（Protocol Stack）是指在计算机网络中，为实现特定的通信协议而组织起来的一系列协议层次。</p><p>每个协议层次负责不同的功能和任务，通过协议栈的层层协作，实现数据的传输和通信。</p><p>协议栈通常采用 <strong>分层</strong> 的设计，每个层次都有特定的功能和责任。常见的网络协议栈模型是TCP/IP协议栈，它包括物理层、数据链路层、网络层、传输层和应用层等不同的层次。</p></blockquote><ul><li><strong>应用层</strong>（Application Layer）<ul><li>定义Zigbee设备之间的应用协议和应用功能，包括设备识别、服务发现、消息传递等。</li></ul></li><li><strong>网络层</strong>（Network Layer）<ul><li>网络层负责设备之间的寻址、路由和网络管理等功能。</li></ul></li><li><strong>Mac层（介质访问控制层）</strong>（Media Access Control Layer）<ul><li>MAC层负责管理设备之间的访问媒介（无线信道）的访问机制，包括帧格式、数据传输和设备的休眠与唤醒等。</li></ul></li><li><strong>物理层</strong>（Physical Layer）<ul><li>物理层负责处理通信信号的物理传输和接收。</li></ul></li></ul><hr><h3 id="智慧教育的理解（论述题）"><a href="#智慧教育的理解（论述题）" class="headerlink" title="智慧教育的理解（论述题）"></a>智慧教育的理解（论述题）</h3><p><strong>智慧教育</strong> 是利用信息技术和数据分析等技术手段，以提升 <strong>教学质量</strong> 为目标的教育模式和理念。</p><p>智慧教育的几个步骤</p><ul><li><p><strong>教育过程资料的数字化</strong>（提供数据基础）</p></li><li><p>教师的教学资料</p></li><li><p>学生的学习资料</p></li><li><p>教学过程的管理资料</p></li><li><p>师生的课堂行为</p></li><li><p><strong>挖掘数据中的有价值的信息</strong>（挖掘 insights）</p></li><li><p>数据挖掘技术</p></li><li><p>机器学习技术</p></li><li><p><strong>将信息转换成决策信息</strong></p><ul><li>通过计算和分析数据，判断教学过程好坏</li></ul></li><li><p><strong>反过来指导更好的教学行为</strong></p><ul><li>根据结果，教师可以及时调整教学策略和方法，提供更加个性化和有效的教学。</li></ul></li></ul><hr><h3 id="实时性问题、影响延迟的因素（论述题）"><a href="#实时性问题、影响延迟的因素（论述题）" class="headerlink" title="实时性问题、影响延迟的因素（论述题）"></a>实时性问题、影响延迟的因素（论述题）</h3><ul><li><strong>传输延迟</strong>：是指数据从发送方到接收方的物理传输所需的时间。它主要取决于数据包的大小和网络的传输速率（带宽）。</li><li><strong>处理延迟</strong>：包括从传感器和设备收集的数据进行处理、运行算法、执行逻辑和生成响应的时间。处理延迟取决于设备的处理能力、算法的复杂性和数据量的大小。</li><li><strong>发送延迟</strong>：据从发送方发送出去之前所经历的延迟。它包括了数据在发送方缓冲区中等待发送的时间、发送方进行处理和封装的时间，以及发送方与网络之间建立连接的时间。发送延迟的大小取决于发送设备的性能、数据处理复杂性和网络连接的建立速度。</li><li><strong>接收延迟</strong>：指的是数据在接收方进行处理和解码的延迟，受到以下因素的影响<ul><li>接收设备的处理能力：接收设备可能需要一定的时间来处理接收到的数据，包括解码、验证、错误检测和修复等操作。</li><li>数据量和算法复杂性：处理大量数据或者运行复杂算法会增加接收延迟，因为这需要更多的计算资源和时间。</li></ul></li><li><strong>排队延迟</strong>：在物联网系统中，当有大量的数据到达一个设备或节点时，数据在排队等待处理的时间。这种延迟是由于设备或节点的处理能力有限，无法立即处理所有到达的数据而引起的。</li></ul><hr><h3 id="三种设备从功耗角度进行分析（论述题）"><a href="#三种设备从功耗角度进行分析（论述题）" class="headerlink" title="三种设备从功耗角度进行分析（论述题）"></a>三种设备从功耗角度进行分析（论述题）</h3><p>三个移动设备的阶段：手机、无绳电话、BP机</p><ul><li><p><strong>通信对象</strong></p><ul><li><p>手机：基站（基站的通信距离远，功耗大）</p></li><li><p>无绳电话：座机</p></li><li><p>BP机：基站</p></li></ul></li><li><p><strong>通信模式</strong></p><ul><li>手机：双工（接收 + 发送，发送功耗 &gt; 接收功耗）</li><li>无绳电话：双工（接收 + 发送）</li><li>BP机：单工（仅接收，功耗小）</li></ul></li><li><p><strong>信道数据类型</strong></p><ul><li>手机：文本、音频、视频等多种形式。</li><li>无绳电话：语音通话</li><li>BP机：文本文件（功耗小）</li></ul></li></ul><hr><h3 id="大模型机器学习、AI对物联网的影响（论述题）"><a href="#大模型机器学习、AI对物联网的影响（论述题）" class="headerlink" title="大模型机器学习、AI对物联网的影响（论述题）"></a>大模型机器学习、AI对物联网的影响（论述题）</h3><p>**大模型机器学习 **为物联网应用提供了许多有益的功能和创新。</p><ol><li><strong>数据分析和决策支持</strong>：物联网设备产生大量的数据，包括传感器数据、日志记录和用户行为等。大模型机器学习可以帮助物联网应用从这些海量数据中提取有用的信息，进行数据分析和模式识别，并提供准确的决策支持，帮助优化系统运行、改善预测和规划。</li><li><strong>智能感知和自适应性</strong>：大模型机器学习可以使物联网设备学习和适应环境，自动识别和理解不同的情境，并作出相应的反应。</li><li><strong>异常检测和故障预测</strong>：物联网中的设备和传感器可能面临各种故障和异常情况。大模型机器学习可以通过对设备和传感器数据进行训练和监测，识别异常模式和故障信号，从而实现实时的异常检测和故障预测。这有助于提高设备的可靠性和维护效率，减少停机时间和维修成本。</li><li><strong>能源管理和优化</strong>：物联网中的能源管理是一个重要的挑战，大模型机器学习可以帮助解决这个问题。通过对能源消耗数据进行分析和建模，大模型机器学习可以提供能源使用模式的预测和优化策略，帮助降低能源成本、提高能源效率，并实现可持续的能源管理。</li><li><strong>安全和隐私保护</strong>：物联网涉及大量的敏感数据和隐私信息，大模型机器学习可以提供强大的安全性和隐私保护措施。它可以用于实时监测和识别潜在的安全威胁和攻击，并提供强化的身份验证、加密和访问控制机制，以确保物联网系统的安全性和隐私性。</li></ol><p>总体而言，大模型机器学习为物联网应用带来了更智能、高效和可靠的功能和服务。它通过数据分析、智能感知和优化，提供了更好的决策支持</p><hr><h3 id="对物联网技术的理解以及其未来发展方向（论述题）"><a href="#对物联网技术的理解以及其未来发展方向（论述题）" class="headerlink" title="对物联网技术的理解以及其未来发展方向（论述题）"></a>对物联网技术的理解以及其未来发展方向（论述题）</h3><p>我 <strong>所读论文的主题</strong> 是 <strong>物联网、人工智能与边缘计算</strong>。</p><p>文章探讨了如何在移动设备上借助神经网络处理器和边缘计算进行深度学习，提高在边缘节点上运行深度神经网络的精确度。作者提出了 CBO 框架，采用「分流」的思想，设定一个能够随网络环境变化的阈值，根据阈值决定哪些任务由云端处理，哪些部分由边缘处理，两者相结合，提高模型精确度和灵活性。</p><p>结合所读论文，在我看来，<strong>物联网技术在未来将与人工智能、边缘计算结合更加紧密</strong>，理由如下：</p><ol><li><strong>强化数据安全和隐私保护</strong>：随着物联网设备数量的增加，数据的安全性和隐私保护变得尤为重要。未来的发展方向之一是加强物联网系统的安全性和隐私保护机制，以保障用户的数据安全和个人隐私。</li><li><strong>强化边缘计算和人工智能的集成</strong>：边缘计算和人工智能的集成将进一步加强物联网系统的智能化和实时性能。边缘设备将具备更强的计算能力和智能决策能力，可以更好地满足实时响应和低延迟的需求。</li></ol>]]></content>
      
      
      <categories>
          
          <category> IoT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 期末指北 </tag>
            
            <tag> 物联网 </tag>
            
            <tag> IoT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>期末指北｜毛概</title>
      <link href="/2023/06/09/qi-mo-zhi-bei-mao-gai/"/>
      <url>/2023/06/09/qi-mo-zhi-bei-mao-gai/</url>
      
        <content type="html"><![CDATA[<h1 id="期末指北｜毛概"><a href="#期末指北｜毛概" class="headerlink" title="期末指北｜毛概"></a>期末指北｜毛概</h1><h2 id="写在最前-✍️"><a href="#写在最前-✍️" class="headerlink" title="写在最前 ✍️"></a>写在最前 ✍️</h2><p>本文记录了一些 《<strong>毛概</strong>》课程的 <strong>主要知识点</strong>，供有需求的同学们学习使用。</p><p><strong>教材版本</strong>：《毛泽东思想和中国特色社会主义理论体系概论》（2023版和2021版）</p><p>❗️ 本博客仅涵盖一些主要知识点，适合 <strong>有一定基础</strong> 的同学 <strong>搭配教材</strong> 使用，<strong>非常不建议只看博客学习</strong>❗️</p><hr><h2 id="题目类型-☘️"><a href="#题目类型-☘️" class="headerlink" title="题目类型 ☘️"></a>题目类型 ☘️</h2><table><thead><tr><th align="center">题目类型</th><th align="center">数量</th><th align="center">总分</th></tr></thead><tbody><tr><td align="center">单选题</td><td align="center">5题/2分</td><td align="center">10分</td></tr><tr><td align="center">多选题</td><td align="center">10题/2分</td><td align="center">20分</td></tr><tr><td align="center">简答题</td><td align="center">2题/20分</td><td align="center">40分</td></tr><tr><td align="center">论述题（二选一）</td><td align="center">1题/30分</td><td align="center">30分</td></tr></tbody></table><p><strong>简答题</strong> 的回答中，概念要表述准确，采分点要答到。</p><p><strong>论述题</strong> 的回答可以做延展，要分点阐述，尽量字多：</p><blockquote><p>「<strong>马克思主义中国化时代化的两个结合</strong>」非常重要，需要在论述题中出现❗️</p></blockquote><hr><h2 id="章节内容-📝"><a href="#章节内容-📝" class="headerlink" title="章节内容 📝"></a>章节内容 📝</h2><h3 id="2023版内容"><a href="#2023版内容" class="headerlink" title="2023版内容"></a>2023版内容</h3><table><thead><tr><th align="center">章节</th><th align="center">内容</th><th align="center">重要程度</th></tr></thead><tbody><tr><td align="center">导论</td><td align="center">马克思主义中国化时代化</td><td align="center">重要</td></tr><tr><td align="center">第一章</td><td align="center"><strong>毛泽东思想</strong></td><td align="center">重要</td></tr><tr><td align="center">第二章-第五章</td><td align="center">社会主义发展历史</td><td align="center">有时间看</td></tr><tr><td align="center">第六章</td><td align="center"><strong>邓小平理论</strong></td><td align="center">重要</td></tr></tbody></table><h3 id="2021版内容"><a href="#2021版内容" class="headerlink" title="2021版内容"></a>2021版内容</h3><table><thead><tr><th align="center">章节</th><th align="center">内容</th><th align="center">重要程度</th></tr></thead><tbody><tr><td align="center">第八章</td><td align="center"><strong>习近平新时代社会主义思想</strong> 导论</td><td align="center">重要</td></tr><tr><td align="center">第十章</td><td align="center">「<strong>五位一体</strong>」总布局</td><td align="center">重要</td></tr><tr><td align="center">第十一章</td><td align="center">「<strong>四个全面</strong>」战略布局</td><td align="center">重要</td></tr><tr><td align="center">第十二章</td><td align="center">实现中华民族伟大复兴的 <strong>重要保障</strong></td><td align="center">重要</td></tr></tbody></table><hr><h2 id="段首语-🍉"><a href="#段首语-🍉" class="headerlink" title="段首语 🍉"></a>段首语 🍉</h2><p>以下句子可以用在论述题的段首：</p><ul><li>一个民族要走在时代前列，就一刻不能 <strong>理论思维</strong>，一刻不能没有 <strong>思想指引</strong>。<strong>马克思主义</strong> 是我们认识世界、把握规律、追求真理、改造世界的强大思想武器。<ul><li>历史和现实反复证明，马克思主义只有 <strong>中国化</strong> <strong>时代化</strong> 才能在中国大地上闪耀真理光芒，也只有 <strong>中国化时代化</strong> 才能救中国、发展中国，才能实现中华民族的伟大复兴。</li></ul></li><li><strong>思想理论</strong> 是 <strong>社会变革</strong> 的先导。<ul><li>面对中国近代以后山河破碎、内忧外患的深重灾难，以毛泽东同志为主要代表的中国共产党人，胸怀远大理想，脚踏中国大地，开马克思主义中国化时代化之先河，创立了毛泽东思想。</li></ul></li><li><strong>实践</strong> 没有止境，<strong>理论创新</strong> 也没有止境。</li></ul><hr><h2 id="知识点详解-🧑🏻‍💻"><a href="#知识点详解-🧑🏻‍💻" class="headerlink" title="知识点详解 🧑🏻‍💻"></a>知识点详解 🧑🏻‍💻</h2><h3 id="导论：马克思主义中国化时代化"><a href="#导论：马克思主义中国化时代化" class="headerlink" title="导论：马克思主义中国化时代化"></a>导论：马克思主义中国化时代化</h3><h4 id="一、马克思主义中国化时代化的提出"><a href="#一、马克思主义中国化时代化的提出" class="headerlink" title="一、马克思主义中国化时代化的提出"></a>一、马克思主义中国化时代化的提出</h4><ul><li>1917年11月7日，<strong>十月革命</strong> 一声炮响，给中国送来了 <strong>马克思列宁主义</strong>。</li><li>1938年，毛泽东在党的六届六中全会上作了《<strong>论新阶段</strong>》的报告，标志着「<strong>马克思主义的中国化</strong>」这一 <strong>命题的正式提出</strong>。</li><li><strong>党的十八大</strong> 以来，以 <strong>习近平同志</strong> 为核心的党中央明确提出要不断推进马克思主义中国化时代化。</li></ul><h4 id="二、马克思主义中国化时代化的内涵-🚀"><a href="#二、马克思主义中国化时代化的内涵-🚀" class="headerlink" title="二、马克思主义中国化时代化的内涵 🚀"></a>二、马克思主义中国化时代化的内涵 🚀</h4><p>🍉 <strong>两个结合</strong>：马克思主义中国化时代化，就是 <strong>立足中国国情和时代特点</strong>，坚持把 <strong>马克思主义基本原理</strong> 同 <strong>中国具体实际相结合</strong>、同 <strong>中华优秀传统文化</strong> 相结合。</p><h4 id="三、马克思主义中国化时代化理论成果"><a href="#三、马克思主义中国化时代化理论成果" class="headerlink" title="三、马克思主义中国化时代化理论成果"></a>三、马克思主义中国化时代化理论成果</h4><p>在 <strong>马克思主义中国化时代化的历史进程</strong> 中，产生了毛泽东思想、邓小平理论、”三个代表“重要思想、科学发展观、习近平新时代中国特色社会主义思想。</p><p><strong>中国共产党</strong> 以马克思列宁主义、毛泽东思想、邓小平理论、”三个代表“重要思想、科学发展观、习近平新时代中国特色社会主义思想作为自己的 <strong>指导思想和行动指南</strong>。</p><hr><h3 id="毛泽东思想"><a href="#毛泽东思想" class="headerlink" title="毛泽东思想"></a>毛泽东思想</h3><h4 id="一、毛泽东思想的形成发展"><a href="#一、毛泽东思想的形成发展" class="headerlink" title="一、毛泽东思想的形成发展"></a>一、毛泽东思想的形成发展</h4><ul><li><strong>初步形成（土地革命战争时期）</strong><ul><li><strong>毛泽东</strong> 提出并深入阐述的 <strong>农村包围城市、武装夺取政权</strong> 的思想，对红军和农村革命根据地的建立、巩固和发展发挥着根本指导作用，标志着 <strong>毛泽东思想的初步形成</strong>。</li></ul></li><li><strong>走向成熟（抗日战争时期）</strong> <ul><li><strong>1945年党的七大</strong> 通过的《中国共产党章程》→ 标志着把 <strong>毛泽东思想</strong> 确立为 <strong>党必须长期坚持的指导思想</strong> 。</li></ul></li><li><strong>继续发展（解放战争时期和中华人民共和国成立后）</strong></li></ul><h5 id="几本著作-📚"><a href="#几本著作-📚" class="headerlink" title="几本著作 📚"></a>几本著作 📚</h5><ul><li><p><strong>形成阶段</strong></p><ul><li>《中国社会各阶级的分析》、《湖南农民运动考察报告》</li><li>《中国的红色政权为什么能够存在？》、《井冈山的斗争》《星星之火，可以燎原》《反对本本主义》</li></ul></li><li><p><strong>成熟阶段</strong> </p><ul><li>《实践论》和《矛盾论》系统分析了党内「左」和「右」的错误的思想根源。</li><li>《共产党发刊词》、《中国革命和中国共产党》《新民主主义论》《改造我们的学习》《论联合政府》中提出了新民主主义革命的总路线。</li></ul></li><li><p><strong>继续发展阶段</strong></p><ul><li>《在中国共产党第七届中央委员会第二次全体会议上的报告》《论人民民主专政》《论十大关系》《关于正确处理人民内部矛盾的问题》</li></ul></li></ul><p><strong>补充</strong>：遵义会议</p><p>在党的历史上，<strong>遵义会议</strong>（1935年1月）是一次具有伟大转折意义的重要会议。</p><p>这次会议在事实上 <strong>确立了毛泽东同志在党中央和红军的领导地位</strong>，开始确立以毛泽东同志为主要代表的马克思主义正确路线在党中央的领导地位，开始形成以毛泽东同志为核心的党的第一代中央领导集体，开启了党独立自主解决中国革命实际问题的新阶段，在最危急关头挽救了党、挽救了红军、挽救了中国革命。</p><hr><h4 id="二、毛泽东思想的主要内容"><a href="#二、毛泽东思想的主要内容" class="headerlink" title="二、毛泽东思想的主要内容"></a>二、毛泽东思想的主要内容</h4><ul><li><strong>新民主主义革命理论</strong><ul><li>毛泽东创立了「无产阶级领导的，以工农阶级为基础，人民大众的，反对帝国主义、封建主义和官僚资本主义」的新民主主义革命理论</li><li>中国革命的 <strong>首要对象</strong> 是 <strong>帝国主义</strong></li><li><strong>三大法宝</strong>（统一战线，武装斗争，党的建设）⭐️</li></ul></li><li><strong>社会主义革命和社会主义建设理论</strong><ul><li>采取社会主义工业化和社会主义改造并举的方针</li></ul></li><li><strong>革命军队建设和军事战略的理论</strong><ul><li>把以农民为主的军队建设成一只无产阶级性质的、具有严格纪律的、同人民保持亲密联系的新型人民军队</li></ul></li><li><strong>政策和策略的理论</strong><ul><li>必须根据政治新式、阶级关系和实际情况及其变化制定党的政策，把原则性和灵活性结</li></ul></li><li><strong>思想政治工作和文化工作的理论</strong><ul><li>掌握思想教育，是团结全党进行伟大政治斗争的中心环节</li></ul></li><li><strong>党的建设理论</strong><ul><li>理论和实践相结合，和人民群众紧密地联系在一起，以及自我批评的作风</li></ul></li></ul><hr><h4 id="三、毛泽东思想活的灵魂"><a href="#三、毛泽东思想活的灵魂" class="headerlink" title="三、毛泽东思想活的灵魂"></a>三、毛泽东思想活的灵魂</h4><blockquote><p>❗️❗️❗️该节内容为 <strong>重中之重の重中之重</strong>❗️❗️❗️</p></blockquote><p><strong>实事求是</strong>、<strong>群众路线</strong>、<strong>独立自主</strong> 是 <strong>毛泽东思想活的灵魂</strong>。</p><ul><li><strong>实事求是</strong><ul><li><strong>概念</strong><ul><li>实事求是，是毛泽东思想的 <strong>基本点</strong>，毛泽东思想的 <strong>精髓</strong>。</li><li>实事求是，就是「<strong>一切从实际出发，理论联系实际，坚持在实践中检验真理和发展真理</strong>」。</li><li><strong>科学含义</strong>：他指出：「实事」就是客观存在着的一切事物，「是」就是客观事物的内部联系，即规律性，「求」就是我们去研究。</li><li>「<strong>延安整风</strong>」和「<strong>党的七大</strong>」→ 实事求是的思想路线在全党得到了确立。</li></ul></li><li><strong>具体做法</strong><ul><li>坚持实事求是，就要深入了解事物的本来面貌，把握事物内在必然联系，按照客观规律办事。</li><li>坚持实事求是，就要清醒认识和正确把握我国的基本国情。</li><li>坚持实事求是，就要不断推进实践基础上的理论创新。</li></ul></li><li><strong>新时代意义</strong><ul><li>实事求是，是马克思主义的根本观点，是中国共产党人认识世界、改造世界的根本要求，是我们党的基本思想方法、工作方法、领导方法。不论过去、现在和将来，我们都要坚持一切从实际出发，理论联系实际，在实践中检验真理和发展真理。</li></ul></li></ul></li><li><strong>群众路线</strong><ul><li><strong>概念</strong><ul><li>群众路线，就是一切为了群众，一切依靠群众，从群众中来，到群众中去，把党的正确主张变为群众的自觉行动。</li><li>群众路线本质上体现的是「马克思主义 <strong>关于人民群众是历史的创造者</strong>」这一 <strong>基本原理</strong>。</li></ul></li><li><strong>具体做法</strong><ul><li>坚持群众路线，就要坚持人民是推动历史发展的 <strong>根本力量</strong>。</li><li>坚持群众路线，就要坚持全心全意为人民服务的 <strong>根本宗旨</strong>。</li><li>坚持群众路线，保持党同人民群众的 <strong>血肉联系</strong>。</li></ul></li></ul></li><li><strong>独立自主</strong><ul><li><strong>概念</strong><ul><li>独立自主，就是坚持独立思考，走自己的路，就是坚定不移地维护民族独立、捍卫国家主权，把立足点放在依靠自己力量的基础上，同时积极争取外援，开展国际经济文化交流，学习外国一切对我们有益的先进事物。</li><li>坚持独立自主原则，是毛泽东针对党内存在的「左」倾教条主义倾向，从中国革命遭受挫折的教训中提出的正确思想主张。</li><li>独立自主是 <strong>中华民族精神之魂</strong>。</li></ul></li><li><strong>具体做法</strong><ul><li>坚持独立自主，就要坚持中国的事情必须由中国人民自己做主张。</li><li>坚持独立自主，就要坚持独立自主的和平外交政策，走和平发展道路。</li></ul></li></ul></li></ul><hr><h4 id="四、毛泽东思想的历史地位"><a href="#四、毛泽东思想的历史地位" class="headerlink" title="四、毛泽东思想的历史地位"></a>四、毛泽东思想的历史地位</h4><ul><li><strong>马克思主义中国化时代化的第一个重大理论成果</strong><ul><li>毛泽东思想是马克思主义中国化时代 <strong>第一次历史性飞跃</strong> 的理论成果</li></ul></li><li><strong>中国革命和建设的科学指南</strong><ul><li>毛泽东思想是被实践证明了的关于中国革命和建设的正确的理论原则和经验总结。</li></ul></li><li><strong>中国共产党和中国人民宝贵的精神财富</strong></li></ul><hr><h3 id="邓小平理论"><a href="#邓小平理论" class="headerlink" title="邓小平理论"></a>邓小平理论</h3><h4 id="一、邓小平理论的形成"><a href="#一、邓小平理论的形成" class="headerlink" title="一、邓小平理论的形成"></a>一、邓小平理论的形成</h4><ul><li><strong>时代背景</strong>：和平与发展成为时代主题</li><li><strong>历史根据</strong>：社会主义建设的经验教训</li><li><strong>现实依据</strong>：改革开放和现代化建设的实践</li></ul><table><thead><tr><th align="center">时间</th><th align="center">会议</th><th align="center">内容</th></tr></thead><tbody><tr><td align="center">1978年12月</td><td align="center">党的十一届三中全会</td><td align="center">重新确定了解放思想、实事求是的思想路线</td></tr><tr><td align="center">1982年</td><td align="center">党的十二大</td><td align="center">提出「<strong>中国特色社会主义</strong>」</td></tr><tr><td align="center">1987年</td><td align="center">党的十三大</td><td align="center">「邓小平理论」<strong>轮廓的形成</strong></td></tr><tr><td align="center">1992年</td><td align="center">南方谈话</td><td align="center">对 <strong>社会主义本质</strong> 做出了总结性的理论概括</td></tr><tr><td align="center">1997年</td><td align="center">党的十五大</td><td align="center">「邓小平理论」<strong>正式提出</strong></td></tr></tbody></table><blockquote><p><strong>社会主义的本质</strong>，是「解放生产力，发展生产力，消灭剥削，消除两极分化，最终达到共同富裕」。</p></blockquote><hr><h4 id="二、邓小平理论首要的基本的理论问题"><a href="#二、邓小平理论首要的基本的理论问题" class="headerlink" title="二、邓小平理论首要的基本的理论问题"></a>二、邓小平理论首要的基本的理论问题</h4><ul><li><strong>建设什么样的社会主义？</strong></li><li><strong>怎样建设社会主义？</strong></li></ul><hr><h4 id="三、邓小平理论的精髓"><a href="#三、邓小平理论的精髓" class="headerlink" title="三、邓小平理论的精髓"></a>三、邓小平理论的精髓</h4><blockquote><p>精髓：对于理论而言，指的是能使这一理论得以形成和发展并贯穿始终，同时又体现在这一理论中最本质的东西</p></blockquote><p>邓小平理论的精髓：<strong>解放思想，实事求是</strong>。</p><hr><h4 id="四、邓小平理论的主要内容"><a href="#四、邓小平理论的主要内容" class="headerlink" title="四、邓小平理论的主要内容"></a>四、邓小平理论的主要内容</h4><ul><li><strong>社会主义初级阶段理论</strong><ul><li>我国 <strong>正处于并将长期处于</strong> 社会主义初级阶段</li><li><strong>党的十三大</strong> 系统地阐述了社会主义初级阶段的 <strong>科学内涵</strong></li><li>社会主义初级阶段的主要矛盾是「人民日益增长的物质文化需要同落后社会生产之间的矛盾」</li></ul></li><li><strong>社会主义初级阶段的基本路线</strong>（党的十三大）<ul><li>领导和团结全国各族人民，以经济建设为中心，坚持四项基本原则，坚持改革开放，自力更生，艰苦创业，为把我国建设成为富强、民主、文明的社会主义现代化国家而奋斗。（一个中心，两个基本点）</li><li><strong>经济建设为中心</strong> → <strong>兴国之要</strong></li><li><strong>四项基本原则</strong> → <strong>立国之本</strong>，党和国家生存发展的 <strong>政治基石</strong></li><li><strong>改革开放</strong> → <strong>强国之路</strong>，党和国家发展进步的 <strong>活力源泉</strong></li></ul></li><li><strong>社会主义根本任务的理论</strong><ul><li>社会主义的根本任务 是 <strong>发展生产力</strong></li></ul></li><li><strong>分三步走基本实现现代化的发展战略</strong></li><li><strong>社会主义改革开放理论</strong><ul><li>改革是社会主义社会发展的 <strong>直接动力</strong></li></ul></li><li><strong>社会主义市场经济理论</strong><ul><li>邓小平提出 <strong>社会主义也可以搞市场经济</strong> 的思想</li></ul></li><li><strong>两手抓，两手都要硬</strong><ul><li><strong>社会主义精神文明</strong> 是社会主义的重要特征，社会主义发展应实现 <strong>物质文明</strong> 与 <strong>精神文明</strong> 的共同进步</li></ul></li><li>「<strong>一国两制</strong>」与祖国统一<ul><li>邓小平在坚持四项基本原则的基础上，从中国的实际出发提出的实现祖国和平统一的伟大构想</li></ul></li><li><strong>中国特色社会主义外交和国际战略</strong><ul><li><strong>和平</strong> 与 <strong>发展</strong> 是当今世界的两大主题（党的十三大）</li></ul></li><li><strong>党的建设理论</strong><ul><li>建设中国特色社会主义，关键在于坚持、加强和改善党的领导</li></ul></li></ul><hr><h4 id="五、邓小平理论的历史地位"><a href="#五、邓小平理论的历史地位" class="headerlink" title="五、邓小平理论的历史地位"></a>五、邓小平理论的历史地位</h4><ul><li><strong>马克思列宁主义、毛泽东思想的继承和历史发展</strong><ul><li>邓小平理论坚持解放思想、实事求是，在新的实践基础上既继承前人又突破陈规，开拓了马克思主义的新境界</li></ul></li><li><strong>中国特色社会主义理论体系的开篇之作</strong><ul><li>科学回答了建设中国特色社会主义的一系列基本问题，成功 <strong>开创了</strong> 中国特色社会主义</li><li>邓小平开创性地提出了社会主义本质、社会主义初级阶段、党的基本路线、改革开放、「一国两制」等一些列具有浓厚中国特色的新概念新范畴，建构了中国特色社会主义理论的基本框架</li></ul></li><li><strong>改革开放和社会主义现代化建设的科学指南</strong><ul><li>邓小平理论指导了改革开放的伟大实践</li></ul></li></ul><hr><h3 id="习近平新时代中国特色社会主义思想"><a href="#习近平新时代中国特色社会主义思想" class="headerlink" title="习近平新时代中国特色社会主义思想"></a>习近平新时代中国特色社会主义思想</h3><h4 id="一、社会历史条件"><a href="#一、社会历史条件" class="headerlink" title="一、社会历史条件"></a>一、社会历史条件</h4><ul><li><strong>中国特色社会主义进入新时代</strong><ul><li>这是我国发展新的历史方位</li></ul></li><li><strong>世界正经历百年未有之大变局</strong><ul><li>世界经济中心在变，科技与产业在变，世界政治格局在变</li></ul></li><li><strong>中华民族伟大复兴正处于关键时期</strong><ul><li>经济已由高速增长阶段转向高质量发展阶段</li></ul></li></ul><p><strong>习近平新时代中国特色社会主义思想</strong> 是在中国特色社会主义进入新时代、世界正经历百年未有之大变局、中华民族伟大复兴正处于关键时期的社会历史条件中应运而生并不断丰富发展的科学理论。</p><hr><h4 id="二、中国特色社会主义思想的时代课题"><a href="#二、中国特色社会主义思想的时代课题" class="headerlink" title="二、中国特色社会主义思想的时代课题"></a>二、中国特色社会主义思想的时代课题</h4><ul><li>新时代 <strong>坚持和发展什么样的</strong> <strong>中国特色社会主义</strong></li><li>新时代 <strong>怎样坚持和发展</strong> 中国特色社会主义</li><li>新时代 <strong>建设什么样的</strong> <strong>社会主义现代化强国</strong></li><li>新时代 <strong>怎样建设</strong> 社会主义现代化强国</li><li>新时代 <strong>建设什么样的</strong> <strong>长期执政的马克思主义政党</strong></li><li>新时代 <strong>怎样建设</strong> 长期执政的马克思主义政党</li></ul><hr><h4 id="三、习近平新时代中国特色社会主义思想的核心要义"><a href="#三、习近平新时代中国特色社会主义思想的核心要义" class="headerlink" title="三、习近平新时代中国特色社会主义思想的核心要义"></a>三、习近平新时代中国特色社会主义思想的核心要义</h4><p><strong>坚持和发展中国特色社会主义</strong>，是习近平新时代中国特色社会主义思想的 <strong>核心要义</strong>。</p><blockquote><p>党的十九大报告指出，中国特色社会主义进入新时代，我国社会 <strong>主要矛盾</strong> 已经转化为「人民日益增长的美好生活需要和不平衡不充分的发展之间的矛盾」</p></blockquote><hr><h4 id="四、习近平新时代中国特色社会主义思想的主要内容"><a href="#四、习近平新时代中国特色社会主义思想的主要内容" class="headerlink" title="四、习近平新时代中国特色社会主义思想的主要内容"></a>四、习近平新时代中国特色社会主义思想的主要内容</h4><p>党的十九大、十九届六中全会提出的「<strong>十个明确</strong>」「<strong>十四个坚持</strong>」、「<strong>十三个方面成就</strong>」概括了习近平新时代中国特色社会主义思想的主要内容，必须长期坚持井不断丰富发展。</p><p><strong>十个明确</strong></p><blockquote><p>「十个明确」的深刻内涵和重大意义：<a href="http://www.hebdx.com/2022-10/05/content_8879480.htm">http://www.hebdx.com/2022-10/05/content_8879480.htm</a></p></blockquote><ul><li>第一个明确：明确中国特色社会主义最本质的特征是中国共产党领导，中国特色社会主义制度的最大优势是中国共产党领导，中国共产党是最高政治领导力量，全党必须增强“四个意识”、坚定“四个自信”、做到“两个维护”。该明确深刻揭示了党的领导与中国特色社会主义的相互关系，标志着我们党对马克思主义建党学说和社会主义发展规律的认识达到新的高度。</li><li>第二个明确：明确坚持和发展中国特色社会主义，总任务是实现社会主义现代化和中华民族伟大复兴，在全面建成小康社会的基础上，分两步走在21世纪中叶建成富强民主文明和谐美丽的社会主义现代化强国，以中国式现代化推进中华民族伟大复兴。该明确提出了坚持和发展中国特色社会主义总任务及步骤，阐明了以中国式现代化推进中华民族伟大复兴的战略逻辑。</li><li>第三个明确：明确新时代我国社会主要矛盾是人民日益增长的美好生活需要和不平衡不充分的发展之间的矛盾，必须坚持以人民为中心的发展思想，发展全过程人民民主，推动人的全面发展、全体人民共同富裕取得更为明显的实质性进展。该明确提出了新时代我国社会主要矛盾是什么，如何解决，充分体现了我们党人民至上的价值取向。</li><li>第四个明确：明确中国特色社会主义事业总体布局是经济建设、政治建设、文化建设、社会建设、生态文明建设“五位一体”，战略布局是全面建设社会主义现代化国家、全面深化改革、全面依法治国、全面从严治党“四个全面”。该明确从全局上确立了新时代坚持和发展中国特色社会主义的战略部署，体现了我们党对中国特色社会主义建设规律和人类社会发展规律的新认识。</li><li>第五个明确：明确全面深化改革总目标是完善和发展中国特色社会主义制度、推进国家治理体系和治理能力现代化。该明确规定了全面深化改革的根本方向和目的。</li><li>第六个明确：明确全面推进依法治国总目标是建设中国特色社会主义法治体系、建设社会主义法治国家。该明确既规定了全面推进依法治国的性质和方向，又突出了全面推进依法治国的工作重点和总抓手。</li><li>第七个明确：明确必须坚持和完善社会主义基本经济制度，使市场在资源配置中起决定性作用，更好发挥政府作用，把握新发展阶段，贯彻创新、协调、绿色、开放、共享的新发展理念，加快构建以国内大循环为主体、国内国际双循环相互促进的新发展格局，推动高质量发展，统筹发展和安全。该明确作为习近平经济思想的基本内容，集中体现了以习近平同志为核心的党中央对我国经济发展规律的深刻认识和科学运用，丰富和发展了中国特色社会主义政治经济学。</li><li>第八个明确：明确党在新时代的强军目标是建设一支听党指挥、能打胜仗、作风优良的人民军队，把人民军队建设成为世界一流军队。该明确体现了习近平强军思想的核心内容，指引了新时代强军发展之路，揭示新时代强军胜战之道。</li><li>第九个明确：明确中国特色大国外交要服务民族复兴、促进人类进步，推动建设新型国际关系，推动构建人类命运共同体。该明确展现了习近平外交思想，指出了我国外交的方向和定位，体现了新时代中国特色大国外交的全球视野、世界胸怀与历史使命。</li><li>第十个明确：明确全面从严治党的战略方针，提出新时代党的建设总要求，全面推进党的政治建设、思想建设、组织建设、作风建设、纪律建设，把制度建设贯穿其中，深入推进反腐败斗争，落实管党治党政治责任，以伟大自我革命引领伟大社会革命。该明确与第一个明确首尾呼应、相得益彰，提出全面从严治党战略方针，指出新时代党的建设的总要求和全面推进党的建设保障措施。</li></ul><p><strong>十四个坚持</strong></p><ul><li>坚持党对一切工作的领导</li><li>坚持以人民为中心</li><li>坚持全面深化改革</li><li>坚持新发展理念</li><li>坚持人民当家作主</li><li>坚持全面依法治国</li><li>坚持社会主义核心价值体系</li><li>坚持在发展中保障和改善民生</li><li>坚持人与自然和谐共生</li><li>坚持总体国家安全观</li><li>坚持党对人民军队的绝对领导</li><li>坚持「一国两制」和推进祖国统一</li><li>坚持推动构建人类命运共同体</li><li>坚持全面从严治党</li></ul><p><strong>十三个方面成就</strong></p><p><img src="https://ricky-typora-notes.oss-cn-hangzhou.aliyuncs.com/image-20230610135034935.png"></p><hr><h4 id="五、习近平新时代中国特色社会主义思想的理论特质"><a href="#五、习近平新时代中国特色社会主义思想的理论特质" class="headerlink" title="五、习近平新时代中国特色社会主义思想的理论特质"></a>五、习近平新时代中国特色社会主义思想的理论特质</h4><ul><li><strong>秉持人民至上</strong><ul><li><strong>人民至上</strong> 是习近平新时代中国特色社会主义思想的 <strong>根本立场</strong></li></ul></li><li><strong>彰显历史自觉</strong><ul><li>历史有其发展规律，只有把握住历史发展大势，人类社会才能更好前进</li></ul></li><li><strong>坚持实事求是</strong>：<ul><li>坚持理论联系实际来制定和形成指导实践发展的正确路线、方针、政策</li></ul></li><li><strong>突出问题导向</strong><ul><li>问题是时代的声音，坚持问题导向是马克思主义的鲜明特点</li></ul></li><li><strong>强化战略思维</strong><ul><li>战略思维是高瞻远瞩、统揽全局，善于把握事物发展总体趋势和方向的思维方法。</li></ul></li><li><strong>发扬斗争精神</strong><ul><li>敢于斗争，敢于胜利，是中国共产党不可战胜的强大精神力量</li></ul></li></ul><hr><h4 id="六、习近平新时代中国特色社会主义的历史地位"><a href="#六、习近平新时代中国特色社会主义的历史地位" class="headerlink" title="六、习近平新时代中国特色社会主义的历史地位"></a>六、习近平新时代中国特色社会主义的历史地位</h4><ul><li><strong>当代中国马克思主义、21世纪马克思主义</strong></li><li><strong>实现中华民族伟大复兴的行动指南</strong><ul><li><strong>党的十九大</strong> 确立习近平新时代中国特色社会主义思想为党的指导思想，十三届全国人大一次会议把这一思想写入宪法。</li></ul></li><li><strong>建设美好世界的中国智慧和中国方案</strong></li></ul><hr><h3 id="「五位一体」总体布局"><a href="#「五位一体」总体布局" class="headerlink" title="「五位一体」总体布局"></a>「五位一体」总体布局</h3><p>坚持和发展新时代中国特色社会主义，必须统筹推进 <strong>经济建设</strong>、<strong>政治建设</strong>、<strong>文化建设</strong>、<strong>社会建设</strong>、<strong>生态文明建设</strong>「五位一体」总体布局。</p><h4 id="一、实现经济高质量发展"><a href="#一、实现经济高质量发展" class="headerlink" title="一、实现经济高质量发展"></a>一、实现经济高质量发展</h4><hr><h4 id="二、发展社会主义民主政治"><a href="#二、发展社会主义民主政治" class="headerlink" title="二、发展社会主义民主政治"></a>二、发展社会主义民主政治</h4><hr><h4 id="三、建设社会主义文化强国"><a href="#三、建设社会主义文化强国" class="headerlink" title="三、建设社会主义文化强国"></a>三、建设社会主义文化强国</h4><hr><h4 id="四、加强以民生为重点的社会建设"><a href="#四、加强以民生为重点的社会建设" class="headerlink" title="四、加强以民生为重点的社会建设"></a>四、加强以民生为重点的社会建设</h4><ul><li><strong>增进民生福祉，提高人民生活品质</strong><ul><li>办好人民的教育</li><li>完善分配制度</li><li>实施就业优先战略</li><li>健全社会保障体系</li><li>推进健康中国建设</li></ul></li><li><strong>完善社会治理体系</strong><ul><li>健全共建共治共享的社会治理制度，提升社会治理效能</li><li>加快推进市域社会治理现代化，提高市域社会治理能力</li></ul></li></ul><hr><h4 id="五、建设美丽中国"><a href="#五、建设美丽中国" class="headerlink" title="五、建设美丽中国"></a>五、建设美丽中国</h4><hr><h3 id="「四个全面」战略布局"><a href="#「四个全面」战略布局" class="headerlink" title="「四个全面」战略布局"></a>「四个全面」战略布局</h3><h4 id="一、全面建设社会主义现代化国家"><a href="#一、全面建设社会主义现代化国家" class="headerlink" title="一、全面建设社会主义现代化国家"></a>一、全面建设社会主义现代化国家</h4><p><strong>全面建设社会主义现代化国家</strong> 的目标任务是「到 2035 年基本实现社会主义现代化，到 <strong>本世纪中叶</strong> 把我国建成富强民主文明和谐美丽的社会主义现代化强国」。</p><ul><li>中国式现代化是社会主义现代化，开启了后发国家走向现代化的崭新道路</li><li>人口规模巨大，人民共同富裕，物质文明和精神文明相协调，人与自然和谐共生，走和平发展道路的现代化</li></ul><hr><h4 id="二、全面深化改革"><a href="#二、全面深化改革" class="headerlink" title="二、全面深化改革"></a>二、全面深化改革</h4><p><strong>全面深化改革</strong> 的总目标是坚持和完善中国特色社会主义制度，推进国家治理体系和治理能力现代化。</p><ul><li>必须始终坚持方向不变，立场不移，原则不改</li><li>全面深化改革必须坚持和完善中国特色社会主义制度和国家治理体系</li><li>全面深化改革必须始终坚持人民立场，坚持以人民为中心的改革价值取向</li><li>全面深化改革必须坚持党对改革的集中统一领导</li></ul><hr><h4 id="三、全面依法治国"><a href="#三、全面依法治国" class="headerlink" title="三、全面依法治国"></a>三、全面依法治国</h4><p><strong>全面依法治国</strong> 总目标是建设中国特色社会主义法治体系，建设社会主<br>义法治国家。</p><ul><li>坚持习近平法治思想</li><li>走中国特色社会主义法治道路</li><li>深化依法治国实践</li></ul><hr><h4 id="四、全面从严治党"><a href="#四、全面从严治党" class="headerlink" title="四、全面从严治党"></a>四、全面从严治党</h4><p><strong>全面从严治党</strong>，要以党的政治建设为统领，抓好党的思想建设、组织<br>建设、作风建设、纪律建设，强化制度的根本保障作用，巩固发展反腐败<br>斗争压倒性胜利。</p><ul><li>全面从严治党是伟大的自我革命</li><li>新时代党的建设总要求</li><li>廉政建设和反腐败斗争是重中之重</li><li>全面从严治党的重点工作，政治建设，思想建设和制度建设</li></ul><p><strong>「四个全面」的战略布局关系</strong></p><p><img src="https://ricky-typora-notes.oss-cn-hangzhou.aliyuncs.com/image-20230610140319548.png"></p><hr><h3 id="实现中华民族伟大复兴的重要保障"><a href="#实现中华民族伟大复兴的重要保障" class="headerlink" title="实现中华民族伟大复兴的重要保障"></a>实现中华民族伟大复兴的重要保障</h3><h4 id="一、坚持总体国家安全"><a href="#一、坚持总体国家安全" class="headerlink" title="一、坚持总体国家安全"></a>一、坚持总体国家安全</h4><p><strong>国家安全</strong> 是安邦定国的 <strong>重要基石</strong>。</p><p>要坚持总体国家安全观，走中国特色国家安全道路，着力防范化解重大风险。</p><hr><h4 id="二、加快国防和军队现代化"><a href="#二、加快国防和军队现代化" class="headerlink" title="二、加快国防和军队现代化"></a>二、加快国防和军队现代化</h4><p><strong>习近平强军思想</strong> 是全面推进新时代强军事业的 <strong>科学指南和行动纲领</strong>。</p><p>党在新时代的强军目标是建设一支听党指挥、能打胜伏、作风优良的人民军队，把人民军队建设成为世界一流军队。</p><hr><h4 id="三、坚持一国两制，推进祖国统一"><a href="#三、坚持一国两制，推进祖国统一" class="headerlink" title="三、坚持一国两制，推进祖国统一"></a>三、坚持一国两制，推进祖国统一</h4><p>「一国两制」是中国的一个伟大创举，是实现祖国完全统一的最佳方式。要全面准确贯彻「一国两制」方针，确保「一国两制」实践在香港澳门行稳致远；要坚持一个中国原则和「九二共识」，推动两岸关系和平发展，推进祖国和平统一进程。</p>]]></content>
      
      
      <categories>
          
          <category> 毛概 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 期末指北 </tag>
            
            <tag> 毛概 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>期末指北｜人工智能（三）</title>
      <link href="/2023/06/07/qi-mo-zhi-bei-ren-gong-zhi-neng-san/"/>
      <url>/2023/06/07/qi-mo-zhi-bei-ren-gong-zhi-neng-san/</url>
      
        <content type="html"><![CDATA[<h1 id="【期末指北】人工智能导论（feat-ChatGPT）"><a href="#【期末指北】人工智能导论（feat-ChatGPT）" class="headerlink" title="【期末指北】人工智能导论（feat.ChatGPT）"></a>【期末指北】人工智能导论（feat.ChatGPT）</h1><h2 id="写在最前-✍️"><a href="#写在最前-✍️" class="headerlink" title="写在最前 ✍️"></a>写在最前 ✍️</h2><p>本文记录了一些 《<strong>人工智能导论</strong>》课程的 <strong>主要知识点</strong>，供有需求的同学们学习使用。</p><p>部分内容由 <strong>ChatGPT</strong> 生成，摊主进行审核及整理。</p><p><strong>教材版本</strong>：《人工智能导论（第五版）》王万良</p><p>❗️ 本博客仅涵盖一些主要知识点，适合 <strong>有一定基础</strong> 的同学 <strong>搭配教材</strong> 使用，<strong>非常不建议只看博客学习</strong>❗️</p><hr><h2 id="第三章：确定性推理方法"><a href="#第三章：确定性推理方法" class="headerlink" title="第三章：确定性推理方法"></a>第三章：确定性推理方法</h2><h3 id="一、推理"><a href="#一、推理" class="headerlink" title="一、推理"></a>一、推理</h3><h4 id="推理概念"><a href="#推理概念" class="headerlink" title="推理概念"></a>推理概念</h4><p><strong>推理</strong>：从 <strong>初始证据</strong> 出发，按 <strong>某种策略</strong> 不断运用 <strong>知识库</strong> 中的已知知识，<strong>逐步推出结论的过程</strong> 称为推理。</p><p>在 <strong>人工智能系统</strong> 中，<strong>推理是由程序实现的</strong>，称为 <strong>推理机</strong>。</p><p><strong>已知事实</strong> 和 <strong>知识</strong> 是构成推理的两个基本要素。</p><ul><li><strong>已知事实</strong> 又称为证据，用以指出推理的出发点及推理时应该使用的知识</li><li><strong>知识</strong> 是使推理得以向前推进，并逐步达到最终目标的依据。</li></ul><blockquote><p>🍉 <strong>实际案例</strong>：在医疗诊断专家系统中，<strong>专家的经验及医学常识</strong> 以某种表示形式 <strong>存储于知识库</strong> 中。为病人诊治庆病时，<strong>推理机</strong> 就是 <strong>从存储在综合数据库中的病人症状及化验结果等初始证据</strong> 出发，按 <strong>某种搜索策略</strong> 在知识库中搜寻 <strong>可与之匹配的知识</strong>，推出某些 <strong>中间结论</strong>，然后 <strong>再以这些中间结论为证据</strong>，在知识库中搜素与之匹配的知识，推出进一步的中间结论，如此反复进行，直到 <strong>最终推出结论</strong>，即病人的病因与治疗方案为止。</p></blockquote><h4 id="推理类型"><a href="#推理类型" class="headerlink" title="推理类型"></a>推理类型</h4><p><strong>按照推出结论的途径分类</strong></p><table><thead><tr><th align="center">推理类型</th><th align="center">原理</th><th align="center">概括</th></tr></thead><tbody><tr><td align="center">演绎推理</td><td align="center">从 <strong>一般性知识</strong> 推出 <strong>某一具体情况的结论</strong></td><td align="center">一般 → 个别</td></tr><tr><td align="center">归纳推理</td><td align="center">从 <strong>足够多的事例</strong> 中 <strong>归纳</strong> 出 <strong>一般性结论</strong> 的推理</td><td align="center">个别 → 一般</td></tr><tr><td align="center">默认推理</td><td align="center">在 <strong>知识不完全</strong> 的情况下，<strong>假设某些条件已经具备</strong> 的推理</td><td align="center">/</td></tr></tbody></table><br><p><strong>按照推理所用知识的确定性分类</strong></p><table><thead><tr><th align="center">推理类型</th><th align="center">原理</th></tr></thead><tbody><tr><td align="center">确定性推理</td><td align="center">推理时 <strong>所用的知识与证据</strong> 都是 <strong>确定的</strong>，<strong>推出的结论</strong> 也是 <strong>确定的</strong></td></tr><tr><td align="center">不确定性推理</td><td align="center">推理时所用的知识与证据不都是确定的，推出的结论也是不确定的</td></tr></tbody></table><br><p><strong>按推理过程中推出的结论是否越来越接近最终目标来划分</strong></p><table><thead><tr><th align="center">推理类型</th><th align="center">原理</th></tr></thead><tbody><tr><td align="center">单调推理</td><td align="center">推理过程中，由于新知识的加入，推出的结论越来越接近最终目标</td></tr><tr><td align="center">非单调推理</td><td align="center">推理过程中，由于新知识的加入，不仅没有加强已推出的结论，反而要否定它，使推理退回到前面某一步，然后重新开始</td></tr></tbody></table><h4 id="推理方向"><a href="#推理方向" class="headerlink" title="推理方向"></a>推理方向</h4><table><thead><tr><th align="center">推理方向</th><th align="center">原理</th></tr></thead><tbody><tr><td align="center">正向推理</td><td align="center">以 <strong>已知事实作为出发点</strong></td></tr><tr><td align="center">逆向推理</td><td align="center">以 <strong>某个假设目标作为出发点</strong></td></tr><tr><td align="center">混合推理</td><td align="center">先正向后逆向、先逆向后正向</td></tr><tr><td align="center">双向推理</td><td align="center">正向推理与逆向推理同时进行，且在推理过程中的某一步骤上“<strong>碰头</strong>”的一种推理</td></tr></tbody></table><hr><h3 id="二、冲突消解策略"><a href="#二、冲突消解策略" class="headerlink" title="二、冲突消解策略"></a>二、冲突消解策略</h3><h4 id="事实与知识匹配情况"><a href="#事实与知识匹配情况" class="headerlink" title="事实与知识匹配情况"></a>事实与知识匹配情况</h4><p>在 <strong>推理过程</strong> 中，系统要不断地用当前 <strong>已知的事实</strong> 与 <strong>知识库中的知识</strong> 进行 <strong>匹配</strong>，可能发生如下三种情况</p><table><thead><tr><th align="center">匹配情况</th><th align="center">形式</th></tr></thead><tbody><tr><td align="center">恰好匹配成功</td><td align="center">一对一</td></tr><tr><td align="center">不能匹配成功</td><td align="center">无</td></tr><tr><td align="center">多种匹配成功</td><td align="center">一对多、多对多、多对一</td></tr></tbody></table><p>在第三种情况中，<strong>有多个知识匹配成功</strong>，称为 <strong>发生了冲突</strong>。</p><p>按 <strong>一定的策略</strong> 从匹配成功的 <strong>多个知识中挑出一个知识</strong> 用于当前推理的过程称为 <strong>冲突消解</strong>，解决冲突时所用的策略称为 <strong>冲突消解策略</strong>。</p><h4 id="冲突消解策略"><a href="#冲突消解策略" class="headerlink" title="冲突消解策略"></a>冲突消解策略</h4><p>目前已有多种消解冲突的策略，其 <strong>基本思想都是对知识进行排序</strong>，常用的有以下几种：</p><table><thead><tr><th align="center">类型</th><th align="center">内容</th></tr></thead><tbody><tr><td align="center">按照针对性排序</td><td align="center">优先选用针对性较强的产生式规则</td></tr><tr><td align="center">按已知事实的新鲜性排序</td><td align="center">一般把数据库中后生成的事实称为新鲜的事实</td></tr><tr><td align="center">按匹配度排序</td><td align="center">在不确定性推理中，需要计算已知事实与知识的匹配度</td></tr><tr><td align="center">按条件个数排序</td><td align="center">优先应用条件少的产生式规则，其匹配话费时间横扫</td></tr></tbody></table><hr><h3 id="三、自然演绎推理"><a href="#三、自然演绎推理" class="headerlink" title="三、自然演绎推理"></a>三、自然演绎推理</h3><h4 id="自然演绎推理概念"><a href="#自然演绎推理概念" class="headerlink" title="自然演绎推理概念"></a>自然演绎推理概念</h4><p>从一组 <strong>已知为真的事实</strong> 出发，直接运用 <strong>经典逻辑的推理规则</strong> <strong>推出结论的过程</strong> 称为 <strong>自然演绎推理</strong>。</p><p>基本的推理是 P规则、T规则、假言推理、拒取式推理等。</p><blockquote><p>具体案例请参考课本相关内容。</p></blockquote><h4 id="自然演绎推理的特点"><a href="#自然演绎推理的特点" class="headerlink" title="自然演绎推理的特点"></a>自然演绎推理的特点</h4><ul><li><strong>优点</strong> 是表达定理证明过程自然，容易理解，而且它拥有丰富的推理规则，推理过程灵活，便于在它的推理规则中嵌入领域启发式知识。</li><li><strong>缺点</strong> 是容易产生组合爆炸，推理过程得到的中间结论一般呈指数形式递增，这对于一个大的推理问题来说是十分不利的。</li></ul><hr><h3 id="四、谓词公式转化为子句集"><a href="#四、谓词公式转化为子句集" class="headerlink" title="四、谓词公式转化为子句集"></a>四、谓词公式转化为子句集</h3><h4 id="基本术语"><a href="#基本术语" class="headerlink" title="基本术语"></a>基本术语</h4><table><thead><tr><th align="center">术语</th><th align="center">概念</th></tr></thead><tbody><tr><td align="center">原子谓词公式</td><td align="center">不能再分解的命题</td></tr><tr><td align="center">文字</td><td align="center">原子谓词公式及其否定</td></tr><tr><td align="center">子句</td><td align="center">任何文字的析取式</td></tr><tr><td align="center">子句集</td><td align="center">子句构成的集合</td></tr></tbody></table><blockquote><p><strong>互补文字</strong>：$P$ 与 $\neg P$ 为互补文字。</p><p><strong>NIL</strong>：不包含任何文字的字句称为空字句，表示为 NIL。空字句不含有文字，不能被任何解释满足，所以 <strong>空字句是永假的、不可满足</strong> 的。</p></blockquote><h4 id="谓词公式转化为字句集"><a href="#谓词公式转化为字句集" class="headerlink" title="谓词公式转化为字句集"></a>谓词公式转化为字句集</h4><p>在谓词逻辑中，<strong>任何一个谓词公式</strong> 都可以<strong>通过应用等价关系及推理规则</strong> <strong>化成相应的子句集</strong>，从而能够比较容易地 <strong>判定谓词公式的不可满足性</strong>。</p><blockquote><p>该节内容通常出现在考试的计算题部分。</p><p>具体例子参考 <strong>课本例题3.2</strong> 以及 <strong>课后习题3.4</strong>。</p><p>摊主复习时，看过的一些讲解视频：</p><ul><li><a href="https://www.bilibili.com/video/BV1Fo4y177vd/?share_source=copy_web&amp;vd_source=33934722b558a5cefa750c1a9be72249">谓词公式化为子句集步骤（UP主：邝AI）</a></li><li><a href="https://www.bilibili.com/video/BV1qA4y1D75N/?share_source=copy_web&amp;vd_source=33934722b558a5cefa750c1a9be72249">谓词公式化成子句集（UP主：超凡影帝）</a></li></ul></blockquote><p>一般步骤为：</p><ul><li>消去谓词公式中的「蕴含」和「等价」符号</li><li>把否定符号移到紧靠谓词的位置上</li><li>变量标准化，重新命名变元，使每个量词采用不同的变元，从而使不同量词的约束变元有不同的名字</li><li>消去存在量词</li><li>化为前束形<ul><li>前束形 = （前缀）{母式}</li></ul></li><li>化为 Skolem 标准形<ul><li>$\left(\forall x_{1}\right)\left(\forall x_{2}\right) \cdots\left(\forall x_{n}\right) M$ （$M$ 是子句的合取式，称为 Skolem 标准形的母式）</li></ul></li><li>略去全称量词</li><li>消去合取词，把母式用子句集表示</li><li>子句变量标准化，即使每个子句中的变量符号不同</li></ul><hr><h3 id="五、鲁滨逊归结原理"><a href="#五、鲁滨逊归结原理" class="headerlink" title="五、鲁滨逊归结原理"></a>五、鲁滨逊归结原理</h3><h4 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h4><p><strong>谓词公式不可满足</strong> 的充要条件是 <strong>其子句集不可满足</strong>。</p><p>为了判定子句集的不可满足性，就需要对子句集中的子句进行判定。而为了判定一个子句的不可满足性，需要对个体域上的一切解释逐个地进行判定，只有当子句对任何非空个体域<br>上的任何一个解释都是不可满足的时候，才能判定该子句是不可满足的，这是一件非常困难的工作，要在计算机上实现其证明过程是很困难的。</p><p>1965 年鲁滨逊提出了归结原理，使机器定理证明进入应用阶段。</p><h4 id="鲁滨逊归结原理"><a href="#鲁滨逊归结原理" class="headerlink" title="鲁滨逊归结原理"></a>鲁滨逊归结原理</h4><p><strong>鲁滨逊归结原理</strong> 又称为消解原理，是鲁滨逊提出的一种<strong>证明子句集不可满足性</strong>，从而实现定理证明的一种理论及方法，它是机器定理证明的基础。</p><p><strong>基本方法</strong></p><ul><li>将要证明的定理 <strong>表示为谓词公式</strong></li><li>将其 <strong>转化为子句集</strong></li><li>再进行归结，一旦出现 <strong>空子句</strong>，则定理得证。</li></ul><blockquote><p>该节内容通常出现在考试的计算题部分。</p><p>具体例子参考 <strong>课本例题</strong> 以及 <strong>课后习题3.5</strong>。</p></blockquote><h4 id="应用归结原理"><a href="#应用归结原理" class="headerlink" title="应用归结原理"></a>应用归结原理</h4><ul><li>把已知前提用谓词公式表示出来，并且化为相应的子句集，</li><li>把待求解的问题也用谓词公式表示出来，然后 <strong>把它否定并与谓词 ANSWER 构成析取式</strong>，化为子句集</li><li>对子句集进行归结，若得到归结式 ANSWER，则答案就在 ANSWER中。</li></ul><blockquote><p>该节内容通常出现在考试的计算题部分。</p><p>具体例子参考 <strong>课本例题3.11</strong> 以及 <strong>课后习题3.10</strong>。</p></blockquote><hr><h2 id="参考资料-📚"><a href="#参考资料-📚" class="headerlink" title="参考资料 📚"></a>参考资料 📚</h2><ul><li>《人工智能导论（第五版）》王万良</li><li><a href="https://openai.com/blog/chatgpt">https://openai.com/blog/chatgpt</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 人工智能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 人工智能 </tag>
            
            <tag> 期末指北 </tag>
            
            <tag> AI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>期末指北｜人工智能（二）</title>
      <link href="/2023/06/06/qi-mo-zhi-bei-ren-gong-zhi-neng-er/"/>
      <url>/2023/06/06/qi-mo-zhi-bei-ren-gong-zhi-neng-er/</url>
      
        <content type="html"><![CDATA[<h1 id="【期末指北】人工智能导论（feat-ChatGPT）"><a href="#【期末指北】人工智能导论（feat-ChatGPT）" class="headerlink" title="【期末指北】人工智能导论（feat.ChatGPT）"></a>【期末指北】人工智能导论（feat.ChatGPT）</h1><h2 id="写在最前-✍️"><a href="#写在最前-✍️" class="headerlink" title="写在最前 ✍️"></a>写在最前 ✍️</h2><p>本文记录了一些 《<strong>人工智能导论</strong>》课程的 <strong>主要知识点</strong>，供有需求的同学们学习使用。</p><p>部分内容由 <strong>ChatGPT</strong> 生成，摊主进行审核及整理。</p><p><strong>教材版本</strong>：《人工智能导论（第五版）》王万良</p><p>❗️ 本博客仅涵盖一些主要知识点，适合 <strong>有一定基础</strong> 的同学 <strong>搭配教材</strong> 使用，<strong>非常不建议只看博客学习</strong>❗️</p><hr><h2 id="第二章：知识表示与知识图谱-🧑🏻‍💻"><a href="#第二章：知识表示与知识图谱-🧑🏻‍💻" class="headerlink" title="第二章：知识表示与知识图谱 🧑🏻‍💻"></a>第二章：知识表示与知识图谱 🧑🏻‍💻</h2><h3 id="一、知识"><a href="#一、知识" class="headerlink" title="一、知识"></a>一、知识</h3><h4 id="知识的概念"><a href="#知识的概念" class="headerlink" title="知识的概念"></a>知识的概念</h4><p><strong>知识</strong> 是人们在长期的生活及社会实践中、在科学研究及实验中积累起来的 <strong>对客观世界的认识与经验</strong>，人们把实践中获得的信息关联在一起，就形成了知识。</p><p>一般来说，<strong>把有关信息关联在一起所形成的信息结构称为知识</strong>。</p><p>信息之间有多种关联形式，其中用得最多的一种是用「如果⋯，则⋯」表示的关联形式，它反映了信息间的某种因果关系。</p><p><strong>知识</strong> 反映了客观世界中事物之间的关系，不同事物或者相同事物间的不同关系形成了不同的知识。</p><ul><li>「雪是白色的」是一条知识，它反映了「雪」与「白色」之间的一种关系。<ul><li>在人工智能中，这种知识称为「事实」</li></ul></li><li>「如果头痛且流涕，则有可能患了感冒」是一条知识，它反映了「头痛且流涕」与「可能患了感冒」之间的一种因果关系。<ul><li>在人工智能中，这种知识称为「规则」</li></ul></li></ul><h4 id="知识的特性"><a href="#知识的特性" class="headerlink" title="知识的特性"></a>知识的特性</h4><ul><li><strong>相对正确性</strong><ul><li>知识是人类对客观世界认识的结晶，并且受到长期实践的检验。因此，在一定的条件及环境下，知识一般是正确的（例如，牛顿力学在一定的条件下才是正确的）</li></ul></li><li><strong>不确定性</strong><ul><li>由于现实世界的复杂性，信息可能是精确的，也可能是不精确的、模糊的；关联可能是确定的，也可能是不确定的。这就使得知识并不总是只有「真」与「假」这两种状态，而是在「真」与「假」之间还存在许多中间状态，即存在「真」的程度问题。知识的这一特性称为不确定性</li></ul></li><li><strong>可表示性与可利用性</strong><ul><li>知识的可表示性是指知识可以用适当形式表示出来，如用语言、文字、图形、神经网络等，这样才能被存储、传播</li><li>知识的可利用性是指知识可以被利用。这是不言而喻的，人们每天都在利用自己掌握的知识解决所面临的各种问题</li></ul></li></ul><h4 id="知识的表示"><a href="#知识的表示" class="headerlink" title="知识的表示"></a>知识的表示</h4><p><strong>知识表示（knowledge representation）</strong> 就是将 <strong>人类知识形式化</strong> 或者 <strong>模型化</strong>。实际上是对知识的一种描述，或者说是一组约定，一种 <strong>计算机可以接受的用于描述知识的数据结构</strong>。</p><p><strong>知识的表示方法</strong>有：一阶谓词逻辑、产生式、框架、状态空间、人工神经网络、遗传编码等。</p><hr><h3 id="二、一阶谓词逻辑表示法"><a href="#二、一阶谓词逻辑表示法" class="headerlink" title="二、一阶谓词逻辑表示法"></a>二、一阶谓词逻辑表示法</h3><h4 id="谓词的一般形式"><a href="#谓词的一般形式" class="headerlink" title="谓词的一般形式"></a>谓词的一般形式</h4><p>$$<br>P(x_1,x_2,\dots,x_n)<br>$$</p><p>其中，$P$ 是谓词名，$x_1,x_2,\dots,x_n$ 是个体。</p><p><strong>谓词</strong> 中 <strong>包含的个体数目</strong> 称为 <strong>谓词的元数</strong>，如 $P(x)$是一元谓词，$P(x,y)$是二元谓词。</p><p>在谓词中，个体可以是 <strong>常量</strong>，<strong>变元</strong>，还可以是 <strong>一个函数</strong>，统称为「项」。</p><ul><li><strong>常量</strong>：个体是常量，表示一个或者一组指定的个体。例如，「老张是一个教师」这个命题，可表示为一元谓词 <code>Teacher(Zhang)</code>。其中，<code>Teacher</code> 是谓词名，<code>Zhang</code> 是个体，<code>Teacher</code> 刻画了 <code>Zhang</code> 的职业是教师这一特征。</li><li><strong>变元</strong>：个体是变元，表示没有指定的一个或者一组个体。例如，$x \lt 5$ 这个命题，可表示为 <code>Less(x， 5)</code>。其中，$x$ 是变元。</li><li><strong>函数</strong>：个体是函数，表示一个个体到另一个个体的映射。例如，「小李的父亲是教师」，可表示为一<br>元谓词 <code>Teacher(father(Li))</code></li></ul><p>在谓词 $P(x_1,x_2,\dots,x_n)$ 中，若 $x_1,x_2,\dots,x_n$ 都是个体常量、变元或函数，称它为<strong>一阶谓词</strong>。</p><h4 id="谓词-VS-函数"><a href="#谓词-VS-函数" class="headerlink" title="谓词 VS 函数"></a>谓词 VS 函数</h4><p><strong>函数与谓词</strong> 表面上很相似，容易混淆，其实这是 <strong>两个完全不同的概念</strong>。谓词的真值是「真」或「假」，而函数的值是个体域中的某个个体，<strong>函数无真值可言</strong>，它只是在个体域中从一个个体到另一个个体的映射。</p><h4 id="谓词公式中的连接词"><a href="#谓词公式中的连接词" class="headerlink" title="谓词公式中的连接词"></a>谓词公式中的连接词</h4><table><thead><tr><th align="center">连接词</th><th align="center">符号</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">否定</td><td align="center">¬</td><td align="center">表示否定，即”不是”或”非”</td></tr><tr><td align="center">合取</td><td align="center">∧</td><td align="center">表示逻辑与，即”且”</td></tr><tr><td align="center">析取</td><td align="center">∨</td><td align="center">表示逻辑或，即”或者”</td></tr><tr><td align="center">蕴含</td><td align="center">→</td><td align="center">表示条件，即”如果…那么…”</td></tr><tr><td align="center">等价</td><td align="center">↔</td><td align="center">表示双向条件，即”当且仅当”</td></tr></tbody></table><blockquote><p>🍉 <strong>优先级关系</strong>：¬，∧，∨，→，↔</p></blockquote><h4 id="谓词公式中的量词"><a href="#谓词公式中的量词" class="headerlink" title="谓词公式中的量词"></a>谓词公式中的量词</h4><p>在谓词逻辑中有两个量词：<strong>全称量词</strong> 和 <strong>存在量词</strong>。</p><ul><li><strong>全称量词</strong>：$(\forall)$ 表示「对个体域中的 <strong>所有</strong>（或任一个）个体 $x$」<ul><li>所有机器人都是灰色的：$(\forall x)[ROBOT(x) → COLOR(x,GRAY)]$</li></ul></li><li><strong>存在量词</strong>：$(\exists)$ 表示「在个体域中的 <strong>存在</strong>个体 $x$」<ul><li>1号房间有个物体：$(\exists x)[x,r_1]$</li></ul></li></ul><p>❗️ 注意：当全称量词和存在量词 <strong>出现在同一个命题中时</strong>，这时 <strong>量词的次序</strong> 将影响命题的意思。❗️</p><ul><li>$(\forall x)(\exists y)(Employee(x) → Manager(y，x))$ 表示「每个雇员都有一个经理」</li><li>$(\exists y)(\forall x)(Employee(x) → Manager(y，x))$ 表示「有一个人是所有雇员的经理」</li></ul><h4 id="重要谓词公式"><a href="#重要谓词公式" class="headerlink" title="重要谓词公式"></a>重要谓词公式</h4><p><strong>分配律</strong><br>$$<br>P \vee(Q \wedge R) \Leftrightarrow(P \vee Q) \wedge(P \vee R) \<br>$$<br>$$<br>P \wedge(Q \vee R) \Leftrightarrow(P \wedge Q) \vee(P \wedge R)<br>$$</p><p><strong>得摩根律</strong><br>$$<br>\neg(P \vee Q) \Leftrightarrow \neg P \wedge \neg Q \<br>$$<br>$$<br>\neg(P \wedge Q) \Leftrightarrow \neg P \vee \neg Q<br>$$</p><p><strong>连接词化归律</strong><br>$$<br>P \rightarrow Q \Leftrightarrow \neg P \vee Q<br>$$<br><strong>量词转换律</strong><br>$$<br>\neg(\exists x) P \Leftrightarrow(\forall x)(\neg P) \<br>$$</p><p>$$<br>\neg(\forall x) P \Leftrightarrow(\exists x)(\neg P)<br>$$</p><hr><h3 id="三、产生式表示法"><a href="#三、产生式表示法" class="headerlink" title="三、产生式表示法"></a>三、产生式表示法</h3><h4 id="产生式的概念"><a href="#产生式的概念" class="headerlink" title="产生式的概念"></a>产生式的概念</h4><p><strong>产生式</strong> 通常用于表示 <strong>事实、规则以及它们的不确定性度量</strong>，适合于表示事实性知识和规则性知识。</p><p><strong>产生式表示法</strong> 是目前应用最多的一种知识表示模型，许多成功的 <strong>专家系统</strong> 都用它来表示知识。</p><p><strong>产生式</strong> 与谓词逻辑中的蕴含式的基本形式相同，但 <strong>蕴含式只是产生式的一种特殊情况</strong>，理由如下：</p><ul><li><strong>产生式</strong> 不仅可以表示确定性规则，还可以表示各种操作、规则、变换、算子、函数等。例如，「如果炉温超过上限，则立即关闭风门」是一个产生式，但不是一个蕴含式。</li><li><strong>产生式</strong> 不仅可以表示确定性知识，而且还可以表示不确定性知识（蕴含式只能表示确定性知识，要么为真，要么为假）。</li></ul><h4 id="产生式表示法"><a href="#产生式表示法" class="headerlink" title="产生式表示法"></a>产生式表示法</h4><ul><li>确定性 <strong>规则知识</strong> 的产生式表示<ul><li>基本形式：<code>IF    P    THEN    Q</code></li><li>其中，P 是产生式的 <strong>前提</strong>，用于指出该产生式是否可用的条件；Q 是一组 <strong>结论</strong> 或 <strong>操作</strong>，用于指出当前前提 P 所指示的条件满足时，应该得出的结论或应该执行的操作。</li></ul></li><li>不确定性 <strong>规则知识</strong> 的产生式表示<ul><li>基本形式：<code>IF    P    THEN    Q （置信度）</code></li></ul></li><li>确定性 <strong>事实性知识</strong> 的产生式表示<ul><li>基本形式：<code>（对象，属性，值）</code> 或者 <code>（关系，对象1，对象2）</code></li><li>实例：<code>（Friend，Ricky，Sam）</code> 表示为 Ricky 和 Sam 是朋友</li></ul></li><li>不确定性 <strong>事实性知识</strong> 的产生式表示<ul><li>基本形式：<code>（对象，属性，值，置信度）</code> 或者 <code>（关系，对象1，对象2，置信度）</code></li><li>实例：<code>（Friend，Ricky，Sam，0.9）</code> 表示为 Ricky 和 Sam 大概率是朋友</li></ul></li></ul><h4 id="产生式系统"><a href="#产生式系统" class="headerlink" title="产生式系统"></a>产生式系统</h4><p>把 <strong>一组产生式</strong> 放在一起，让它们 <strong>相互配合，协同作用</strong>，一个产生式生成的结论可以供另一个产生式作为已知事实使用，以求得问题的解，这样的系统称为 <strong>产生式系统</strong>。</p><p>一般来说，一个产生式系统由 <strong>规则库</strong>、<strong>控制系统（推理机）</strong>、<strong>综合数据库</strong> 三部分组成，关系如下图。</p><p><img src="https://ricky-typora-notes.oss-cn-hangzhou.aliyuncs.com/image-20230607160844898.png" alt="产生式系统的基本结构关系"></p><ul><li><strong>规则库</strong>：用于描述相应领域内知识的产生式集合称为规则库。</li><li><strong>综合数据库</strong>：又称为事实库、上下文、黑板等。它是一个用于存放问题求解过程中各种当前信息的数据结构，如问题的初始状态、原始证据、推理中得到的中间结论及最终结论。</li><li><strong>控制系统</strong>：又称为推理机。它由一组程序组成，负责整个产生式系统的运行,实现对问题的求解。<ul><li>按一定的策略 <strong>从规则库中选择与综合数据库的己知事实进行匹配</strong>。所谓匹配是指把规则的前提条件与综合数据库中的已知事实进行比较，如果两者一致，或者近似一致且满足预先规定的条件，则称匹配成功，相应的规则可被使用，否则称为匹配不成功。</li><li><strong>冲突消解</strong>。匹配成功的规则可能不止一条,这称为发生了冲突。此时，推理机构必须调用相应的解决冲突策略进行消解，以便从匹配成功的规则中选出一条执行。</li><li><strong>执行规则</strong>。如果某一规则的右部是一个或多个结论，则把这些结论加人到综合数据库中；如果规则的右部是一个或多个操作，则执行这些操作。对于不确定性知识，在执行每一条规则时还要按一定的算法计算结论的不确定性。</li><li><strong>检查推理终止条件</strong>。检查综合数据库中是否包含了最终结论，决定是否停止系统的运行。</li></ul></li></ul><h4 id="产生式表示法的特点"><a href="#产生式表示法的特点" class="headerlink" title="产生式表示法的特点"></a>产生式表示法的特点</h4><p><strong>产生式表示法的主要优点</strong></p><ul><li><strong>自然性</strong><ul><li>产生式表示法用「如果⋯⋯，则⋯」的形式表示知识，这是人们常用的一种表达因果关系的知识表示形式,既直观、自然，又便于进行推理。正是由于这一原因，才使得产生式表示法成为人工智能中最重要且应用最多的一种知识表示方法。</li></ul></li><li><strong>模块性</strong><ul><li>产生式是规则库中最基本的知识单元，它们同推理机构相对独立，而且每条规则都具有相同的形式。这就便于对其进行模块化处理，为知识的增、删、改带来了方便，为规则库的建立和扩展提供了可管理性。</li></ul></li><li><strong>有效性</strong><ul><li>产生式表示法既可表示确定性知识，又可表示不确定性知识;既有利于表示启发式知识，又可方便地表示过程性知识。目前已建造成功的专家系统大部分是用产生式来表达其过程性知识的。</li></ul></li><li><strong>清晰性</strong><ul><li>产生式有固定的格式。每一条产生式规则都由前提与结论（操作）这两部分组成，而且每一部分所含的知识量都比较少。这既便于对规则进行设计，又易于对规则库中知识的一致性及完整性进行检测。</li></ul></li></ul><p><strong>产生式表示法的主要缺点</strong></p><ul><li><strong>效率不高</strong><ul><li>在产生式系统求解问题的过程中，首先要用 <strong>产生式的前提部分与综合数据库中的已知事实进行匹配</strong>，从规则库中选出可用的规则，此时 <strong>选出的规则可能不止一个</strong>，这就需要按一定的策略进行「<strong>冲突消解</strong>」，然后把选中的规则启动执行。因此，产生式系统求解问题的过程是一个反复进行「<strong>匹配一冲突消解一执行</strong>」的过程。鉴于 <strong>规则库一般都比较庞大</strong>，而 <strong>匹配又是一件十分费时</strong> 的工作，因此其工作效率不高，而且大量的产生式规则容易引起组合爆炸。</li></ul></li><li><strong>不能表达具有结构性的知识</strong><ul><li>产生式 <strong>适合于表达具有因果关系的过程性知识</strong>，是一种非结构化的知识表示方法，所以对具有结构关系的知识却无能为力，它不能把具有结构关系的事物间的区别与联系表示出来。</li></ul></li></ul><hr><h3 id="四、框架表示法"><a href="#四、框架表示法" class="headerlink" title="四、框架表示法"></a>四、框架表示法</h3><h4 id="框架表示法的概念"><a href="#框架表示法的概念" class="headerlink" title="框架表示法的概念"></a>框架表示法的概念</h4><p><strong>框架</strong> 是一种描述所讨论对象（一个事物、事件或概念）属性的 <strong>数据结构</strong>。</p><p>一个 <strong>框架</strong> 由若干个被称为「<strong>槽</strong>（Slot）」的结构组成，每一个槽又可根据实际情况划分为若干个「侧面(facet）」。</p><ul><li><p>一个槽用于描述所讨论对象某一方面的属性。</p></li><li><p>一个侧面用于描述相应属性的一个方面。</p></li><li><p>槽和侧面所具有的属性值分别被称为槽值和侧面值。</p></li></ul><h4 id="框架表示法的特点"><a href="#框架表示法的特点" class="headerlink" title="框架表示法的特点"></a>框架表示法的特点</h4><ul><li><strong>结构性</strong><ul><li>框架表示法最突出的特点是<strong>便于表达结构性知识</strong>，能够将知识的内部结构关系及知识间的联系表示出来，因此它是一种结构化的知识表达方法。</li><li>产生式规则只能表示因果关系，而 <strong>框架表示法</strong> 不仅可以通过 Infer 槽或者 Possible-reason 槽<strong>表示因果关系</strong>，还可以通过其他槽 <strong>表示更复杂的关系</strong>。</li></ul></li><li><strong>继承性</strong><ul><li>框架表示法通过使槽值为另一个框架的名字实现框架间的联系，建立表示复杂知识的框架网络。在框架网络中，下层框架可以继承上层框架的槽值，也可以进行补充和修改,这样不仅减少了知识的冗余，而且较好地保证了知识的一致性。</li></ul></li><li><strong>自然性</strong><ul><li>框架表示法与人在观察事物时的思维活动是一致的，比较自然。</li></ul></li></ul><hr><h3 id="五、知识图谱表示法"><a href="#五、知识图谱表示法" class="headerlink" title="五、知识图谱表示法"></a>五、知识图谱表示法</h3><h4 id="知识图谱的概念"><a href="#知识图谱的概念" class="headerlink" title="知识图谱的概念"></a>知识图谱的概念</h4><p><strong>知识图谱</strong> 是一种互联网环境下的 <strong>知识表示方法</strong>。</p><p><strong>知识图谱</strong> 是由 <strong>节点</strong> 和 <strong>边</strong> 组成的语义网络，其中 <strong>节点代表物理世界中的实体或概念</strong>，<strong>边表示实体与实体的属性或他们之间的关系</strong>。 </p><p><img src="https://ricky-typora-notes.oss-cn-hangzhou.aliyuncs.com/440px-Conceptual_Diagram_-_Example.svg.png.png" alt="知识图谱案例"></p><h4 id="知识图谱的应用领域"><a href="#知识图谱的应用领域" class="headerlink" title="知识图谱的应用领域"></a>知识图谱的应用领域</h4><ol><li>搜索引擎增强：知识图谱可以用于搜索引擎的增强，通过将搜索结果与知识图谱中的实体和关系相关联，提供更准确、丰富的搜索结果。用户可以通过搜索关键词获取与之相关的实体信息、关联的知识、实体间的关系等。</li><li>问答系统：知识图谱可以用于构建智能问答系统，提供更精确、全面的答案。系统可以根据知识图谱中的实体和关系，对用户提出的问题进行语义理解和推理，从而给出准确的答案。</li><li>信息推荐：知识图谱可以为个性化信息推荐提供基础支持。通过分析用户的兴趣和偏好，结合知识图谱中的实体和关系，推荐用户感兴趣的内容，如新闻、文章、电影、音乐等。</li><li>专家系统：知识图谱可以用于构建专家系统，提供针对特定领域的专业知识和推理能力。通过将领域知识表示为知识图谱中的实体和关系，系统可以根据用户的需求进行问题求解、决策支持等。</li><li>自然语言处理：知识图谱可以用于自然语言处理任务，如命名实体识别、关系抽取、语义角色标注等。通过将文本中的实体和关系与知识图谱中的实体和关系进行对应，可以更准确地理解和处理自然语言。</li><li>医疗和生命科学：知识图谱在医疗和生命科学领域有广泛应用。它可以帮助医生和研究人员整合和分析大量的医疗数据和生物数据，发现疾病和基因之间的关联，辅助医学诊断和药物研发。</li></ol><hr><h2 id="参考资料-📚"><a href="#参考资料-📚" class="headerlink" title="参考资料 📚"></a>参考资料 📚</h2><ul><li>《人工智能导论（第五版）》王万良</li><li><a href="https://openai.com/blog/chatgpt">https://openai.com/blog/chatgpt</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 人工智能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 人工智能 </tag>
            
            <tag> 期末指北 </tag>
            
            <tag> AI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>期末指北｜人工智能（一）</title>
      <link href="/2023/06/05/qi-mo-zhi-bei-ren-gong-zhi-neng-yi/"/>
      <url>/2023/06/05/qi-mo-zhi-bei-ren-gong-zhi-neng-yi/</url>
      
        <content type="html"><![CDATA[<h1 id="【期末指北】人工智能导论（feat-ChatGPT）"><a href="#【期末指北】人工智能导论（feat-ChatGPT）" class="headerlink" title="【期末指北】人工智能导论（feat.ChatGPT）"></a>【期末指北】人工智能导论（feat.ChatGPT）</h1><h2 id="写在最前-✍️"><a href="#写在最前-✍️" class="headerlink" title="写在最前 ✍️"></a>写在最前 ✍️</h2><p>本文记录了一些 《<strong>人工智能导论</strong>》课程的 <strong>主要知识点</strong>，供有需求的同学们学习使用。</p><p>部分内容由 <strong>ChatGPT</strong> 生成，摊主进行审核及整理。</p><p><strong>教材版本</strong>：《人工智能导论（第五版）》王万良</p><p>❗️ 本博客仅涵盖一些主要知识点，适合 <strong>有一定基础</strong> 的同学 <strong>搭配教材</strong> 使用，<strong>非常不建议只看博客学习</strong>❗️</p><hr><h2 id="第一章：绪论"><a href="#第一章：绪论" class="headerlink" title="第一章：绪论"></a>第一章：绪论</h2><h3 id="一、智能"><a href="#一、智能" class="headerlink" title="一、智能"></a>一、智能</h3><h4 id="智能的定义"><a href="#智能的定义" class="headerlink" title="智能的定义"></a>智能的定义</h4><p>人类智能是自然界四大奥秘之一，很难给出确切的定义，目前有思维理论、知识阈值理论、进化理论等理论。</p><p>综合各种观点，可以认为：</p><ul><li><strong>智能</strong> 是 <strong>知识和智力的总和</strong></li><li>知识是一切智能行为的基础</li><li>智力是获取知识并且应用知识解决问题的能力</li></ul><h4 id="智能的特征"><a href="#智能的特征" class="headerlink" title="智能的特征"></a>智能的特征</h4><ol><li>具有感知能力</li><li>具有记忆和与思维能力</li><li>具有学习能力</li><li>具有行为能力</li></ol><hr><h3 id="二、人工智能"><a href="#二、人工智能" class="headerlink" title="二、人工智能"></a>二、人工智能</h3><h4 id="人工智能的概念"><a href="#人工智能的概念" class="headerlink" title="人工智能的概念"></a>人工智能的概念</h4><p><strong>人工智能</strong> 是用人工的方法在机器（计算机）上实现的智能，也称为机器智能。</p><p>人工智能是一门研究如何构造智能机器或智能系统，使它能模拟、延伸、扩展人类智能的学科。</p><h4 id="人工智能的发展历史"><a href="#人工智能的发展历史" class="headerlink" title="人工智能的发展历史"></a>人工智能的发展历史</h4><table><thead><tr><th align="center">阶段</th><th align="center">时间</th><th align="center">关键词</th></tr></thead><tbody><tr><td align="center">孕育</td><td align="center">1956年之前</td><td align="center">/</td></tr><tr><td align="center">形成</td><td align="center">1956-1969年</td><td align="center">达特茅斯会议、麦卡锡</td></tr><tr><td align="center">发展</td><td align="center">1970年以后</td><td align="center">/</td></tr><tr><td align="center">大数据驱动发展期</td><td align="center">2011年以后</td><td align="center">算法、算力、数据</td></tr></tbody></table><h4 id="人工智能分类"><a href="#人工智能分类" class="headerlink" title="人工智能分类"></a>人工智能分类</h4><table><thead><tr><th align="center">类别</th><th align="center">说明</th><th align="center">案例</th></tr></thead><tbody><tr><td align="center">专用人工智能</td><td align="center"><strong>面向特定任务</strong>，处理的任务需求明确、应用边界清晰、领域知识丰富，在 <strong>局部智能水平</strong> 测试中往往超过人类</td><td align="center">AlphaGo</td></tr><tr><td align="center">通用人工智能</td><td align="center">事实上，人的大脑是一个通用的智能系统，可以处理视觉、听觉、推理、学习等各类问题，这是未来人工智能的发展方向</td><td align="center">/</td></tr></tbody></table><h4 id="人工智能研究的基本内容"><a href="#人工智能研究的基本内容" class="headerlink" title="人工智能研究的基本内容"></a>人工智能研究的基本内容</h4><table><thead><tr><th align="center">内容</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">知识表示</td><td align="center">符号表示法和连接机制表示法</td></tr><tr><td align="center">机器感知</td><td align="center">机器感知就是使机器具有类似于人的感知能力，以机器视觉与机器听觉为主</td></tr><tr><td align="center">机器思维</td><td align="center">机器思维是指对通过感知得来的外部信息及机器内部的各种工作信息进行有目的的处理</td></tr><tr><td align="center">机器学习</td><td align="center">机器学习研究如何使计算机具有类似于人的学习能力，使它能通过学习自动地获取知识</td></tr><tr><td align="center">机器行为</td><td align="center">机器行为主要是计算机的表达能力，即「说」「写」「画」等能力</td></tr></tbody></table><h4 id="人工智能的主要研究领域"><a href="#人工智能的主要研究领域" class="headerlink" title="人工智能的主要研究领域"></a>人工智能的主要研究领域</h4><table><thead><tr><th align="center">领域</th><th align="center">英文术语</th><th align="center">介绍</th></tr></thead><tbody><tr><td align="center">机器学习</td><td align="center">Machine Learning</td><td align="center">计算机系统通过学习数据和模式，自动改善和优化其性能和预测能力的技术领域。</td></tr><tr><td align="center">深度学习</td><td align="center">Deep Learning</td><td align="center">一种机器学习方法，通过使用多层神经网络模型来处理和学习大规模数据，用于图像识别、自然语言处理等任务。</td></tr><tr><td align="center">博弈</td><td align="center">Game Playing</td><td align="center">下棋、打牌、战争等一类竞争性的智能活动称为博弈</td></tr><tr><td align="center">模式识别</td><td align="center">Pattern Recognition</td><td align="center">识别和分类数据中的模式和结构，用于图像识别、语音识别、手写识别等任务。</td></tr><tr><td align="center">自然语言处理</td><td align="center">Natural Language Processing (NLP)</td><td align="center">计算机处理和理解人类自然语言的能力，包括文本分析、语义理解、机器翻译等任务。</td></tr><tr><td align="center">计算机视觉</td><td align="center">Computer Vision</td><td align="center">计算机通过处理和解释图像和视频来模拟和理解人类视觉系统的能力，用于图像识别、目标检测等任务。</td></tr><tr><td align="center">知识图谱</td><td align="center">Knowledge Graph</td><td align="center">一种结构化的知识表示形式，用于描述实体、关系和属性之间的关联关系，用于知识推理、信息检索等任务。</td></tr><tr><td align="center">自动推理</td><td align="center">Automated Reasoning</td><td align="center">计算机通过逻辑和推理规则来自动解决问题、推导结论或验证命题的能力，用于证明定理、故障诊断等任务。</td></tr><tr><td align="center">数据挖掘</td><td align="center">Data Mining</td><td align="center">从大规模数据集中发现模式、关联和趋势，以提取有用的信息和知识。</td></tr><tr><td align="center">机器人学</td><td align="center">Robotics</td><td align="center">研究和开发机器人技术，包括感知、运动控制、人机交互等，以实现自主决策和物理操作能力的智能机器人系统。</td></tr></tbody></table><h4 id="人工智能的三大学派"><a href="#人工智能的三大学派" class="headerlink" title="人工智能的三大学派"></a>人工智能的三大学派</h4><table><thead><tr><th align="center">学派</th><th align="center">主要观点</th><th align="center">典型方法</th><th align="center">代表人物</th></tr></thead><tbody><tr><td align="center">符号主义</td><td align="center">人工智能应该模仿 <strong>人脑的推理过程</strong>。系统需要被明确地编程，包括事实和规则。</td><td align="center">专家系统、产生式系统</td><td align="center">John McCarthy，Marvin Minsky</td></tr><tr><td align="center">连接主义</td><td align="center">人工智能应该模仿 <strong>人脑的神经网络结构</strong>。学习过程是通过调整神经网络中的连接权重完成的。</td><td align="center">深度学习、反向传播、卷积神经网络</td><td align="center">Geoffrey Hinton, Yoshua Bengio, Yann LeCun</td></tr><tr><td align="center">行为主义</td><td align="center">人工智能应该模仿 <strong>人或动物的行为</strong>。系统不需要高级的推理能力，只需要 <strong>与环境进行有效的交互</strong> 即可。</td><td align="center">遗传算法、蚁群算法、粒子群算法、机器人学</td><td align="center">Rodney Brooks, Alan Turing</td></tr></tbody></table><h4 id="图灵测试"><a href="#图灵测试" class="headerlink" title="图灵测试"></a>图灵测试</h4><p>图灵测试（Turing Test）是由英国数学家、逻辑学家阿兰·图灵（Alan Turing）于 1950 年提出的一种测试人工智能的方法，该测试旨在 <strong>评估一个机器是否能够表现出与人类相似的智能</strong>。</p><p>在图灵测试中，有 <strong>三个参与者</strong>：一个人类评判者（通常是通过电脑终端与参与者进行对话）、一个人类参与者和一个机器参与者。评判者与这两个参与者进行文字对话，但无法直接看到他们的身份。如果评判者无法准确地判断哪个参与者是人类，哪个是机器，那么机器被认为通过了图灵测试，表现出了人类级别的智能。</p><p>图灵测试的目标是测试机器是否能够模仿人类的对话行为，包括语言理解、推理、逻辑和判断等能力。机器需要能够以自然而流畅的方式与评判者进行交流，并对问题作出合理的回答，使评判者无法准确判断其是否是机器。</p><p>尽管图灵测试是评估机器智能的一种方法，但它并不是完美的。批评者指出，通过图灵测试只能判断机器是否能够模仿人类的对话，但并不能真正评估其智能的本质。此外，有些人工智能系统可能通过欺骗或采用特定的策略来模仿人类回答，而并非真正具备智能。</p><p>尽管如此，图灵测试仍然是人工智能领域中广泛使用的一种标准和基准。它促使了对自然语言处理、对话系统和智能代理的研究和发展，推动了人工智能技术的进步。</p><hr><h3 id="三、人工智能具体案例"><a href="#三、人工智能具体案例" class="headerlink" title="三、人工智能具体案例"></a>三、人工智能具体案例</h3><h4 id="深蓝"><a href="#深蓝" class="headerlink" title="深蓝"></a>深蓝</h4><p><strong>深蓝概述</strong></p><p>深蓝（Deep Blue）是一个著名的人工智能计算机系统，最初开发用于国际象棋的计算机程序。它由IBM研发，旨在挑战和超越人类国际象棋大师的能力。</p><p>深蓝的最著名的成就之一是在 1997 年与 <strong>世界象棋</strong> 冠军加里·卡斯帕罗夫（Garry Kasparov）的对弈中的胜利。这次比赛成为人工智能历史上的一个重要里程碑，因为这是第一次一台计算机战胜了一个世界冠军级别的象棋大师，深蓝在这次比赛中以 3.5:2.5 的总比分胜出。</p><p><strong>深蓝的核心技术</strong></p><ol><li>搜索算法：深蓝使用了高效的搜索算法来探索可能的棋局变化。它采用了一种称为Alpha-Beta剪枝的搜索算法，这种算法可以有效地减少搜索空间，以提高计算效率。</li><li>评估函数：深蓝使用了一个复杂的评估函数来评估当前棋局的优势和劣势。评估函数考虑了多个因素，包括棋子的位置、控制力、发展程度、攻击和防守等。通过评估函数的计算，深蓝可以对不同的着法进行评估，选择最有利的下一步。</li><li>数据库：深蓝还使用了一个庞大的开局和棋局数据库，其中包含了大量的国际象棋开局、变化和历史棋局。这个数据库可以帮助深蓝更快地找到一些已知的最佳着法和局面。</li><li>并行计算：深蓝利用了并行计算的能力，通过同时在多个处理单元上进行计算，加速搜索和评估的过程。它使用了特殊设计的硬件和并行计算算法，以提高计算速度和效率。</li></ol><h4 id="IBM-Waston"><a href="#IBM-Waston" class="headerlink" title="IBM Waston"></a>IBM Waston</h4><p><strong>IBM Watson 概述</strong></p><p>IBM Watson 是 IBM 公司开发的一款人工智能计算机系统，它以自然语言处理、机器学习和推理、知识表示和推理等技术为基础，旨在通过处理和理解大量的结构化和非结构化数据，提供智能化的解决方案和决策支持。</p><p>IBM Watson在2011年首次亮相，并在2011年的美国电视智力竞赛节目《危险边缘》中击败人类选手，并在2014年的《危险边缘》比赛中获得冠军。这一事件引起了广泛的关注，使得IBM Watson成为人工智能领域的重要代表之一。</p><p><strong>IBM Watson 核心技术</strong></p><ol><li>自然语言处理（NLP）：IBM Watson能够理解和处理人类语言，包括文本、语音和图像等形式的数据。它可以进行文本分析、语义理解、命名实体识别、情感分析等任务，从而能够解读和理解大量的文本数据。</li><li>机器学习（ML）：IBM Watson利用机器学习算法来学习和改进自身的性能。通过分析和训练大量的数据，它能够提取模式和规律，并根据反馈进行自我优化。这使得它能够逐渐提升自己的智能水平，并提供更准确的结果和洞察。</li><li>推理和知识表示（Reasoning and Knowledge Representation）：IBM Watson能够推理和进行逻辑推断，从而进行复杂的问题解决和推理。它使用 <strong>知识图谱</strong> 和本体表示方法来组织和表示知识，使得它能够根据先前的知识和规则进行推理和推断。</li><li>数据分析和挖掘（Data Analytics and Mining）：IBM Watson能够处理和分析大规模的结构化和非结构化数据。它利用数据挖掘和分析技术，从海量的数据中提取有用的信息和洞察。这使得它能够支持决策制定、预测和优化等任务。</li><li>认知计算（Cognitive Computing）：IBM Watson的目标是模拟和增强人类的认知能力。它能够处理复杂的问题和情境，进行推理、解释和学习，从而提供更智能化和个性化的解决方案。</li></ol><blockquote><p>🍉 扩展：<strong>知识图谱</strong> 本质上是一种基于图的数据结构，由节点（Point）和边（Edge）组成。在知识图谱中，每个节点表示现实世界中存在的「实体」，每条边为实体与实体之间的「关系」。可以说，知识图谱就是把异构信息连接在一起而得到的一个关系网络，提供了从「关系」的角度去分析问题的能力。   </p></blockquote><h4 id="AlphaGO"><a href="#AlphaGO" class="headerlink" title="AlphaGO"></a>AlphaGO</h4><blockquote><p>官方纪录片（油管）：<a href="https://youtu.be/WXuK6gekU1Y">https://youtu.be/WXuK6gekU1Y</a></p><p>中英双语字幕（B站）：<a href="https://www.bilibili.com/video/BV1cK4y187bQ/?share_source=copy_web&amp;vd_source=33934722b558a5cefa750c1a9be72249">https://www.bilibili.com/video/BV1cK4y187bQ/?share_source=copy_web&amp;vd_source=33934722b558a5cefa750c1a9be72249</a></p></blockquote><p><strong>AlphaGO 概述</strong></p><p>AlphaGo 是由 DeepMind（Google 的子公司）开发的人工智能程序，它在围棋领域取得了重大突破。</p><p>AlphaGo 在 2016 年与韩国围棋冠军李世石进行了五局比赛，并以4比1的比分获胜。这次胜利引起了广泛的关注，因为围棋被认为是一项极富挑战性的智力游戏，远远超出了传统的计算机算力。</p><p><strong>AlphaGO 的核心技术</strong></p><p>AlphaGo 的核心技术是 <strong>深度强化学习</strong>（Deep Reinforcement Learning），通过结合 <strong>深度神经网络</strong> 和 <strong>强化学习算法</strong>，使得程序能够自我对弈并不断提高自己的下棋策略。AlphaGo通过大量的训练和搜索，能够评估不同的棋局和决策，选择最佳的下一步行动。</p><p>为了提高搜索效率，AlphaGo还使用了 <strong>蒙特卡洛树搜索</strong>（Monte Carlo Tree Search）算法。这种搜索算法通过模拟大量的随机对局，并利用神经网络评估局面的价值，来选择最优的行动。通过蒙特卡洛树搜索，AlphaGo能够探索围棋庞大的搜索空间，找到最有可能获胜的策略。</p><blockquote><p>🍉 扩展：<strong>强化学习</strong>（Reinforcement Learning，RL）是一种机器学习方法，旨在通过智能体（Agent）与环境的交互学习如何做出最优的决策。在强化学习中，智能体通过观察环境的状态，采取动作，并从环境中获得奖励或惩罚来学习如何在不同的状态下做出最佳的行为。</p></blockquote><hr><h2 id="参考资料-📚"><a href="#参考资料-📚" class="headerlink" title="参考资料 📚"></a>参考资料 📚</h2><ul><li>《人工智能导论（第五版）》王万良</li><li><a href="https://openai.com/blog/chatgpt">https://openai.com/blog/chatgpt</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 人工智能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 人工智能 </tag>
            
            <tag> 期末指北 </tag>
            
            <tag> AI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python｜自动化办公（一）</title>
      <link href="/2023/06/01/python-xue-xi-bi-ji-zi-dong-hua-ban-gong/"/>
      <url>/2023/06/01/python-xue-xi-bi-ji-zi-dong-hua-ban-gong/</url>
      
        <content type="html"><![CDATA[<h2 id="任务需求-🚀"><a href="#任务需求-🚀" class="headerlink" title="任务需求 🚀"></a>任务需求 🚀</h2><p><code>test</code> 文件夹下存在多个子文件夹，每个子文件夹下都包含若干个 <code>csv</code> 文件（以 <code>.csv</code> 结尾），如下图所示：</p><p><img src="https://ricky-typora-notes.oss-cn-hangzhou.aliyuncs.com/image-20230601135054545.png" alt="文件列表"></p><p>假设想要把这些 <code>csv</code> 文件全部移动至同一个汇总文件夹 <code>total</code> 中，请问如何编写 Python 脚本，实现这一目标？</p><p><img src="https://ricky-typora-notes.oss-cn-hangzhou.aliyuncs.com/image-20230601135626933.png" alt="执行效果"></p><hr><h2 id="基础知识-✍️"><a href="#基础知识-✍️" class="headerlink" title="基础知识 ✍️"></a>基础知识 ✍️</h2><blockquote><p>阅读须知：本案例代码均以 MacOS 为例子，Window系统的路径名和 MacOS 略有不同❗️</p><p>Python版本：3.9.10</p></blockquote><h3 id="shutil-模块"><a href="#shutil-模块" class="headerlink" title="shutil 模块"></a>shutil 模块</h3><p><code>shutil</code> 是 Python 标准库中的一个文件操作工具，提供了一系列用于 <strong>对文件和目录进行高级操作</strong> 的函数。它的目标是提供一种简单、易于使用的接口，使文件操作更加方便和灵活。</p><blockquote><p>官方文档：<a href="https://docs.python.org/3/library/shutil.html">https://docs.python.org/3/library/shutil.html</a></p></blockquote><p>下面是一些 <code>shutil</code> 库的简单例子：</p><ol><li><p>复制文件：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> shutil<span class="token comment"># 复制单个文件</span>shutil<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token string">'source_file.txt'</span><span class="token punctuation">,</span> <span class="token string">'destination_folder/'</span><span class="token punctuation">)</span>shutil<span class="token punctuation">.</span>copy2<span class="token punctuation">(</span><span class="token string">'source_file.txt'</span><span class="token punctuation">,</span> <span class="token string">'destination_folder/'</span><span class="token punctuation">)</span><span class="token comment"># 复制整个文件夹</span>shutil<span class="token punctuation">.</span>copytree<span class="token punctuation">(</span><span class="token string">'source_folder/'</span><span class="token punctuation">,</span> <span class="token string">'destination_folder/'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>🍉PS：<code>copy2</code> 和 <code>copy</code> 都可以用于复制，但是 <code>copy2</code> 还会复制文件的元数据（如权限、时间戳等）</p></li><li><p>移动文件：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> shutil<span class="token comment"># 移动单个文件</span>shutil<span class="token punctuation">.</span>move<span class="token punctuation">(</span><span class="token string">'source_file.txt'</span><span class="token punctuation">,</span> <span class="token string">'destination_folder/'</span><span class="token punctuation">)</span><span class="token comment"># 移动整个文件夹</span>shutil<span class="token punctuation">.</span>move<span class="token punctuation">(</span><span class="token string">'source_folder/'</span><span class="token punctuation">,</span> <span class="token string">'destination_folder/'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>这些例子只是 <code>shutil</code> 库提供功能的一小部分，该库还提供了其他功能，如归档文件、修改文件权限、处理文件链接等。通过 <code>shutil</code> 库，可以更方便地进行文件和目录的操作和管理。</p><h3 id="glob-模块"><a href="#glob-模块" class="headerlink" title="glob 模块"></a>glob 模块</h3><p><code>glob</code> 库是用于匹配文件路径名的模块，它提供了一种简单且易用的方法来查找符合特定模式的文件和目录。</p><p><code>glob</code> 库是Python标准库的一部分，因此 <strong>无需安装</strong> 即可使用。</p><blockquote><p>官方文档：<a href="https://docs.python.org/3/library/glob.html">https://docs.python.org/3/library/glob.html</a></p></blockquote><p>使用 <code>glob</code> 库，你可以使用通配符来匹配文件名，类似于在命令行中使用通配符进行文件查找。</p><blockquote><p>通配符是一种表示文件名模式的特殊字符，如 <code>*</code>（匹配任意多个字符）和 <code>?</code>（匹配单个字符），这使得在一个目录中查找满足某种模式的文件变得非常方便。</p></blockquote><p>下面是一些 <code>glob</code> 库常用的函数和通配符的示例：</p><ul><li><code>glob.glob(pattern)</code>：返回一个符合指定模式的文件路径列表。模式可以包含通配符，例如<code>*.txt</code>表示匹配所有以<code>.txt</code>为扩展名的文件。</li><li><code>glob.iglob(pattern)</code>：返回一个迭代器，逐个产生符合指定模式的文件路径。</li><li><code>*</code>：匹配任意多个字符，例如 <code>*.txt</code> 可以匹配所有以 <code>.txt</code> 为扩展名的文件。</li><li><code>?</code>：匹配单个字符，例如 <code>?.txt</code> 可以匹配一个字符加上 <code>.txt</code> 的文件名。</li></ul><p>下面是一个简单的示例，演示如何使用<code>glob</code>库来查找所有以 <code>.txt</code> 为扩展名的文件：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> globfiles <span class="token operator">=</span> glob<span class="token punctuation">.</span>glob<span class="token punctuation">(</span><span class="token string">'*.txt'</span><span class="token punctuation">)</span> <span class="token comment"># files为列表</span><span class="token keyword">for</span> <span class="token builtin">file</span> <span class="token keyword">in</span> files<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该示例将打印出当前目录下所有以<code>.txt</code>为扩展名的文件名。</p><h3 id="os-模块"><a href="#os-模块" class="headerlink" title="os 模块"></a>os 模块</h3><p>Python的<code>os</code>模块是用于与操作系统进行交互的模块。它提供了许多函数来处理文件和目录以及执行其他与操作系统相关的任务。</p><blockquote><p>官方文档：<a href="https://docs.python.org/3/library/os.html">https://docs.python.org/3/library/os.html</a></p></blockquote><p>下面是<code>os</code>模块的一些常用功能：</p><ol><li>文件和目录操作：<ul><li><code>os.getcwd()</code>：获取当前工作目录的路径。</li><li><code>os.chdir(path)</code>：改变当前工作目录为指定路径。</li><li><code>os.listdir(path)</code>：返回指定目录中的文件和目录列表。</li><li><code>os.mkdir(path)</code>：创建一个新目录。</li><li><code>os.remove(path)</code>：删除指定路径的文件。</li><li><code>os.rmdir(path)</code>：删除指定路径的目录（必须是空目录）。</li><li><code>os.path.join(path1, path2)</code>：将两个路径组合成一个完整的路径。</li></ul></li><li>路径操作：<ul><li><code>os.path.abspath(path)</code>：返回指定路径的绝对路径。</li><li><code>os.path.exists(path)</code>：检查指定路径是否存在。</li><li><code>os.path.isfile(path)</code>：检查指定路径是否为文件。</li><li><code>os.path.isdir(path)</code>：检查指定路径是否为目录。</li><li><code>os.path.splitext(path)</code>：分割路径的扩展名。</li></ul></li><li>系统环境和变量：<ul><li><code>os.environ</code>：包含当前系统环境变量的字典。</li><li><code>os.getenv(name)</code>：获取指定环境变量的值。</li><li><code>os.putenv(name, value)</code>：设置指定环境变量的值。</li></ul></li><li>执行系统命令：<ul><li><code>os.system(command)</code>：在子shell中执行系统命令。</li><li><code>os.popen(command)</code>：打开一个管道，执行系统命令。</li><li><code>os.exec*()</code>：执行一个新的程序，替代当前进程。</li></ul></li></ol><hr><h2 id="Python代码-🧑🏻‍💻"><a href="#Python代码-🧑🏻‍💻" class="headerlink" title="Python代码 🧑🏻‍💻"></a>Python代码 🧑🏻‍💻</h2><blockquote><p>阅读须知：本案例代码均以 MacOS 为例，Window系统的路径名和 MacOS 略有不同❗️</p><p>Python版本：3.9.10</p></blockquote><p>本任务代码</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> shutil<span class="token keyword">import</span> glob<span class="token keyword">import</span> ossource_folder <span class="token operator">=</span> <span class="token string">'/Users/rickyx/Desktop/test'</span>  <span class="token comment"># 大文件夹的路径</span>destination_folder <span class="token operator">=</span> <span class="token string">'/Users/rickyx/Desktop/test/total'</span>  <span class="token comment"># 目标文件夹的路径</span><span class="token comment"># 当前目标文件夹不存在，自动创建该汇总文件夹</span><span class="token keyword">if</span> <span class="token keyword">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>destination_folder<span class="token punctuation">)</span><span class="token punctuation">:</span>    os<span class="token punctuation">.</span>makedirs<span class="token punctuation">(</span>destination_folder<span class="token punctuation">)</span><span class="token keyword">for</span> csv_file <span class="token keyword">in</span> glob<span class="token punctuation">.</span>glob<span class="token punctuation">(</span>source_folder <span class="token operator">+</span> <span class="token string">'/**/*.csv'</span><span class="token punctuation">,</span> recursive<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    shutil<span class="token punctuation">.</span>copy<span class="token punctuation">(</span>csv_file<span class="token punctuation">,</span> destination_folder<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>扩展代码</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> shutil<span class="token keyword">import</span> glob<span class="token keyword">import</span> ossource_folder <span class="token operator">=</span> <span class="token string">''</span>  <span class="token comment"># 在引号中添加大文件夹的路径</span>destination_folder <span class="token operator">=</span> <span class="token string">''</span>  <span class="token comment"># 在引号中添加目标汇总文件夹的路径</span><span class="token comment"># 当前目标文件夹不存在，自动创建该汇总文件夹</span><span class="token keyword">if</span> <span class="token keyword">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>destination_folder<span class="token punctuation">)</span><span class="token punctuation">:</span>    os<span class="token punctuation">.</span>makedirs<span class="token punctuation">(</span>destination_folder<span class="token punctuation">)</span><span class="token comment"># 可以将csv后缀换成自己需要的文件后缀名</span><span class="token keyword">for</span> csv_file <span class="token keyword">in</span> glob<span class="token punctuation">.</span>glob<span class="token punctuation">(</span>source_folder <span class="token operator">+</span> <span class="token string">'/**/*.csv'</span><span class="token punctuation">,</span> recursive<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    shutil<span class="token punctuation">.</span>copy<span class="token punctuation">(</span>csv_file<span class="token punctuation">,</span> destination_folder<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="参考资料-📚"><a href="#参考资料-📚" class="headerlink" title="参考资料 📚"></a>参考资料 📚</h2><ul><li><a href="https://docs.python.org/3/library/shutil.html">https://docs.python.org/3/library/shutil.html</a></li><li><a href="https://docs.python.org/3/library/os.html">https://docs.python.org/3/library/os.html</a></li><li><a href="https://docs.python.org/3/library/glob.html">https://docs.python.org/3/library/glob.html</a></li><li><a href="https://openai.com/blog/chatgpt">https://openai.com/blog/chatgpt</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 自动化办公 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>教学反思｜校师范技能考核</title>
      <link href="/2023/05/29/jiao-xue-fan-si-xiao-shi-fan-ji-neng-kao-he/"/>
      <url>/2023/05/29/jiao-xue-fan-si-xiao-shi-fan-ji-neng-kao-he/</url>
      
        <content type="html"><![CDATA[<p>2023 年 5 月 29 日下午，摊主参加了学校的师范技能考核。</p><p>这次考核的内容是在 <strong>两个小时内</strong> 制作一份 <strong>教学设计</strong>，一份 <strong>课件（PPT）</strong>，并且使用该材料进行 <strong>说课</strong> 和 <strong>模拟上课</strong>。</p><p>摊主抽到的题目是《因特网信息的浏览与获取》，选自浙教版高中信息技术教材（老教材版本）。</p><p>在回顾模拟上课的过程中，摊主发现了自己讲课时的一些问题，于是记录在本博客中，供日后提升巩固。</p><h2 id="问题与思考"><a href="#问题与思考" class="headerlink" title="问题与思考"></a>问题与思考</h2><ul><li>在总结学生回答时，<strong>目光没有面向全体学生，正对教室</strong>，常有低头讲课的情况<ul><li>思考与措施 🚀：<ul><li>在学生回答问题时，面向回答的学生</li><li>在总结学生回答时，面向全体学生（因为总结回答是给其他同学听的）</li><li>寻找「教师目光」的相关资料，进行拓展学习</li></ul></li></ul></li><li>人总是 <strong>左右摇摆</strong>，站的不牢<ul><li>思考与措施 🚀<ul><li>可能是紧张导致的，需要后续多锻炼，在实践中改正</li></ul></li></ul></li><li>写板书时，<strong>人完全面朝黑板</strong>，从学生的角度很难看到自己在写什么<ul><li>思考与措施 🚀<ul><li>写板书时应当侧面面向学生</li><li>多找一些视频资料，看看其他老师是怎么写的</li></ul></li></ul></li><li><strong>板书写错</strong> 时，直接用手擦掉，会留下痕迹，板书不美观<ul><li>思考与措施 🚀<ul><li>黑板擦的合理使用</li></ul></li></ul></li><li>在 <strong>有课件的情况下</strong>，常常 <strong>忘记书写板书</strong>，光顾着放 PPT 了<ul><li>思考与措施 🚀<ul><li>在上课前多练习，在实践中慢慢把握写板书的时机</li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 师范技能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 师范技能 </tag>
            
            <tag> 模拟上课 </tag>
            
            <tag> 教学反思 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>教学反思｜模拟上课练习</title>
      <link href="/2023/05/24/jiao-xue-fan-si-mo-ni-shang-ke-lian-xi/"/>
      <url>/2023/05/24/jiao-xue-fan-si-mo-ni-shang-ke-lian-xi/</url>
      
        <content type="html"><![CDATA[<p>本篇博客还在润色中～</p>]]></content>
      
      
      <categories>
          
          <category> 师范技能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 师范技能 </tag>
            
            <tag> 模拟上课 </tag>
            
            <tag> 教学反思 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>信息奥赛题解｜位数问题</title>
      <link href="/2023/05/21/xin-xi-ao-sai-ti-jie-wei-shu-wen-ti/"/>
      <url>/2023/05/21/xin-xi-ao-sai-ti-jie-wei-shu-wen-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="信息奥赛题解｜位数问题"><a href="#信息奥赛题解｜位数问题" class="headerlink" title="信息奥赛题解｜位数问题"></a>信息奥赛题解｜位数问题</h1><hr><h2 id="🚀-题目浏览"><a href="#🚀-题目浏览" class="headerlink" title="🚀 题目浏览"></a>🚀 题目浏览</h2><h3 id="【题目描述】"><a href="#【题目描述】" class="headerlink" title="【题目描述】"></a>【题目描述】</h3><p>在所有的 $N$ 位数中，有多少个数中有偶数个数字 $3$ ? 由于结果可能很大，你只需要输出这个答案对 $12345$ 取余的值。</p><h3 id="【输入】"><a href="#【输入】" class="headerlink" title="【输入】"></a>【输入】</h3><p>读入一个数 $N(N \le 1000)$。</p><h3 id="【输出】"><a href="#【输出】" class="headerlink" title="【输出】"></a>【输出】</h3><p>输出有多少个数中有偶数个数字 $3$。</p><h3 id="【输入样例】"><a href="#【输入样例】" class="headerlink" title="【输入样例】"></a>【输入样例】</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="【输出样例】"><a href="#【输出样例】" class="headerlink" title="【输出样例】"></a>【输出样例】</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token number">73</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="【原题链接】"><a href="#【原题链接】" class="headerlink" title="【原题链接】"></a>【原题链接】</h3><p><a href="http://ybt.ssoier.cn:8088/problem_show.php?pid=1313">http://ybt.ssoier.cn:8088/problem_show.php?pid=1313</a></p><hr><h2 id="☘️-题解分析"><a href="#☘️-题解分析" class="headerlink" title="☘️ 题解分析"></a>☘️ 题解分析</h2><p>本题对于 <strong>算法初学者</strong> 来说有点难度，且网络上的题解都不是特别清晰，故摊主撰写了本篇详细的题解分析，希望能在未来帮助到更多的同学。</p><br><p>首先以 $N=1$，即 <strong>一位数</strong> 为例，统计一位数中 包含偶数个 3 的个数，记作 $f[1]_偶$ ；统计包含奇数个 3 的个数，记作 $f[1]_奇$ </p><ul><li>由于 0 也是偶数，所以 「<strong>0 个 3</strong>」 也满足偶数个 3 的条件，故 $f[1]_偶$ 为 1～2，4～9，共 8 个数（注意：0 不是一位数），$f[1]_偶 = 8$</li><li>奇数个3 的情况只有单独的 3，所以 $f[1]_奇 = 1$</li></ul><blockquote><p>🍉 PS：有的小伙伴可能会问，题目不是求偶数的情况就够了吗？为什么要还要统计奇数的情况？继续往下看，你就明白了）</p></blockquote><br><p>然后以 $N=2$，即 <strong>两位数</strong> 为例，统计两位数中 包含偶数个 3 的个数，记作 $f[2]_偶$ ；统计包含奇数个 3 的个数，记作 $f[2]_奇$ </p><p>对于 $f[2]_偶$，可以分两种情况进行统计：</p><ul><li><strong>十位为 3</strong>，则 个位必须为奇数个 3，数量为 $f[1]_奇$</li><li><strong>十位不为 3</strong>（十位可以为 1～2，4～9，<strong>共 8 个数</strong>），则 个位必须为偶数个 3 ，数量为 $f[1]_偶$</li></ul><p>所以 $f[2]_偶 = f[1]_奇 + 8 * f[1]_偶$ </p><p>然后我们带入 $f[1]_奇$、$f[1]_偶$ ，得 $f[2]_偶 = f[1]_奇 + 8 * f[1]_偶=1+8*8=64$ ，却发现与样例答案 73 不相等。❌</p><br><p>这是什么原因造成的呢 ?  🧐 　</p><p>实际上，当我们单独拿$f[1]_奇$、$f[1]_偶$ 讨论时，由于 <strong>0 不为一位数</strong>，所以 $f[1]_偶$ 为 1～2，4～9，共 8 个。</p><p>但是当 $N=2$ 时，由于十位上有了数字，所以此时个位上的数字是可以为 0 的，因此在计算 $f[2]_偶$ 时，$f[1]_偶$ 可以取到 0～2，4～9，共 9 个。（<strong>本质</strong>是 <strong>一位数</strong> 和 <strong>个位上的数字</strong> 的区别）</p><p>同理，$f[1]_奇$ 也要考虑 0 的情况，但是此时 0 并不满足 「奇数个3的条件」，所以 $f[1]_奇$ 仍然为 1（这里 $f[1]_奇$ 的值虽然没有变，但是后面的 $f[2]_奇、f[3]_奇$、…、$f[n]_奇$ 的值会在更新后发生改变）</p><p>把新的 $f[1]_偶$、$f[1]_奇$ 的值带入，得到  $f[2]_偶 = f[1]_奇 + 8 * f[1]_偶=1+8*9=73$ </p><p>即为样例答案 73。</p><p>同理，$f[2]_奇 = f[1]_偶 + 8 * f[1]_奇=9+8*1=17$</p><blockquote><p>上面这个 $f[1]_偶$、$f[1]_奇$ 为什么要更新的的原因，是本题的难点，也是本题的解题关键。现在不理解也没关系，继续往下阅读，再分析一个案例，也许你就理解了。</p></blockquote><br><p>然后以 $N=3$，即 <strong>三位数</strong> 为例，也是类似的过程。</p><p>对于 $f[3]_偶$，可以分两种情况：</p><ul><li><strong>百位为 3</strong>，则 十位和个位总体 必须为 奇数个 3，数量为 $f[2]_奇$</li><li><strong>百位不为 3</strong>，则 十位和个位总体 必须为 偶数个 3，数量为 $f[2]_偶$</li></ul><p>所以 $f[3]_偶 = f[2]_奇 + 8 * f[2]_偶$</p><p>同理，$f[3]_奇 = f[2]_偶 + 8 * f[2]_奇$</p><p>同样，由于在计算 $f[2]_奇$ 、$f[2]_偶$ 时，十位不能为0；而引入百位后，十位可以为 0，所以如果要输出的是三位数的结果，则在计算 $f[2]_奇$ 、$f[2]_偶$ 时，也需要考虑 0</p><br><p>现在我们 <strong>重新计算</strong> 求解 $f[3]_偶$ 、$f[3]_奇$ 情况下的 $f[2]_偶$ 、$f[2]_奇$ </p><p>我们在上一步中计算的 $f[2]_偶 = f[1]_奇 + 8 * f[1]_偶=1+8*9=73$ </p><p>其中 8 这个系数，是十位不为 3 ，取 1～2，4～9 得到的（当时十位不能为 0）。但是现在，由于十位可以为0 ，所以十位可以取 0～2，4～9 共 9 个数字，所以上面式子中的系数应该为 9，而不是 8。</p><p>所以新的 $f[2]_偶 = f[1]_奇 + 9 * f[1]_偶=1+9*9=82$ </p><p>同理，新的 $f[2]_奇 = f[1]_偶 + 9 * f[1]_奇=9+9*1=18$</p><p>在得到了新的 $f[2]_偶$、$f[2]_奇$ 后，再带入 $f[3]_偶 = f[2]_奇 + 8 * f[2]_偶$，就能得到正确的 $f[3]_偶$</p><p>🍉 PS：$f[3]_偶 = f[2]_奇 + 8 * f[2]_偶$，这里的系数 8 并不会变成 9，因为此时百位是最高位，不能为 0。</p><p>但是同理，当 $N=4$ 时，由于有千位的存在，百位就可以为 0 ，那么计算$f[3]_偶$ 时，其数值就应该更新为 $f[3]_偶 = f[2]_奇 + 9 * f[2]_偶$</p><blockquote><p>上面推导过程中， $f[2]_偶$、$f[2]_奇$ 为什么要更新，并且 「公式系数从 8 改为 9」的原因，以及计算 $f[3]_偶$、$f[3]_奇$ 时，「公式系数仍为 8 」的原因，是本题的难点，也是本题的解题关键。⭐️</p></blockquote><br><p>根据上面的推导，我们可以得到最终 <strong>n 位数的结果</strong>：</p><ul><li><p>$f[n]_偶 = f[n-1]_奇 + 8 * f[n-1]_偶$</p></li><li><p>$f[n]_奇 = f[n-1]_偶 + 8 * f[n-1]_奇$</p></li></ul><p>而在计算 $f[n-1]_奇$、$f[n-1]_偶$ 时，由于此时最高位可以为 0，上面递推式中表示 1～2，4～9的系数「8」就变成了0～2，4～9的系数「9」，递推公式为：</p><ul><li><p>$f[n-1]_偶 = f[n-2]_奇 + 9 * f[n-2]_偶$</p></li><li><p>$f[n-1]_奇 = f[n-2]_偶 + 9 * f[n-2]_奇$</p></li></ul><p>所以在书写代码时，也需要分为两个表达式来写。✅</p><p>🍉 PS1：在实际编程中，我们可以用 $f[N][0]$ 来表示 $f[N]_偶$ ，用 $f[N][1]$ 来表示 $f[N]_奇$</p><p>🍉 PS2：这种递推问题的答案可能很大，甚至超出 <code>long long</code> 的范围，所以不要忘记题干中的取模要求。</p><hr><h2 id="🧑🏻‍💻-C-代码"><a href="#🧑🏻‍💻-C-代码" class="headerlink" title="🧑🏻‍💻 C++ 代码"></a>🧑🏻‍💻 C++ 代码</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e3</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> K <span class="token operator">=</span> <span class="token number">12345</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">int</span> f<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">//f[n][0]表示 n位数 中包含偶数个3的情况</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//cin读入优化</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        f<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>  <span class="token comment">//1~2,4~9 共 8 个</span>        f<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">//3，共1个</span>        cout <span class="token operator">&lt;&lt;</span> f<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        f<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span>  <span class="token comment">//更高位上有数字，需要考虑0</span>        f<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>              <span class="token comment">//递推2～n-1位数</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">//K = 12345</span>            f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">%</span> K<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">9</span> <span class="token operator">*</span> <span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">%</span> K<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> K<span class="token punctuation">)</span> <span class="token operator">%</span> K<span class="token punctuation">;</span>            f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">%</span> K<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">9</span> <span class="token operator">*</span> <span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">%</span> K<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> K<span class="token punctuation">)</span> <span class="token operator">%</span> K<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//单独计算n位数</span>        f<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">%</span> K<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>f<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">%</span> K<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> K<span class="token punctuation">)</span> <span class="token operator">%</span> K<span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> f<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="😑-吐槽时间"><a href="#😑-吐槽时间" class="headerlink" title="😑 吐槽时间"></a>😑 吐槽时间</h3><p>摊主本人在阅读其他一些题解时，发现有的题解在分析时，认为 $f[1][0]=8$（ 1～2，4～9，因为 0 不算一位数），但是实际代码中，却出现 $f[1][0] = 9$ 的情况，并且没有交代原因。这样的前后矛盾，让不少看题解的小伙伴们感到困惑。</p><p>摊主还发现，有的题解就直接认为 $f[1][0]$ 就应该等于 9，把 0 也算成了一位数，这从 <strong>数学定义的角度</strong> 来看是错误的。❌ （有疑惑的小伙伴可以查阅以下问题：0 算不算一位数 ? 一位数和个位数有什么区别？）</p><p>从推导过程中，我们看到只有在 $N &gt; 1$ 时，<code>f[1][0]</code> 才因为进制的规则，变成了 9。</p><p>说明写其他题解的作者可能没有仔细考虑这其中的关系，这也是摊主撰写此篇题解的原因，希望本题解能真正解答一些小伙伴们的困难。</p><p>摊主也希望阅读此篇题解后，理解了本题的小伙伴，在未来自己写其他题目的题解时，多一份耐心与细致，不要让更多灌水、没有太多思考的题解，污染了这片土壤，浪费其他小伙伴搜索与阅读的时间。☘️</p>]]></content>
      
      
      <categories>
          
          <category> 信息奥赛题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 信息奥赛 </tag>
            
            <tag> C++ </tag>
            
            <tag> 递推 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>信息奥赛题解｜流感传染</title>
      <link href="/2023/05/20/xin-xi-ao-sai-ti-jie-liu-gan-chuan-ran/"/>
      <url>/2023/05/20/xin-xi-ao-sai-ti-jie-liu-gan-chuan-ran/</url>
      
        <content type="html"><![CDATA[<h1 id="信息奥赛题解｜流感传染"><a href="#信息奥赛题解｜流感传染" class="headerlink" title="信息奥赛题解｜流感传染"></a>信息奥赛题解｜流感传染</h1><hr><h2 id="🚀-题目浏览"><a href="#🚀-题目浏览" class="headerlink" title="🚀 题目浏览"></a>🚀 题目浏览</h2><h3 id="【题目描述】"><a href="#【题目描述】" class="headerlink" title="【题目描述】"></a>【题目描述】</h3><p>有一批易感人群住在网格状的宿舍区内，宿舍区为 $n*n$ 的矩阵，每个格点为一个房间，房间里可能住人，也可能空着。</p><p>在第一天，有些房间里的人得了流感，以后每天，得流感的人会使其邻居传染上流感（已经得病的不变），空房间不会传染。</p><p>请输出第 $m$ 天得流感的人数。</p><h3 id="【输入】"><a href="#【输入】" class="headerlink" title="【输入】"></a>【输入】</h3><p>第一行一个数字 $n$，$n$ 不超过 $100$，表示有 $n*n$ 的宿舍房间。</p><p>接下来的 $n$ 行，每行 $n$ 个字符，’.’ 表示第一天该房间住着健康的人，’#’ 表示该房间空着，’@’ 表示第一天该房间住着得流感的人。</p><p>接下来的一行是一个整数 $m$，$m$ 不超过 $100$。</p><h3 id="【输出】"><a href="#【输出】" class="headerlink" title="【输出】"></a>【输出】</h3><p>输出第 $m$ 天，得流感的人数。</p><h3 id="【输入样例】"><a href="#【输入样例】" class="headerlink" title="【输入样例】"></a>【输入样例】</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token number">5</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>#<span class="token punctuation">.</span>#<span class="token punctuation">.</span>@<span class="token punctuation">.</span><span class="token punctuation">.</span>#@<span class="token punctuation">.</span><span class="token punctuation">.</span>#<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="【输出样例】"><a href="#【输出样例】" class="headerlink" title="【输出样例】"></a>【输出样例】</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token number">16</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="【原题链接】"><a href="#【原题链接】" class="headerlink" title="【原题链接】"></a>【原题链接】</h3><p><a href="http://ybt.ssoier.cn:8088/problem_show.php?pid=1191">http://ybt.ssoier.cn:8088/problem_show.php?pid=1191</a></p><hr><h2 id="☘️-题解分析"><a href="#☘️-题解分析" class="headerlink" title="☘️ 题解分析"></a>☘️ 题解分析</h2><p>在摊主看来，本题对于 <strong>算法初学者</strong> 主要有以下几个 <strong>难点</strong>：</p><ul><li>如何读入字符矩阵 ？</li><li>如何模拟感染过程 ？</li></ul><p><strong>对于第一个难点</strong>，摊主采用的方式是 「定义一个 <strong>二维的字符数组</strong>、使用 <strong>cin</strong> 读入数据」（需要开启 <strong>cin 读入优化</strong>，减少读入数据的时间）。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">105</span><span class="token punctuation">;</span><span class="token keyword">char</span> s<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 定义一个二维的字符数组</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//cin 读入优化</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//读入矩阵</span>    cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>            cin <span class="token operator">&gt;&gt;</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>🍉 PS：使用 <code>scanf</code> 读入时，需要考虑 <strong>换行符的读入</strong>，而 <code>cin</code> 则不用，这是 <code>scanf</code> 的缺点；但 <code>scanf</code> 的读入速度比没有开 cin 读入优化的 <code>cin</code> 快很多，这是 <code>scanf</code> 的优点。</p><p><code>cin</code> 在开了 <code>cin</code> 读入优化后，速度基本上能达到 <code>scanf</code> 的水平，此题完全够用了。</p><br><p><strong>对于第二个难点</strong>，摊主采用了 <strong>遍历模拟</strong> 的方法，每天都遍历一次二维矩阵，模拟感染过程。</p><p>模拟过程也非常简单，只需在遍历时，遇到 ‘@’ 的房间，就把四周非空的房间置为 ‘@’</p><p>❗️❗️❗️但是这种方式非常容易出现 <strong>一个误区</strong>，就是 「<strong>每次矩阵还没有遍历完</strong>，就急着把 <strong>当前房间感染的新房间置为 ‘@’</strong> 」</p><p>这样会出现下面这种情况：</p><ul><li>第一天，初始情况</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">@<span class="token punctuation">.</span><span class="token punctuation">.</span>#<span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>第二天，遍历到第 1 个房间时</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">@@<span class="token punctuation">.</span>#<span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>第二天，遍历到第 2 个房间时，由于当前房间被置为了 ‘@’，所以其周围的房间也被置为 ‘@’</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">@@@#@<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>第二天，遍历到第 3 个房间时，由于当前房间被置为了 ‘@’，所以其周围的房间也被置为 ‘@’</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">@@@#@@<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><p>… 省略剩下的遍历过程</p></li><li><p>第二天的最终结果</p></li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">@@@#@@<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这样的得到的结果显然是不对的 ❌ </p><p>因为实际上第 2 天，仅有 2 号房间被感染，3 号房间需要等到第 3 天才会被感染。✅</p><ul><li>第二天实际结果</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">@@<span class="token punctuation">.</span>#<span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><br><p>所以，我们需要借助一个<strong>标记数组 b</strong>，存储当天被感染的房间，而不是在遍历时直接修改原矩阵的值。</p><p>等当天的 <strong>遍历结束后</strong>，再根据标记数组 b 来修改原矩阵的值，这样就不会出现上面这种情况了。</p><p>从代码的角度，是这样的区别：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//模拟感染过程，并标记</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'@'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 错误的直接修改法</span>            <span class="token comment">//if (s[i - 1][j] != '#') s[i - 1][j] = '@';</span>            <span class="token comment">//if (s[i + 1][j] != '#') s[i + 1][j] = '@';</span>            <span class="token comment">//if (s[i][j - 1] != '#') s[i][j - 1] = '@';</span>            <span class="token comment">//if (s[i][j + 1] != '#') s[i][j + 1] = '@';</span>                      <span class="token comment">// 正确的标记法</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token char">'#'</span><span class="token punctuation">)</span> b<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token char">'#'</span><span class="token punctuation">)</span> b<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token char">'#'</span><span class="token punctuation">)</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token char">'#'</span><span class="token punctuation">)</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//将带有标记的房间感染</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'@'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>PS 🍉：本题也可以使用 <strong>广度优先搜索</strong> BFS 的方法求解，具体代码见下文。</p><hr><h2 id="🧑🏻‍💻-C-代码"><a href="#🧑🏻‍💻-C-代码" class="headerlink" title="🧑🏻‍💻 C++ 代码"></a>🧑🏻‍💻 C++ 代码</h2><p>模拟</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">105</span><span class="token punctuation">;</span><span class="token keyword">char</span> s<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 存储房间状态</span><span class="token keyword">int</span> b<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">//用于感染的标记数组</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> cnt<span class="token punctuation">;</span><span class="token comment">// 每天更新矩阵</span><span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 统计并输出感染人数</span><span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// cin读入优化</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//读入矩阵</span>    cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>            cin <span class="token operator">&gt;&gt;</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">// 统计第m天，需要更新m-1次</span>    cin <span class="token operator">&gt;&gt;</span> m<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">--</span>m<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//更新矩阵</span>        <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 统计感染总人数</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//初始化感染标记数组b</span>    <span class="token function">memset</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//模拟感染过程，并标记</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 向四个方向进行感染，标记位置</span>            <span class="token comment">// 注意不能马上把相应房间改为 @，否则会出现一条线上的房间一天就感染完等情况</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'@'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token char">'#'</span><span class="token punctuation">)</span> b<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token char">'#'</span><span class="token punctuation">)</span> b<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token char">'#'</span><span class="token punctuation">)</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token char">'#'</span><span class="token punctuation">)</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">//将带有标记的房间感染</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'@'</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">//统计感染人数</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'@'</span><span class="token punctuation">)</span>                cnt<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> cnt <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>BFS</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> PII<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e2</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">char</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> ans<span class="token punctuation">;</span><span class="token keyword">int</span> dx<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 方向数组</span><span class="token keyword">int</span> dy<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span>queue<span class="token operator">&lt;</span>PII<span class="token operator">&gt;</span> q<span class="token punctuation">,</span> tmp<span class="token punctuation">;</span>  <span class="token comment">// BFS队列</span><span class="token comment">// bfs返回新感染的人数</span><span class="token keyword">int</span> <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// q存储当天初始的感染人的坐标</span>    <span class="token comment">// tmp存储当天新感染的人的坐标</span>    <span class="token comment">// pop()当天q中的坐标，并将四周符合条件的坐标push()到tmp中</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// q的队首元素</span>        PII h <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> x <span class="token operator">=</span> h<span class="token punctuation">.</span>first<span class="token punctuation">,</span> y <span class="token operator">=</span> h<span class="token punctuation">.</span>second<span class="token punctuation">;</span>                <span class="token comment">// 感染四周</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> x1 <span class="token operator">=</span> x <span class="token operator">+</span> dx<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> y1 <span class="token operator">=</span> y <span class="token operator">+</span> dy<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>x1<span class="token punctuation">]</span><span class="token punctuation">[</span>y1<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'.'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                a<span class="token punctuation">[</span>x1<span class="token punctuation">]</span><span class="token punctuation">[</span>y1<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'@'</span><span class="token punctuation">;</span>                tmp<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>x1<span class="token punctuation">,</span> y1<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">// 统计当天感染人数（即tmp中的元素数量），并将tmp中的元素全部push()到q中，便于下一天计算</span>    <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>tmp<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        PII head <span class="token operator">=</span> tmp<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cnt<span class="token operator">++</span><span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>        tmp<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> cnt<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//cin读入优化</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            cin <span class="token operator">&gt;&gt;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment">// 将初始感染人数入队</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'@'</span><span class="token punctuation">)</span> q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>i<span class="token punctuation">,</span> j<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ans<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    cin <span class="token operator">&gt;&gt;</span> m<span class="token punctuation">;</span>  <span class="token comment">// m天（m==1为初始状态）</span>    <span class="token comment">// bfs返回新感染的人数</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> ans <span class="token operator">+=</span> <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> ans <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 信息奥赛题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 信息奥赛 </tag>
            
            <tag> C++ </tag>
            
            <tag> 递推 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Acwing第88场周赛复盘</title>
      <link href="/2023/05/19/acwing-di-88-chang-zhou-sai-fu-pan/"/>
      <url>/2023/05/19/acwing-di-88-chang-zhou-sai-fu-pan/</url>
      
        <content type="html"><![CDATA[<h1 id="【Acwing-周赛复盘】第88场周赛复盘（2023-1-28）"><a href="#【Acwing-周赛复盘】第88场周赛复盘（2023-1-28）" class="headerlink" title="【Acwing 周赛复盘】第88场周赛复盘（2023.1.28）"></a>【Acwing 周赛复盘】第88场周赛复盘（2023.1.28）</h1><h2 id="周赛复盘-✍️"><a href="#周赛复盘-✍️" class="headerlink" title="周赛复盘 ✍️"></a>周赛复盘 ✍️</h2><blockquote><p><strong>本周个人排名</strong>：894/2025</p><p><strong>AC情况</strong>：1/3</p><p>周赛当天晚上，博主在影院观看《流浪地球2》，未实时参加，是在之后的时间里定时自测的。🎬</p><p>感觉自测的氛围和实时比赛还是很不一样的，没有比赛时那种紧张感。人比较松弛，解题时相对从容淡定，希望真正比赛时，也能保持这样的心态，而不是无谓的焦急和紧张。😊</p><p>这也是博主参加的第三次周赛，经过前两次的历练，感觉自己的水平已经有一点提升了。虽然从纸面数据来看，这次只 AC 了 1 题，但是自己做题时的思路却相比前两次开阔了不少，代码完成度也比较高。</p><p>T2 博主是用邻接表存储图，然后对于每个点 DFS 搜索，最后通过邻接矩阵判断所有点是否互通（现场提交时一直 <code>Segmentation Fault</code>，没能顺利找出 BUG。<strong>复盘时</strong>，顺利找出相关BUG（还挺多的。。。），最终根据该思路写出相应 AC 代码；当然，经过y总讲解，发现本题也是一道 <strong>思维题</strong>，直接判断最外层是否为 顺时针/逆时针 即可。</p><p>T3 博主第一反应是用DP，根据思路写出了大部分代码，但是提交结果是 11/15，仍有 4 个测试点没有通过。<strong>复盘时</strong>，经过y总讲解，去学习了 <strong>状态机DP</strong> 的相关内容，顺利写出AC代码。</p><p>总之来说，周赛给自己的提升还是很大的，继续加油 😀</p></blockquote><p><img src="https://ricky-typora-notes.oss-cn-hangzhou.aliyuncs.com/2023-02-21-170415.png" alt="周赛rank图"></p><h2 id="周赛信息-📚"><a href="#周赛信息-📚" class="headerlink" title="周赛信息 📚"></a>周赛信息 📚</h2><p><strong>时间</strong>：2023年 1 月 28 日 19：00-20：15</p><p><strong>竞赛链接</strong>：<a href="https://www.acwing.com/activity/content/2840/">https://www.acwing.com/activity/content/2840/</a></p><p><strong>y总直播间</strong>：<a href="http://live.bilibili.com/21871779">http://live.bilibili.com/21871779</a></p><p><strong>y总录播讲解视频</strong>：<a href="https://www.bilibili.com/video/BV1LM4y1X7yH/?share_source=copy_web&amp;vd_source=33934722b558a5cefa750c1a9be72249">【AcWing杯 - 第 88 场周赛讲解】</a></p><h2 id="题目列表-🧑🏻‍💻"><a href="#题目列表-🧑🏻‍💻" class="headerlink" title="题目列表 🧑🏻‍💻"></a>题目列表 🧑🏻‍💻</h2><table><thead><tr><th align="center">题目名称</th><th align="center">原题链接</th><th align="center">视频链接</th><th align="center">难度</th></tr></thead><tbody><tr><td align="center">4800. 下一个</td><td align="center"><a href="https://www.acwing.com/problem/content/4803/">原题链接</a></td><td align="center"><a href="https://www.acwing.com/video/4608/">视频链接</a></td><td align="center">简单 🟢</td></tr><tr><td align="center">4801. 强连通图</td><td align="center"><a href="https://www.acwing.com/problem/content/4804/">原题链接</a></td><td align="center"><a href="https://www.acwing.com/video/4609/">视频链接</a></td><td align="center">中等 🟡</td></tr><tr><td align="center">4802. 金明的假期</td><td align="center"><a href="https://www.acwing.com/problem/content/4805/">原题链接</a></td><td align="center"><a href="https://www.acwing.com/video/4607/">视频链接</a></td><td align="center">中等 🟡</td></tr></tbody></table><hr><h2 id="题解-🚀"><a href="#题解-🚀" class="headerlink" title="题解 🚀"></a>题解 🚀</h2><h3 id="【题目A】下一个"><a href="#【题目A】下一个" class="headerlink" title="【题目A】下一个"></a>【题目A】下一个</h3><h4 id="【题目描述】"><a href="#【题目描述】" class="headerlink" title="【题目描述】"></a>【题目描述】</h4><p>给定一个整数 $x$，请你找到严格大于 $x$ 且各位数字均不相同的最小整数 $y$。</p><h4 id="【输入】"><a href="#【输入】" class="headerlink" title="【输入】"></a>【输入】</h4><p>一个整数 $x$。</p><h4 id="【输出】"><a href="#【输出】" class="headerlink" title="【输出】"></a>【输出】</h4><p>一个整数 $y$。</p><p>保证一定有解。</p><h4 id="【数据范围】"><a href="#【数据范围】" class="headerlink" title="【数据范围】"></a>【数据范围】</h4><p>所有测试点满足 $1000 \le x \le 9000$。</p><h4 id="【输入样例1】"><a href="#【输入样例1】" class="headerlink" title="【输入样例1】"></a>【输入样例1】</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token number">1987</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="【输出样例1】"><a href="#【输出样例1】" class="headerlink" title="【输出样例1】"></a>【输出样例1】</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token number">2013</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="【输入样例2】"><a href="#【输入样例2】" class="headerlink" title="【输入样例2】"></a>【输入样例2】</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token number">2013</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="【输出样例2】"><a href="#【输出样例2】" class="headerlink" title="【输出样例2】"></a>【输出样例2】</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token number">2014</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="【原题链接】"><a href="#【原题链接】" class="headerlink" title="【原题链接】"></a>【原题链接】</h4><p><a href="https://www.acwing.com/problem/content/4803/">https://www.acwing.com/problem/content/4803/</a></p><hr><h4 id="【题目分析】"><a href="#【题目分析】" class="headerlink" title="【题目分析】"></a>【题目分析】</h4><p>签到题，简单枚举 + 判断即可，判断是否重复的方式有很多种，如：</p><ul><li>利用 <code>to_string</code> 将数字转换成字符串 -&gt; 利用 <code>set</code> 自动去重 -&gt; 比较两个字符串的长度</li><li>利用 数字分割 + 桶 的方式，判断重复</li></ul><h4 id="【复盘后的优化代码】✅"><a href="#【复盘后的优化代码】✅" class="headerlink" title="【复盘后的优化代码】✅"></a>【复盘后的优化代码】✅</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> x<span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> x<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 将当前数字i转换成字符串</span>        string str <span class="token operator">=</span> <span class="token function">to_string</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// set自带去重功能，判断两个字符串长度是否一致，即可判断数字是否重复</span>        set<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">&gt;</span> <span class="token function">str2</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> str<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> str2<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="【周赛现场-AC-代码】"><a href="#【周赛现场-AC-代码】" class="headerlink" title="【周赛现场 AC 代码】"></a>【周赛现场 AC 代码】</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> b<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 判断当前数字t的各个位数是否不同，采用桶的思想</span><span class="token keyword">bool</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">int</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>t <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">++</span>b<span class="token punctuation">[</span>t <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> t <span class="token operator">=</span> t <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    cin <span class="token operator">&gt;&gt;</span> x<span class="token punctuation">;</span>    <span class="token keyword">int</span> t <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 判断当前t是否满足条件</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            cout <span class="token operator">&lt;&lt;</span> t <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            t<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token function">memset</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="【题目B】4801-强连通图"><a href="#【题目B】4801-强连通图" class="headerlink" title="【题目B】4801. 强连通图"></a>【题目B】4801. 强连通图</h3><h4 id="【题目描述】-1"><a href="#【题目描述】-1" class="headerlink" title="【题目描述】"></a>【题目描述】</h4><p>给定一个平面。</p><p>平面中有 $n$ 条与 $x$ 轴平行的 <strong>有向边</strong>，从上到下依次编号为 $1∼n$，每条边都无限长，且两两不重合。</p><p>平面中有 $m$  条与 $y$ 轴平行的 <strong>有向边</strong>，从左到右依次编号为 $1∼m$，每条边都无限长，且两两不重合。</p><p>这些边一共有 $n×m$ 个交点。</p><p>给定每条边的具体方向，请你判断这 $n×m$ 个交点是否满足：从任意交点出发可以到达任意其它交点。</p><h4 id="【输入】-1"><a href="#【输入】-1" class="headerlink" title="【输入】"></a>【输入】</h4><p>第一行包含两个整数 $n,m$。</p><p>第二行包含一个长度为 $n$，由 <code>&lt;</code> 和 <code>&gt;</code> 构成的字符串，其中第 $i$ 个字符用来表示第 $i$ 条与 $x$ 轴平行的 <strong>有向边</strong> 的方向，如果为 <code>&lt;</code> 表示方向从右向左，如果为 <code>&gt;</code> 表示方向从左向右。</p><p>第三行包含一个长度为 $m$，由 <code>^</code> 和 <code>v</code> 构成的字符串，其中第 $i$ 个字符用来表示第 $i$ 条与 $y$ 轴平行的 <strong>有向边</strong> 的方向，如果为 <code>^</code> 表示方向从下向上，如果为 <code>v</code> 表示方向从上向下。</p><h4 id="【输出】-1"><a href="#【输出】-1" class="headerlink" title="【输出】"></a>【输出】</h4><p>如果所有交点满足题目要求，则输出 <code>YES</code>，否则输出 <code>NO</code>。</p><h4 id="【数据范围】-1"><a href="#【数据范围】-1" class="headerlink" title="【数据范围】"></a>【数据范围】</h4><p>前 $5$ 个测试点满足 $2 \le n,m \le 6$。</p><p>所有测试点满足 $2 \le n,m \le 20$。</p><h4 id="【输入样例1】-1"><a href="#【输入样例1】-1" class="headerlink" title="【输入样例1】"></a>【输入样例1】</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token number">3</span> <span class="token number">3</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">&gt;</span>v<span class="token operator">^</span>v<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="【输出样例1】-1"><a href="#【输出样例1】-1" class="headerlink" title="【输出样例1】"></a>【输出样例1】</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">NO<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="【输入样例2】-1"><a href="#【输入样例2】-1" class="headerlink" title="【输入样例2】"></a>【输入样例2】</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token number">4</span> <span class="token number">6</span><span class="token operator">&lt;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">&gt;</span>v<span class="token operator">^</span>v<span class="token operator">^</span>v<span class="token operator">^</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="【输出样例2】-1"><a href="#【输出样例2】-1" class="headerlink" title="【输出样例2】"></a>【输出样例2】</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">YES<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="【原题链接】-1"><a href="#【原题链接】-1" class="headerlink" title="【原题链接】"></a>【原题链接】</h4><p><a href="https://www.acwing.com/problem/content/4804/">https://www.acwing.com/problem/content/4804/</a></p><hr><h4 id="【题目分析】-1"><a href="#【题目分析】-1" class="headerlink" title="【题目分析】"></a>【题目分析】</h4><p>本题是一道隐藏较深的思维题。</p><p>在该题目背景下，想要证明所有点互通，只需要判断 <strong>四个角落上的点</strong> 是否互通 / <strong>四条外边是否为逆时针、顺时针</strong> 即可。具体讲解见y总视频：<a href="https://www.acwing.com/video/4609/">视频链接</a></p><p>简单理解：该条件下，任意点A可以通过其所在的直线走到最外圈，然后还能再回到原来的位置，而其他任意点B也可以通过先到最外圈，再到点A的方式与A连通，因此所有点都是互通的。</p><p><img src="https://ricky-typora-notes.oss-cn-hangzhou.aliyuncs.com/2023-02-21-170419.png" alt="y总思路截图"></p><p>当然，本题也可以用 DFS/BFS + 图论的知识来解决，但是相应代码较为繁琐，BUG修改起来比较麻烦。（博主本人在复盘时改了好久的周赛现场代码，才顺利AC 😂）</p><h4 id="【复盘后的优化代码】（思维题）✅"><a href="#【复盘后的优化代码】（思维题）✅" class="headerlink" title="【复盘后的优化代码】（思维题）✅"></a>【复盘后的优化代码】（思维题）✅</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>string str<span class="token punctuation">;</span><span class="token keyword">char</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">;</span> <span class="token comment">// 代表四条边</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> m<span class="token punctuation">;</span>    <span class="token comment">// 顶边和底边</span>    cin <span class="token operator">&gt;&gt;</span> str<span class="token punctuation">;</span>    a <span class="token operator">=</span> str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> c <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 左边和右边</span>    cin <span class="token operator">&gt;&gt;</span> str<span class="token punctuation">;</span>    b <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> d <span class="token operator">=</span> str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// 判断顺时针 / 逆时针</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token char">'&gt;'</span> <span class="token operator">&amp;&amp;</span> b <span class="token operator">==</span> <span class="token char">'v'</span> <span class="token operator">&amp;&amp;</span> c <span class="token operator">==</span> <span class="token char">'&lt;'</span> <span class="token operator">&amp;&amp;</span> d <span class="token operator">==</span> <span class="token char">'^'</span><span class="token punctuation">)</span> <span class="token operator">||</span> a <span class="token operator">==</span> <span class="token char">'&lt;'</span> <span class="token operator">&amp;&amp;</span> b <span class="token operator">==</span> <span class="token char">'^'</span> <span class="token operator">&amp;&amp;</span> c <span class="token operator">==</span> <span class="token char">'&gt;'</span> <span class="token operator">&amp;&amp;</span> d <span class="token operator">==</span> <span class="token char">'v'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"YES"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"NO"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="【复盘后的周赛现场代码】（邻接表-DFS-邻接矩阵判断）✅"><a href="#【复盘后的周赛现场代码】（邻接表-DFS-邻接矩阵判断）✅" class="headerlink" title="【复盘后的周赛现场代码】（邻接表 + DFS + 邻接矩阵判断）✅"></a>【复盘后的周赛现场代码】（邻接表 + DFS + 邻接矩阵判断）✅</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">410</span><span class="token punctuation">,</span> M <span class="token operator">=</span> N <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">int</span> h<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> e<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">,</span> ne<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">,</span> idx<span class="token punctuation">;</span><span class="token keyword">bool</span> st<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> sum<span class="token punctuation">;</span><span class="token keyword">char</span> c<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    e<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">,</span> ne<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> h<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">,</span> h<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> idx<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 对于每一条水平线，横向加 m-1 条有向边</span><span class="token keyword">void</span> <span class="token function">inputH</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 共有n条水平线，读入n个符号</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        cin <span class="token operator">&gt;&gt;</span> c<span class="token punctuation">;</span>        <span class="token comment">// 水平线方向"-&gt;"</span>        <span class="token comment">// add(1,2),add(2,3)...add(m-1,m) 第1条水平线</span>        <span class="token comment">// add((i-1)*m+1,(i-1)*m+2),add((i-1)*m+2,(i-1)*m+3),...add((i-1)*m+m-1,(i-1)*m+m) 第i条水平线</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token char">'&gt;'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> m <span class="token operator">+</span> j<span class="token punctuation">,</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> m <span class="token operator">+</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token comment">// 水平线方向"&lt;-"，同理，注意下标计算有变化</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token char">'&lt;'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> m<span class="token punctuation">;</span> j <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">--</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> m <span class="token operator">+</span> j<span class="token punctuation">,</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> m <span class="token operator">+</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 对于每一条垂直线，纵向加 n-1 条有向边</span><span class="token keyword">void</span> <span class="token function">inputV</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 共有m条垂直线，读入m个符号</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        cin <span class="token operator">&gt;&gt;</span> c<span class="token punctuation">;</span>        <span class="token comment">// 垂直线方向"v"（以m=3,n=3为例）</span>        <span class="token comment">// add(1,4),add(4,7) 第1条垂直线</span>        <span class="token comment">// add(2,5),add(5,8) 第2条垂直线</span>        <span class="token comment">// add(i,m+i),add(m+i,2*m+i),... 第i条垂直线</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token char">'v'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">(</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> m <span class="token operator">+</span> i<span class="token punctuation">,</span> j <span class="token operator">*</span> m <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token comment">// 水平线方向"&lt;-"，同理，注意下标计算有变化</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token char">'^'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> n<span class="token punctuation">;</span> j <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">--</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">(</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> m <span class="token operator">+</span> i<span class="token punctuation">,</span> <span class="token punctuation">(</span>j <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">*</span> m <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 深度优先搜索，遍历当前结点u的邻接表</span><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> chi<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> h<span class="token punctuation">[</span>chi<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">~</span>i<span class="token punctuation">;</span> i <span class="token operator">=</span> ne<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">// 防止死循环，往回搜索</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>st<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        st<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//cin读入优化</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> m<span class="token punctuation">;</span>    sum <span class="token operator">=</span> n <span class="token operator">*</span> m<span class="token punctuation">;</span>  <span class="token comment">// 顶点总数</span>    <span class="token comment">// 加边</span>    <span class="token function">memset</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> h<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">inputH</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 横向加边</span>    <span class="token function">inputV</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 纵向加边</span>    <span class="token comment">// dfs搜索，判断每一个点是否能够到达其他所有点，结果存储在邻接矩阵st中</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> sum<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 本身默认可到达，即对角线设置为1</span>        st<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 判断邻接矩阵值是否均为1，若都是1，表示所有点互通</span>    <span class="token keyword">bool</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> sum<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> sum<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>st<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token keyword">goto</span> end<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    end<span class="token operator">:</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"YES"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">else</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"NO"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="【周赛现场未-AC-代码】（下面的代码有不少BUG，是不错的反面案例）❌"><a href="#【周赛现场未-AC-代码】（下面的代码有不少BUG，是不错的反面案例）❌" class="headerlink" title="【周赛现场未 AC 代码】（下面的代码有不少BUG，是不错的反面案例）❌"></a>【周赛现场未 AC 代码】（下面的代码有不少BUG，是不错的反面案例）❌</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">10000</span><span class="token punctuation">,</span> M <span class="token operator">=</span> <span class="token number">10000</span><span class="token punctuation">;</span><span class="token keyword">int</span> h<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> e<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">,</span> ne<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">,</span> idx<span class="token punctuation">;</span><span class="token keyword">bool</span> st<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> sum<span class="token punctuation">;</span><span class="token keyword">char</span> c<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    e<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">,</span> ne<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> h<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">,</span> h<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> idx<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> chi<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> h<span class="token punctuation">[</span>chi<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">~</span>i<span class="token punctuation">;</span> i <span class="token operator">=</span> ne<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        st<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//cin读入优化</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> m<span class="token punctuation">;</span>    sum <span class="token operator">=</span> n <span class="token operator">*</span> m<span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> h<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        cin <span class="token operator">&gt;&gt;</span> c<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token char">'&gt;'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> n <span class="token operator">+</span> j<span class="token punctuation">,</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> n <span class="token operator">+</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token char">'&lt;'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> n<span class="token punctuation">;</span> j <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> n <span class="token operator">+</span> j<span class="token punctuation">,</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> n <span class="token operator">+</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        cin <span class="token operator">&gt;&gt;</span> c<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token char">'^'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">(</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">*</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token char">'v'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> n<span class="token punctuation">;</span> j <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">(</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>j <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">*</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> sum<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">bool</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> sum<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> sum<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>st<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token keyword">goto</span> end<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    end<span class="token operator">:</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"YES"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">else</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"NO"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="【代码对比总结】"><a href="#【代码对比总结】" class="headerlink" title="【代码对比总结】"></a>【代码对比总结】</h4><p>经过复盘后的仔细修改，可以发现周赛现场未 AC 的代码有不少BUG，如 <strong>死循环</strong>、<strong>下标计算错误导致越界</strong>、<strong>for循环条件书写错误</strong>（如 <code>j--</code> 写成了 <code>j++</code>）等，这些都是之后在书写代码时，需要注意的。☘️</p><hr><h3 id="【题目C】金明的假期"><a href="#【题目C】金明的假期" class="headerlink" title="【题目C】金明的假期"></a>【题目C】金明的假期</h3><h4 id="【题目描述】-2"><a href="#【题目描述】-2" class="headerlink" title="【题目描述】"></a>【题目描述】</h4><p>金明有 $n$ 天假期，编号 $1∼n$。</p><p>整个假期期间，他每天只可能有三种选择：</p><ol><li>去健身房健身一整天。（前提是当天健身房开放）</li><li>去图书馆看书一整天。（前提是当天图书馆开放）</li><li>在家休息一整天。</li></ol><p>用一个长度为 $n$ 的整数数组 $a_1,a_2,\dots,a_n$ 来表示这 $n$ 天健身房与图书馆的开放情况，其中：</p><ul><li>$a_i$ 等于 $0$ 表示第 $i$ 天健身房关闭且图书馆关闭。</li><li>$a_i$ 等于 $1$ 表示第 $i$ 天健身房关闭但图书馆开放。</li><li>$a_i$ 等于 $2$ 表示第 $i$ 天健身房开放但图书馆关闭。</li><li>$a_i$ 等于 $3$ 表示第 $i$ 天健身房开放且图书馆开放。</li></ul><p>金明希望自己用来休息的天数尽可能少，但是，他一定不会 <strong>连续两天（或更多天）</strong>去健身房健身，也一定不会 <strong>连续两天（或更多天）</strong>去图书馆看书。</p><p>请你计算，金明用来休息的最少可能天数。</p><h4 id="【输入】-2"><a href="#【输入】-2" class="headerlink" title="【输入】"></a>【输入】</h4><p>第一行包含一个整数 $n$。</p><p>第二行包含 $n$ 个整数 $a_1,a_2,\dots,a_n$。</p><h4 id="【输出】-2"><a href="#【输出】-2" class="headerlink" title="【输出】"></a>【输出】</h4><p>一个整数，表示金明用来休息的最少可能天数。</p><h4 id="【数据范围】-2"><a href="#【数据范围】-2" class="headerlink" title="【数据范围】"></a>【数据范围】</h4><p>前 $5$ 个测试点满足 $1 \le n \le 10$。<br>所有测试点满足 $1 \le n \le 100$，$0 \le ai \le 3$。</p><h4 id="【输入样例1】-2"><a href="#【输入样例1】-2" class="headerlink" title="【输入样例1】"></a>【输入样例1】</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token number">4</span><span class="token number">1</span> <span class="token number">3</span> <span class="token number">2</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="【输出样例1】-2"><a href="#【输出样例1】-2" class="headerlink" title="【输出样例1】"></a>【输出样例1】</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="【输入样例2】-2"><a href="#【输入样例2】-2" class="headerlink" title="【输入样例2】"></a>【输入样例2】</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token number">7</span><span class="token number">1</span> <span class="token number">3</span> <span class="token number">3</span> <span class="token number">2</span> <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="【输出样例2】-2"><a href="#【输出样例2】-2" class="headerlink" title="【输出样例2】"></a>【输出样例2】</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="【输入样例3】"><a href="#【输入样例3】" class="headerlink" title="【输入样例3】"></a>【输入样例3】</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token number">2</span><span class="token number">2</span> <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="【输出样例3】"><a href="#【输出样例3】" class="headerlink" title="【输出样例3】"></a>【输出样例3】</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="【原题链接】-2"><a href="#【原题链接】-2" class="headerlink" title="【原题链接】"></a>【原题链接】</h4><p><a href="https://www.acwing.com/problem/content/4805/">https://www.acwing.com/problem/content/4805/</a></p><hr><h4 id="【题目分析】-2"><a href="#【题目分析】-2" class="headerlink" title="【题目分析】"></a>【题目分析】</h4><p>状态机 DP。</p><p>二维 DP 数组 <code>dp[i][k]</code> 的第一维存储天数，第二维存储 休息/去图书馆/去健身房 三种状态</p><ul><li><code>dp[i][0]</code> 表示第 i 天休息时，前 i 天的总工作天数</li><li><code>dp[i][1]</code> 表示第 i 天去图书馆时，前 i 天的总工作天数</li><li><code>dp[i][2]</code> 表示第 i 天去健身时，前 i 天的总工作天数</li></ul><p>具体细节见代码注释。</p><h4 id="【复盘后的优化代码】✅-1"><a href="#【复盘后的优化代码】✅-1" class="headerlink" title="【复盘后的优化代码】✅"></a>【复盘后的优化代码】✅</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">110</span><span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> n<span class="token punctuation">;</span><span class="token keyword">int</span> dp<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 返回三个数最大值（PS: max中最多包含两个参数，所以比较三个时要写两次max）</span><span class="token keyword">int</span> <span class="token function">maxV</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> <span class="token keyword">int</span> z<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">max</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token function">max</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span> z<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//cin读入优化</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> cin <span class="token operator">&gt;&gt;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// dp[i][k] -&gt; i表示天数，k表示状态</span>    <span class="token comment">// dp[i][0]表示第i天休息时，前i天的总工作天数</span>    <span class="token comment">// dp[i][1]表示第i天去图书馆时，前i天的总工作天数</span>    <span class="token comment">// dp[i][2]表示第i天去健身时，前i天的总工作天数</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 第i天选择休息（没有限制条件），取i-1天工作天数最大值</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">maxV</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 第i天选择去图书馆（必须在a[i]为1或者3的情况下），取(i-1天休息+1，i-1天去图书馆，i-1天去健身+1）最大值</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">||</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">maxV</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 第i天选择去健身（必须在a[i]为2或者3的情况下），取(i-1天休息+1，i-1天去图书馆+1，i-1天去健身）最大值</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">||</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">maxV</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// PS: max中最多包含两个参数，所以比较三个时要写两次max</span>    cout <span class="token operator">&lt;&lt;</span> n <span class="token operator">-</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="【周赛现场未-AC-代码】❌"><a href="#【周赛现场未-AC-代码】❌" class="headerlink" title="【周赛现场未 AC 代码】❌"></a>【周赛现场未 AC 代码】❌</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">105</span><span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> n<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//cin读入优化</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> cin <span class="token operator">&gt;&gt;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span> <span class="token operator">-</span> a<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> a<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">3</span> <span class="token operator">||</span> a<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> a<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">3</span> <span class="token operator">||</span> a<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> n <span class="token operator">-</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="【代码对比总结】-1"><a href="#【代码对比总结】-1" class="headerlink" title="【代码对比总结】"></a>【代码对比总结】</h4><p>对比两个代码，可以发现周赛现场的代码虽然有状态分类、表示的雏形，但是由于缺乏 状态机DP 的理论知识，没能系统、完整的写出代码，存在BUG，有 4 个点未通过。</p><p>说明还是要多看课，把基础的知识点学好，再在周赛中把这些知识点融会贯通。</p><hr>]]></content>
      
      
      <categories>
          
          <category> Acwing周赛复盘 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 信息奥赛 </tag>
            
            <tag> Acwing </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CS50 Problem Set8</title>
      <link href="/2023/05/18/cs50-problem-set8/"/>
      <url>/2023/05/18/cs50-problem-set8/</url>
      
        <content type="html"><![CDATA[<h1 id="Problem-Set-8"><a href="#Problem-Set-8" class="headerlink" title="Problem Set 8"></a>Problem Set 8</h1><blockquote><p>CS50 Problem Set8 Page：<a href="https://cs50.harvard.edu/x/2023/psets/8/">https://cs50.harvard.edu/x/2023/psets/8/</a></p><p>CS50 Study Group：677535709（QQ Group）</p></blockquote><h2 id="What-to-Do-🚀"><a href="#What-to-Do-🚀" class="headerlink" title="What to Do 🚀"></a>What to Do 🚀</h2><p>Be sure you have completed <a href="https://cs50.harvard.edu/x/2023/labs/8/">Lab 8</a> before beginning this problem set.</p><ol><li>Log into <a href="https://code.cs50.io/">code.cs50.io</a> using your GitHub account</li><li>Run <code>update50</code> in your codespace’s terminal window to ensure your codespace is up-to-date and, when prompted, click <strong>Rebuild now</strong></li><li>Submit <a href="https://cs50.harvard.edu/x/2023/psets/8/homepage/">Homepage</a></li></ol><h2 id="Problem-Set-📚"><a href="#Problem-Set-📚" class="headerlink" title="Problem Set 📚"></a>Problem Set 📚</h2><h3 id="P1-HomePage"><a href="#P1-HomePage" class="headerlink" title="P1-HomePage"></a>P1-HomePage</h3><blockquote><p><a href="https://cs50.harvard.edu/x/2023/psets/8/homepage/">https://cs50.harvard.edu/x/2023/psets/8/homepage/</a></p></blockquote><hr><h2 id="Solution-🧑🏻‍💻"><a href="#Solution-🧑🏻‍💻" class="headerlink" title="Solution 🧑🏻‍💻"></a>Solution 🧑🏻‍💻</h2><p>Ricky’s GitHub Repository for CS50 Problem Sets: <a href="https://github.com/Ricky2333/CS50-PSet">https://github.com/Ricky2333/CS50-PSet</a></p><blockquote><p>CS50 Study Group：677535709（QQ Group）</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> CS50 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CS50 </tag>
            
            <tag> Web </tag>
            
            <tag> CS50 PSet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CS50 Lab8</title>
      <link href="/2023/05/17/cs50-lab8/"/>
      <url>/2023/05/17/cs50-lab8/</url>
      
        <content type="html"><![CDATA[<h1 id="Lab-8-Trivia"><a href="#Lab-8-Trivia" class="headerlink" title="Lab 8: Trivia"></a>Lab 8: Trivia</h1><blockquote><p>Lab7 Page: <a href="https://cs50.harvard.edu/x/2023/labs/8/">https://cs50.harvard.edu/x/2023/labs/8/</a></p><p>CS50 Study Group：677535709（QQ Group）</p></blockquote><p>Write a webpage that lets users answer trivia questions.</p><p><img src="https://ricky-typora-notes.oss-cn-hangzhou.aliyuncs.com/questions.png"></p><h2 id="Getting-Started-🍉"><a href="#Getting-Started-🍉" class="headerlink" title="Getting Started 🍉"></a>Getting Started 🍉</h2><p>Started CS50x in 2021 or prior and need to migrate your work from CS50 IDE to the new VS Code codespace? Be sure to check out our instructions on how to <a href="https://cs50.harvard.edu/x/2023/new/">migrate</a> your files!</p><p>Open <a href="https://code.cs50.io/">VS Code</a>.</p><p>Start by clicking inside your terminal window, then execute <code>cd</code> by itself. You should find that its “prompt” resembles the below.</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Click inside of that terminal window and then execute</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> https://cdn.cs50.net/2022/fall/labs/8/trivia.zip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>followed by Enter in order to download a ZIP called <code>trivia.zip</code> in your codespace. Take care not to overlook the space between <code>wget</code> and the following URL, or any other character for that matter!</p><p>Now execute</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">unzip</span> trivia.zip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>to create a folder called <code>trivia</code>. You no longer need the ZIP file, so you can execute</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rm</span> trivia.zip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>and respond with “y” followed by Enter at the prompt to remove the ZIP file you downloaded.</p><p>Now type</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> trivia<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>followed by Enter to move yourself into (i.e., open) that directory. Your prompt should now resemble the below.</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">trivia/ $<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>If all was successful, you should execute</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ls</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>and you should see an <code>index.html</code> file and a <code>styles.css</code> file.</p><p>If you run into any trouble, follow these same steps again and see if you can determine where you went wrong!</p><h2 id="Implementation-Details-📚"><a href="#Implementation-Details-📚" class="headerlink" title="Implementation Details 📚"></a>Implementation Details 📚</h2><p>Design a webpage using HTML, CSS, and JavaScript to let users answer trivia questions.</p><ul><li>In <code>index.html</code>, add beneath “Part 1” a multiple-choice trivia question of your choosing with HTML.<ul><li>You should use an <code>h3</code> heading for the text of your question.</li><li>You should have one <code>button</code> for each of the possible answer choices. There should be at least three answer choices, of which exactly one should be correct.</li></ul></li><li>Using JavaScript, add logic so that the buttons change colors when a user clicks on them.<ul><li>If a user clicks on a button with an incorrect answer, the button should turn red and text should appear beneath the question that says “Incorrect”.</li><li>If a user clicks on a button with the correct answer, the button should turn green and text should appear beneath the question that says “Correct!”.</li></ul></li><li>In <code>index.html</code>, add beneath “Part 2” a text-based free response question of your choosing with HTML.<ul><li>You should use an <code>h3</code> heading for the text of your question.</li><li>You should use an <code>input</code> field to let the user type a response.</li><li>You should use a <code>button</code> to let the user confirm their answer.</li></ul></li><li>Using JavaScript, add logic so that the text field changes color when a user confirms their answer.<ul><li>If the user types an incorrect answer and presses the confirmation button, the text field should turn red and text should appear beneath the question that says “Incorrect”.</li><li>If the user types the correct answer and presses the confirmation button, the input field should turn green and text should appear beneath the question that says “Correct!”.</li></ul></li></ul><p>Optionally, you may also:</p><ul><li>Edit <code>styles.css</code> to change the CSS of your webpage!</li><li>Add additional trivia questions to your trivia quiz if you would like!</li></ul><h2 id="Walkthrough-🎥"><a href="#Walkthrough-🎥" class="headerlink" title="Walkthrough 🎥"></a>Walkthrough 🎥</h2><p>This video was recorded when the course was still using CS50 IDE for writing code. Though the interface may look different from your codespace, the behavior of the two environments should be largely similar!</p><blockquote><p>YouTube: <a href="https://youtu.be/WGd0Jx7rxUo">https://youtu.be/WGd0Jx7rxUo</a></p><p>bilibili: <a href="https://www.bilibili.com/video/BV1Ts4y1z7rg?share_source=copy_web">https://www.bilibili.com/video/BV1Ts4y1z7rg?share_source=copy_web</a></p></blockquote><h2 id="Hints-💡"><a href="#Hints-💡" class="headerlink" title="Hints 💡"></a>Hints 💡</h2><ul><li>Use <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector"><code>document.querySelector</code></a> to query for a single HTML element.</li><li>Use <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelectorAll"><code>document.querySelectorAll</code></a> to query for multiple HTML elements that match a query. The function returns an array of all matching elements.</li></ul><h2 id="Testing-🛠"><a href="#Testing-🛠" class="headerlink" title="Testing 🛠"></a>Testing 🛠</h2><p>No <code>check50</code> for this lab, as implementations will vary based on your questions! But be sure to test both incorrect and correct responses for each of your questions to ensure that your webpage responds appropriately.</p><p>Run <code>http-server</code> in your terminal while in your <code>lab8</code> directory to start a web server that serves your webpage.</p><h2 id="How-to-Submit-🚀"><a href="#How-to-Submit-🚀" class="headerlink" title="How to Submit 🚀"></a>How to Submit 🚀</h2><p>In your terminal, execute the below to submit your work.</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">submit50 cs50/labs/2023/x/trivia<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Solution-🧑🏻‍💻"><a href="#Solution-🧑🏻‍💻" class="headerlink" title="Solution 🧑🏻‍💻"></a>Solution 🧑🏻‍💻</h2><p>Ricky’s GitHub Repository for CS50 Labs: <a href="https://github.com/Ricky2333/CS50-Labs">https://github.com/Ricky2333/CS50-Labs</a></p><blockquote><p>CS50 Study Group：677535709（QQ Group）</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> CS50 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CS50 </tag>
            
            <tag> CS50 Lab </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Acwing第87场周赛复盘</title>
      <link href="/2023/05/10/acwing-di-87-chang-zhou-sai-fu-pan/"/>
      <url>/2023/05/10/acwing-di-87-chang-zhou-sai-fu-pan/</url>
      
        <content type="html"><![CDATA[<h1 id="【Acwing-周赛复盘】第87场周赛复盘（2023-1-21）"><a href="#【Acwing-周赛复盘】第87场周赛复盘（2023-1-21）" class="headerlink" title="【Acwing 周赛复盘】第87场周赛复盘（2023.1.21）"></a>【Acwing 周赛复盘】第87场周赛复盘（2023.1.21）</h1><h2 id="周赛复盘-✍️"><a href="#周赛复盘-✍️" class="headerlink" title="周赛复盘 ✍️"></a>周赛复盘 ✍️</h2><blockquote><p>本周个人排名：281/1252（22.4%）</p><p>AC情况：2/3</p><p>一次伴随着除夕夜鞭炮声、烟花声进行的周赛 🎉</p><p>大年三十都有1k多名小伙伴一起打比赛，不得不说 Acwing 的学习氛围真好</p><p>这是博主第二次参加的周赛，从排名比来看，相比第一次的 28.7% 略有进步😀</p><p>但是不知道为什么这次敲代码时比上次急躁不少，也许是第一次周赛复盘时，看见 TOP5 的大佬都是不到 5 分钟敲完了，实力的差距让自己有了心理压力吧</p><p>但是怎么说呢，实力和题量放在那，其实自己再怎么着急也是无济于事的，焦急的心态反而会影响自己的发挥，不如稳下心来，慢慢思考。</p><p>希望下次能够摆正心态，同时平常更加努力学习，继续加油 💪</p></blockquote><p><img src="https://ricky-typora-notes.oss-cn-hangzhou.aliyuncs.com/2023-02-21-170409.png" alt="周赛rank图"></p><h2 id="周赛信息-📚"><a href="#周赛信息-📚" class="headerlink" title="周赛信息 📚"></a>周赛信息 📚</h2><p><strong>时间</strong>：2023年 1 月 21 日 19：00-20：15</p><p><strong>竞赛链接</strong>：<a href="https://www.acwing.com/activity/content/introduction/2814/">https://www.acwing.com/activity/content/introduction/2814/</a></p><p><strong>y总直播间</strong>：<a href="http://live.bilibili.com/21871779">http://live.bilibili.com/21871779</a></p><p><strong>y总录播讲解视频</strong>：<a href="https://www.bilibili.com/video/BV1LM4y1X7yH/?share_source=copy_web&amp;vd_source=33934722b558a5cefa750c1a9be72249">【AcWing杯 - 第87场周赛讲解】</a></p><h2 id="题目列表-🧑🏻‍💻"><a href="#题目列表-🧑🏻‍💻" class="headerlink" title="题目列表 🧑🏻‍💻"></a>题目列表 🧑🏻‍💻</h2><br><table><thead><tr><th align="center">题目名称</th><th align="center">原题链接</th><th align="center">视频讲解</th><th align="center">难度</th></tr></thead><tbody><tr><td align="center">4797. 移动棋子</td><td align="center"><a href="https://www.acwing.com/problem/content/4800/">原题链接</a></td><td align="center"><a href="https://www.acwing.com/video/4610/">视频链接</a></td><td align="center">简单 🟢</td></tr><tr><td align="center">4798. 打怪兽</td><td align="center"><a href="https://www.acwing.com/problem/content/4801/">原题链接</a></td><td align="center"><a href="https://www.acwing.com/video/4612/">视频链接</a></td><td align="center">中等 🟡</td></tr><tr><td align="center">4799. 最远距离</td><td align="center"><a href="https://www.acwing.com/problem/content/4802/">原题链接</a></td><td align="center"><a href="https://www.acwing.com/video/4611/">视频链接</a></td><td align="center">困难 🔴</td></tr></tbody></table><hr><h2 id="题解-🚀"><a href="#题解-🚀" class="headerlink" title="题解 🚀"></a>题解 🚀</h2><h3 id="【题目A】移动棋子"><a href="#【题目A】移动棋子" class="headerlink" title="【题目A】移动棋子"></a>【题目A】移动棋子</h3><h4 id="【题目描述】"><a href="#【题目描述】" class="headerlink" title="【题目描述】"></a>【题目描述】</h4><p>给定一个 $5$ 行 $5$ 列的方格矩阵，其中一个方格中有一个棋子。</p><p>现在，我们希望将棋子移动至矩阵的最中心方格中，即将其移动至矩阵的第 $3$ 行第 $3$ 列方格中。</p><p>每次移动可以将棋子沿上、下、左、右任一方向移动一格距离，前提是不能移出矩阵。</p><p>请你计算，为了将棋子移动至矩阵的最中心方格中，所需要的最少移动次数。</p><p>如果棋子一开始就在最中心方格中，则无需移动。·</p><h4 id="【输入】"><a href="#【输入】" class="headerlink" title="【输入】"></a>【输入】</h4><p>输入共 $5$ 行，每行包含 $5$ 个整数，其中第 $i$ 行第 $j$ 列的整数表示第 $i$ 行第 $j$ 列方格的状态，如果为 $0$，则表示该方格中没有棋子，如果为 $1$，则表示该方格中有棋子。</p><p>保证只有一个方格中有棋子。</p><h4 id="【输出】"><a href="#【输出】" class="headerlink" title="【输出】"></a>【输出】</h4><p>一个整数，表示所需要的最少移动次数。</p><h4 id="【数据范围】"><a href="#【数据范围】" class="headerlink" title="【数据范围】"></a>【数据范围】</h4><p>所有测试点满足，输入恰好包含 $24$ 个 $0$ 和 $1$ 个 $1$。</p><h4 id="【输入样例1】"><a href="#【输入样例1】" class="headerlink" title="【输入样例1】"></a>【输入样例1】</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span><span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">1</span><span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span><span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span><span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="【输出样例1】"><a href="#【输出样例1】" class="headerlink" title="【输出样例1】"></a>【输出样例1】</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="【输入样例2】"><a href="#【输入样例2】" class="headerlink" title="【输入样例2】"></a>【输入样例2】</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span><span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span><span class="token number">0</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span><span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span><span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="【输出样例2】"><a href="#【输出样例2】" class="headerlink" title="【输出样例2】"></a>【输出样例2】</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="【输入样例3】"><a href="#【输入样例3】" class="headerlink" title="【输入样例3】"></a>【输入样例3】</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span><span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span><span class="token number">0</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">0</span><span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span><span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="【输出样例3】"><a href="#【输出样例3】" class="headerlink" title="【输出样例3】"></a>【输出样例3】</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="【原题链接】"><a href="#【原题链接】" class="headerlink" title="【原题链接】"></a>【原题链接】</h4><p><a href="https://www.acwing.com/problem/content/4800/">https://www.acwing.com/problem/content/4800/</a></p><hr><h4 id="【题目分析】"><a href="#【题目分析】" class="headerlink" title="【题目分析】"></a>【题目分析】</h4><p>签到题，归纳起来就是求解两个点 $(x_a,y_a),(x_b,y_b)$ 之间的「<strong>曼哈顿距离</strong>」，公式：<br>$$<br>c = \lvert x_a - x_b\rvert + \lvert y_a - y_b \rvert<br>$$<br><img src="https://ricky-typora-notes.oss-cn-hangzhou.aliyuncs.com/2023-02-21-170411.png" alt="曼哈顿距离"></p><h4 id="【复盘后的优化代码】✅"><a href="#【复盘后的优化代码】✅" class="headerlink" title="【复盘后的优化代码】✅"></a>【复盘后的优化代码】✅</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> x<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//cin读入优化</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>            cin <span class="token operator">&gt;&gt;</span> x<span class="token punctuation">;</span>            <span class="token comment">// 当前坐标点值为1，输出其和中心点的距离</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>                cout <span class="token operator">&lt;&lt;</span> <span class="token function">abs</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">abs</span><span class="token punctuation">(</span>j <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="【周赛现场-AC-代码】"><a href="#【周赛现场-AC-代码】" class="headerlink" title="【周赛现场 AC 代码】"></a>【周赛现场 AC 代码】</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//cin读入优化</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>            cin <span class="token operator">&gt;&gt;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                x <span class="token operator">=</span> i<span class="token punctuation">;</span>                y <span class="token operator">=</span> j<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token function">abs</span><span class="token punctuation">(</span>x <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">abs</span><span class="token punctuation">(</span>y <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="【代码总结分析】"><a href="#【代码总结分析】" class="headerlink" title="【代码总结分析】"></a>【代码总结分析】</h4><ul><li>刚开始想复杂了，把此题和 <strong>有障碍的 BFS、DFS 迷宫题</strong> 混为一谈，想着用搜索的方式去求解。写到一半发现没必要，直接用数学方法求解即可。</li><li>经过y总讲解，搜索了「<strong>曼哈顿距离</strong>」的相关内容，发现直接使用该公式即可，说明平常还是需要多积累。</li></ul><hr><h3 id="【题目B】打怪兽"><a href="#【题目B】打怪兽" class="headerlink" title="【题目B】打怪兽"></a>【题目B】打怪兽</h3><h4 id="【题目描述】-1"><a href="#【题目描述】-1" class="headerlink" title="【题目描述】"></a>【题目描述】</h4><p>有 $n$ 个怪兽（编号 $1∼n$），其中第 $i$ 个怪兽的防御值为 $a_i$。</p><p>你是一个魔法师，初始时拥有 $m$ 点法力值。</p><p>当你的法力值大于 $0$ 时，你可以对怪兽发动攻击，每一次攻击具体为：</p><ul><li>任意选择 $1∼2$ 个怪兽，并消耗 $x$ 点法力值（$x$ 可以是一个不超过你当前法力值的任意正整数），对每个所选怪兽发动一次伤害为 $x$ 的攻击。</li><li>对于受到攻击的怪兽，如果其防御值 <strong>小于或等于</strong> $x$，则会被你消灭。否则，它将免疫此次攻击，不受任何影响。</li></ul><p>请你确定最大的整数 $k$，满足：通过合理安排攻击，可以将第 $1∼k$ 个怪兽全部消灭。</p><h4 id="【输入】-1"><a href="#【输入】-1" class="headerlink" title="【输入】"></a>【输入】</h4><p>第一行包含整数 $n,m$。</p><p>第二行包含 $n$ 个整数 $a_1,a_2,\dots,a_n$。</p><h4 id="【输出】-1"><a href="#【输出】-1" class="headerlink" title="【输出】"></a>【输出】</h4><p>一个整数，表示最大的整数 $k$。</p><h4 id="【数据范围】-1"><a href="#【数据范围】-1" class="headerlink" title="【数据范围】"></a>【数据范围】</h4><p>前 $3$ 个测试点满足 $1 \le n,m \le 10$。</p><p>所有测试点满足 $1 \le n \le 1000$，$1 \le m \le 10^9$，$1 \le ai \le m$。</p><h4 id="【输入样例1】-1"><a href="#【输入样例1】-1" class="headerlink" title="【输入样例1】"></a>【输入样例1】</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token number">5</span> <span class="token number">7</span><span class="token number">2</span> <span class="token number">3</span> <span class="token number">5</span> <span class="token number">4</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="【输出样例1】-1"><a href="#【输出样例1】-1" class="headerlink" title="【输出样例1】"></a>【输出样例1】</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="【输入样例2】-1"><a href="#【输入样例2】-1" class="headerlink" title="【输入样例2】"></a>【输入样例2】</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token number">10</span> <span class="token number">10</span><span class="token number">9</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="【输出样例2】-1"><a href="#【输出样例2】-1" class="headerlink" title="【输出样例2】"></a>【输出样例2】</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token number">4</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="【输入样例3】-1"><a href="#【输入样例3】-1" class="headerlink" title="【输入样例3】"></a>【输入样例3】</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token number">5</span> <span class="token number">10</span><span class="token number">3</span> <span class="token number">1</span> <span class="token number">4</span> <span class="token number">2</span> <span class="token number">4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="【输出样例3】-1"><a href="#【输出样例3】-1" class="headerlink" title="【输出样例3】"></a>【输出样例3】</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token number">5</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="【原题链接】-1"><a href="#【原题链接】-1" class="headerlink" title="【原题链接】"></a>【原题链接】</h4><p><a href="https://www.acwing.com/problem/content/4801/">https://www.acwing.com/problem/content/4801/</a></p><hr><h4 id="【题目分析】-1"><a href="#【题目分析】-1" class="headerlink" title="【题目分析】"></a>【题目分析】</h4><p>二分 + 排序 + 贪心</p><ul><li>二分 满足条件的 k</li><li>临时数组拷贝 <code>a[1]-a[k]</code> ，从大到小进行排序</li><li>贪心法分析消灭怪兽的最优方式：把排好序的怪兽 2个2个 为一组，每次消灭一组怪兽</li></ul><h4 id="【复盘后的优化代码】✅-1"><a href="#【复盘后的优化代码】✅-1" class="headerlink" title="【复盘后的优化代码】✅"></a>【复盘后的优化代码】✅</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e3</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> t<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">int</span> mid<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 拷贝数组a到t</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> mid<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> t<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// t数组从大到小排序</span>    <span class="token function">sort</span><span class="token punctuation">(</span>t <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> t <span class="token operator">+</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token generic-function"><span class="token function">greater</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 两个数一组，累加每组第一个数</span>    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> mid<span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        sum <span class="token operator">+=</span> t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">// 判断当前sum是否已超出法力值m</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">&gt;</span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//cin读入优化</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> m<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> cin <span class="token operator">&gt;&gt;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// 二分寻找k</span>    <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> r <span class="token operator">=</span> n<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> l <span class="token operator">+</span> r <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span><span class="token punctuation">)</span> l <span class="token operator">=</span> mid<span class="token punctuation">;</span>        <span class="token keyword">else</span> r <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> l <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="【周赛现场-AC-代码】-1"><a href="#【周赛现场-AC-代码】-1" class="headerlink" title="【周赛现场 AC 代码】"></a>【周赛现场 AC 代码】</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1005</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">cmp</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> a <span class="token operator">&gt;</span> b<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//cin读入优化</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> m<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> cin <span class="token operator">&gt;&gt;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> km <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>k<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 拷贝a数组前k个元素至b中</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> k<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// 对b数组排序</span>        <span class="token function">sort</span><span class="token punctuation">(</span>b <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> b <span class="token operator">+</span> k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 2个2个累加，判断当前1～k个元素需要的法力值是否 &lt; 拥有法力值</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        ll sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;=</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>            sum <span class="token operator">+=</span> b<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            j <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">&lt;=</span> m<span class="token punctuation">)</span> km <span class="token operator">=</span> k<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> km <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="【代码对比总结】"><a href="#【代码对比总结】" class="headerlink" title="【代码对比总结】"></a>【代码对比总结】</h4><ul><li>周赛现场求解 <code>k</code> 时，摊主是从 $1$ 开始枚举，判断当前 <code>k</code> 个数能否满足条件。虽然本题也能通过，但是如果 $n$ 的数据范围很大，该方法就不行了。</li><li>经过 y总讲解时，发现 <code>k</code> 具有二段性，可以通过 <strong>二分</strong> 的方法快速求解，大大降低时间复杂度，值得借鉴。</li><li><code>sort()</code> 函数从大到小排序，除了自定义 <code>cmp</code> 函数，也可以选择添加 <code>greater&lt;int&gt;()</code> 参数：<code>sort(t,t+n,greater&lt;int&gt;())</code> 的方式会更加方便。</li></ul><hr><h3 id="【题目C】最远距离"><a href="#【题目C】最远距离" class="headerlink" title="【题目C】最远距离"></a>【题目C】最远距离</h3><h4 id="【题目描述】-2"><a href="#【题目描述】-2" class="headerlink" title="【题目描述】"></a>【题目描述】</h4><p>我们规定，如果一个无向连通图满足去掉其中的任意一条边都会使得该图变得不连通，则称该图为 <strong>有效无向连通图</strong>。</p><p>给定一个 $n$ 个点 $m$ 条边的 <strong>有效无向连通图</strong>，点的编号为 $1∼n$，所有边的长度均为 $1$。</p><p>两点之间的距离定义为两点之间的 <strong>最短距离</strong>。</p><p>请你计算，给定图中距离最远的两个点之间的距离。</p><h4 id="【输入】-2"><a href="#【输入】-2" class="headerlink" title="【输入】"></a>【输入】</h4><p>第一行包含两个整数 $n,m$。</p><p>接下来 $m$ 行，每行包含两个整数 $a,b$，表示点 $a$ 和点 $b$ 之间存在一条无向边。</p><h4 id="【输出】-2"><a href="#【输出】-2" class="headerlink" title="【输出】"></a>【输出】</h4><p>一个整数，表示给定图中距离最远的两个点之间的距离。</p><h4 id="【数据范围】-2"><a href="#【数据范围】-2" class="headerlink" title="【数据范围】"></a>【数据范围】</h4><p>前三个测试点满足 $1 \le n,m \le 10$。</p><p>所有测试点满足 $1 \le n,m \le 10^5$，$1 \le a,b \le n$，$a \ne b$。</p><h4 id="【输入样例1】-2"><a href="#【输入样例1】-2" class="headerlink" title="【输入样例1】"></a>【输入样例1】</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token number">4</span> <span class="token number">3</span><span class="token number">1</span> <span class="token number">2</span><span class="token number">1</span> <span class="token number">3</span><span class="token number">1</span> <span class="token number">4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="【输出样例1】-2"><a href="#【输出样例1】-2" class="headerlink" title="【输出样例1】"></a>【输出样例1】</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="【输入样例2】-2"><a href="#【输入样例2】-2" class="headerlink" title="【输入样例2】"></a>【输入样例2】</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token number">5</span> <span class="token number">4</span><span class="token number">1</span> <span class="token number">2</span><span class="token number">2</span> <span class="token number">3</span><span class="token number">3</span> <span class="token number">4</span><span class="token number">3</span> <span class="token number">5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="【输出样例2】-2"><a href="#【输出样例2】-2" class="headerlink" title="【输出样例2】"></a>【输出样例2】</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="【原题链接】-2"><a href="#【原题链接】-2" class="headerlink" title="【原题链接】"></a>【原题链接】</h4><p><a href="https://www.acwing.com/problem/content/4802/">https://www.acwing.com/problem/content/4802/</a></p><hr><h4 id="【题目分析】-2"><a href="#【题目分析】-2" class="headerlink" title="【题目分析】"></a>【题目分析】</h4><p>本题需要有一定的理论基础（理论内容见 「<strong>算法基础课——搜索与图论（一）</strong>」）</p><ul><li>图/树的存储（邻接表）</li><li><code>dfs</code> 求解树的高度/直径</li><li>最大值、次最大值的迭代</li></ul><p>有了这些基础后，会发现该题描述的「<strong>有效无向连通图</strong>」，其实就是 <strong>「树」</strong> 的定义；该问题就是求解树的最长直径。☘️</p><p>常用 <strong>解题思路</strong> 是：</p><p>Step1：<strong>遍历</strong> 树的 n 个结点</p><p>Step2：求出以 <strong>结点 i 为根</strong> 的 <strong>子树高度最大值</strong> 和 <strong>次大值</strong>，两者之和就是以当前结点 i 为根的直径</p><p>Step3：输出 n 个结点的直径最大值</p><p>根据该解题思路，编写相应代码，具体见 y总讲解视频：<a href="https://www.acwing.com/video/4611/">视频链接</a></p><p><strong>【二刷经历】</strong></p><p>2023 年 4 月 11 日，摊主想要把这篇文章上传至自己的博客网站，于是再次阅读了这篇复盘，打算检查文章可能存在的错误。</p><p>在检查的过程中，摊主突然发现 C 题又不会做了，说明当时还是没有理解透彻，需要回炉重造。😂</p><p>回顾一下自己晚上的做题流程：</p><ul><li><p>发现该题描述的数据结构为「树」</p></li><li><p>书写「邻接表」代码，存储树的结点和边</p></li><li><p>发现解题策略</p><ul><li>选择一个结点 <code>u</code> 作为根结点</li><li>计算 <code>u</code> 的所有子树深度</li><li>取最大深度和次大深度为最终答案</li></ul></li><li><p>根据思路书写代码框架</p></li><li><p>但是在写 <code>dfs</code> 时，发现理不清输入值、返回值、终止条件以及是否往回搜的判断条件</p></li></ul><p>于是又去回顾了y总的讲解视频，以及自己写的代码注释，发现上面的思路其实存在一定问题。</p><p>上面的思路其实默认了「一开始选择哪个点作为根结点，得到的子树最大深度和次大深度之和都是一样的」，这是不对的 ❌ </p><p>比如根结点 <code>u</code> 有 3 棵子树 <code>ch1</code>，<code>ch2</code>，<code>ch3</code></p><ul><li>子树 <code>ch1</code> 的深度为 2</li><li>子树 <code>ch3</code> 的深度为 1</li><li>子树 <code>ch2</code> 的根结点为 <code>v</code>，<code>v</code> 上又有两棵子树<ul><li>一棵深度为 7 </li><li>另一棵深度为 8</li></ul></li></ul><p>按照上面的思路，最后答案是 子树 <code>ch2</code> 的最大深度 8 + <code>ch1</code> 的深度 2 等于 10。</p><p>但是显然，正确答案应该是 <code>v</code> 的两棵子树的深度之和，应该为 15 才对。</p><p>由此可见，从 <code>u</code> 往下遍历的过程中，<code>ans</code> 应该不断进行比较，即 <code>ans = max(d1+d2,ans)</code>，才能保证最后的答案是正确的。✅</p><p>同时还需思考，如何书写代码，才能使搜索从 <code>u</code> 一直往下，而 <strong>不会出现往回搜</strong> 的情况。</p><p>本题 <strong>值得反复咀嚼</strong> 的一些点：</p><ul><li>dfs 的含义究竟是什么？</li><li>dfs 的输入值为什么是 <code>int dfs(int u, int fa)</code>，<code>fa</code> 有什么作用？</li><li>添加 <code>st[]</code> 数组可以达到 <code>fa</code> 的作用吗？</li><li>dfs 的返回值是什么?</li><li>dfs 是如何实现深度累加的？</li><li>为什么是 <code>ans = max(ans,d1 + d2)</code> 而不是直接 <code>ans = d1 + d2</code> ？</li></ul><h4 id="【复盘后的优化代码】✅-2"><a href="#【复盘后的优化代码】✅-2" class="headerlink" title="【复盘后的优化代码】✅"></a>【复盘后的优化代码】✅</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">100010</span><span class="token punctuation">,</span> M <span class="token operator">=</span> N <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">int</span> h<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> e<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">,</span> ne<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">,</span> idx<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span><span class="token keyword">int</span> ans<span class="token punctuation">;</span> <span class="token comment">// 定义全局答案</span><span class="token comment">// 邻接表加边</span><span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    e<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">,</span> ne<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> h<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">,</span> h<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> idx<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 返回结点fa以u为根结点的子树的最大深度</span><span class="token keyword">int</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> fa<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> d1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> d2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">// d1 表示当前结点子树高度最大值，d2表示当前结点子树高度次大值</span>    <span class="token comment">// 遍历当前结点u的所有子树</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> h<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">~</span>i<span class="token punctuation">;</span> i <span class="token operator">=</span> ne<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 注意此时的i为idx的值，而非结点的值，容易和dfs的参数搞混</span>        <span class="token comment">// 由于是无向边，需要不走回路</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> fa<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token comment">// 计算当前子树高度</span>        <span class="token keyword">int</span> d <span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span> u<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">// 不能写成dfs(i,u) + 1 或者 dfs(h[i],u) + 1，很容易出错</span>        <span class="token comment">// 更新子树的最大高度和次大高度</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>d <span class="token operator">&gt;=</span> d1<span class="token punctuation">)</span> d2 <span class="token operator">=</span> d1<span class="token punctuation">,</span> d1 <span class="token operator">=</span> d<span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>d <span class="token operator">&gt;</span> d2<span class="token punctuation">)</span> d2 <span class="token operator">=</span> d<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    ans <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> d1 <span class="token operator">+</span> d2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> d1<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//cin读入优化</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> h<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 邻接表的表头全部置为-1</span>    cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> m<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>        cin <span class="token operator">&gt;&gt;</span> a <span class="token operator">&gt;&gt;</span> b<span class="token punctuation">;</span>        <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">add</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 邻接表加边</span>    <span class="token punctuation">}</span>    <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 从结点值为1的结点开始搜索（这里的1并不是idx=1的意思）</span>    cout <span class="token operator">&lt;&lt;</span> ans <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="【周赛现场-AC-代码】-2"><a href="#【周赛现场-AC-代码】-2" class="headerlink" title="【周赛现场 AC 代码】"></a>【周赛现场 AC 代码】</h4><p>该题现场未AC 😂</p><h4 id="【代码对比总结】-1"><a href="#【代码对比总结】-1" class="headerlink" title="【代码对比总结】"></a>【代码对比总结】</h4><ul><li>周赛现场虽然想出了求解最长直径的思路，但是由于 图论/搜索 部分的理论内容学习不够扎实充分，导致没能够顺利写出 <code>dfs</code> 的代码，需要在复盘后，认真学习总结。</li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> Acwing周赛复盘 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 信息奥赛 </tag>
            
            <tag> Acwing </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CS50 Problem Set7</title>
      <link href="/2023/05/09/cs50-problem-set7/"/>
      <url>/2023/05/09/cs50-problem-set7/</url>
      
        <content type="html"><![CDATA[<h1 id="CS50-Problem-Set7"><a href="#CS50-Problem-Set7" class="headerlink" title="CS50 Problem Set7"></a>CS50 Problem Set7</h1><blockquote><p>CS50 Problem Set7 Page：<a href="https://cs50.harvard.edu/x/2023/psets/7/">https://cs50.harvard.edu/x/2023/psets/7/</a></p><p>CS50 Study Group：677535709（QQ Group）</p></blockquote><h2 id="What-to-Do-🚀"><a href="#What-to-Do-🚀" class="headerlink" title="What to Do 🚀"></a>What to Do 🚀</h2><blockquote><p>Be sure you have completed <a href="https://cs50.harvard.edu/x/2023/labs/7/">Lab 7</a> before beginning this problem set.</p></blockquote><ol><li>Log into <a href="https://code.cs50.io/">code.cs50.io</a> using your GitHub account</li><li>Run <code>update50</code> in your codespace’s terminal window to ensure your codespace is up-to-date and, when prompted, click <strong>Rebuild now</strong></li><li>Submit <a href="https://cs50.harvard.edu/x/2023/psets/7/movies/">Movies</a></li><li>Submit <a href="https://cs50.harvard.edu/x/2023/psets/7/fiftyville/">Fiftyville</a></li></ol><hr><h2 id="Problem-Set-📚"><a href="#Problem-Set-📚" class="headerlink" title="Problem Set 📚"></a>Problem Set 📚</h2><h3 id="P1-Movies"><a href="#P1-Movies" class="headerlink" title="P1 - Movies"></a>P1 - Movies</h3><blockquote><p><a href="https://cs50.harvard.edu/x/2023/psets/7/movies/">https://cs50.harvard.edu/x/2023/psets/7/movies/</a></p></blockquote><h3 id="P2-Fiftyville"><a href="#P2-Fiftyville" class="headerlink" title="P2 - Fiftyville"></a>P2 - Fiftyville</h3><blockquote><p><a href="https://cs50.harvard.edu/x/2023/psets/7/fiftyville/">https://cs50.harvard.edu/x/2023/psets/7/fiftyville/</a></p></blockquote><hr><h2 id="Solution-🧑🏻‍💻"><a href="#Solution-🧑🏻‍💻" class="headerlink" title="Solution 🧑🏻‍💻"></a>Solution 🧑🏻‍💻</h2><p>Ricky’s GitHub Repository for CS50 Problem Sets: <a href="https://github.com/Ricky2333/CS50-PSet">https://github.com/Ricky2333/CS50-PSet</a></p><blockquote><p>CS50 Study Group：677535709（QQ Group）</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> CS50 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CS50 </tag>
            
            <tag> SQL </tag>
            
            <tag> CS50 PSet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CS50 Lab7</title>
      <link href="/2023/05/08/cs50-lab7/"/>
      <url>/2023/05/08/cs50-lab7/</url>
      
        <content type="html"><![CDATA[<h1 id="Lab-7-Songs"><a href="#Lab-7-Songs" class="headerlink" title="Lab 7: Songs"></a>Lab 7: Songs</h1><blockquote><p>Lab7 Page: <a href="https://cs50.harvard.edu/x/2023/labs/7/">https://cs50.harvard.edu/x/2023/labs/7/</a></p><p>CS50 Study Group：677535709（QQ Group）</p></blockquote><p>Write SQL queries to answer questions about a database of songs.</p><h2 id="Getting-Started-🍉"><a href="#Getting-Started-🍉" class="headerlink" title="Getting Started 🍉"></a>Getting Started 🍉</h2><p>Open <a href="https://code.cs50.io/">VS Code</a>.</p><p>Start by clicking inside your terminal window, then execute <code>cd</code> by itself. You should find that its “prompt” resembles the below.</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Click inside of that terminal window and then execute</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> https://cdn.cs50.net/2022/fall/labs/7/songs.zip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>followed by Enter in order to download a ZIP called <code>songs.zip</code> in your codespace. Take care not to overlook the space between <code>wget</code> and the following URL, or any other character for that matter!</p><p>Now execute</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">unzip</span> songs.zip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>to create a folder called <code>songs</code>. You no longer need the ZIP file, so you can execute</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rm</span> songs.zip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>and respond with “y” followed by Enter at the prompt to remove the ZIP file you downloaded.</p><p>Now type</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> songs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>followed by Enter to move yourself into (i.e., open) that directory. Your prompt should now resemble the below.</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">songs/ $<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>If all was successful, you should execute</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ls</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>and you should see 8 .sql files, <code>songs.db</code>, and <code>answers.txt</code>.</p><p>If you run into any trouble, follow these same steps again and see if you can determine where you went wrong!</p><h2 id="Understanding-☘️"><a href="#Understanding-☘️" class="headerlink" title="Understanding ☘️"></a>Understanding ☘️</h2><p>Provided to you is a file called <code>songs.db</code>, a SQLite database that stores data from <a href="https://developer.spotify.com/documentation/web-api/">Spotify</a> about songs and their artists. This dataset contains the top 100 streamed songs on Spotify in 2018. In a terminal window, run <code>sqlite3 songs.db</code> so that you can begin executing queries on the database.</p><p>First, when <code>sqlite3</code> prompts you to provide a query, type <code>.schema</code> and press enter. This will output the <code>CREATE TABLE</code> statements that were used to generate each of the tables in the database. By examining those statements, you can identify the columns present in each table.</p><p>Notice that every <code>artist</code> has an <code>id</code> and a <code>name</code>. Notice, too, that every song has a <code>name</code>, an <code>artist_id</code> (corresponding to the <code>id</code> of the artist of the song), as well as values for the danceability, energy, key, loudness, speechiness (presence of spoken words in a track), valence, tempo, and duration of the song (measured in milliseconds).</p><p>The challenge ahead of you is to write SQL queries to answer a variety of different questions by selecting data from one or more of these tables. After you do so, you’ll reflect on the ways Spotify might use this same data in their annual <a href="https://en.wikipedia.org/wiki/Spotify_Wrapped">Spotify Wrapped</a> campaign to characterize listeners’ habits.</p><h2 id="Implementation-Details-📚"><a href="#Implementation-Details-📚" class="headerlink" title="Implementation Details 📚"></a>Implementation Details 📚</h2><p>For each of the following problems, you should write a single SQL query that outputs the results specified by each problem. Your response must take the form of a single SQL query, though you may nest other queries inside of your query. You <strong>should not</strong> assume anything about the <code>id</code>s of any particular songs or artists: your queries should be accurate even if the <code>id</code> of any particular song or person were different. Finally, each query should return only the data necessary to answer the question: if the problem only asks you to output the names of songs, for example, then your query should not also output each song’s tempo.</p><ol><li>In <code>1.sql</code>, write a SQL query to list the names of all songs in the database.<ul><li>Your query should output a table with a single column for the name of each song.</li></ul></li><li>In <code>2.sql</code>, write a SQL query to list the names of all songs in increasing order of tempo.<ul><li>Your query should output a table with a single column for the name of each song.</li></ul></li><li>In <code>3.sql</code>, write a SQL query to list the names of the top 5 longest songs, in descending order of length.<ul><li>Your query should output a table with a single column for the name of each song.</li></ul></li><li>In <code>4.sql</code>, write a SQL query that lists the names of any songs that have danceability, energy, and valence greater than 0.75.<ul><li>Your query should output a table with a single column for the name of each song.</li></ul></li><li>In <code>5.sql</code>, write a SQL query that returns the average energy of all the songs.<ul><li>Your query should output a table with a single column and a single row containing the average energy.</li></ul></li><li>In <code>6.sql</code>, write a SQL query that lists the names of songs that are by Post Malone.<ul><li>Your query should output a table with a single column for the name of each song.</li><li>You should not make any assumptions about what Post Malone’s <code>artist_id</code> is.</li></ul></li><li>In <code>7.sql</code>, write a SQL query that returns the average energy of songs that are by Drake.<ul><li>Your query should output a table with a single column and a single row containing the average energy.</li><li>You should not make any assumptions about what Drake’s <code>artist_id</code> is.</li></ul></li><li>In <code>8.sql</code>, write a SQL query that lists the names of the songs that feature other artists.<ul><li>Songs that feature other artists will include “feat.” in the name of the song.</li><li>Your query should output a table with a single column for the name of each song.</li></ul></li></ol><h2 id="Walkthrough-🎥"><a href="#Walkthrough-🎥" class="headerlink" title="Walkthrough 🎥"></a>Walkthrough 🎥</h2><p>This video was recorded when the course was still using CS50 IDE for writing code. Though the interface may look different from your codespace, the behavior of the two environments should be largely similar!</p><blockquote><p>YouTube: <a href="https://youtu.be/wgKPUd_95AA">https://youtu.be/wgKPUd_95AA</a></p><p>bilibili: <a href="https://www.bilibili.com/video/BV1QP411179y?share_source=copy_web">https://www.bilibili.com/video/BV1QP411179y?share_source=copy_web</a></p></blockquote><h2 id="Usage-🛠"><a href="#Usage-🛠" class="headerlink" title="Usage 🛠"></a>Usage 🛠</h2><p>As well as running your queries in <code>sqlite3</code>, you can test your queries in the VS Code terminal by running</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">cat</span> filename.sql <span class="token operator">|</span> sqlite3 songs.db<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>where <code>filename.sql</code> is the file containing your SQL query.</p><h3 id="Hints"><a href="#Hints" class="headerlink" title="Hints"></a>Hints</h3><ul><li>See <a href="https://www.w3schools.com/sql/sql_ref_keywords.asp">this SQL keywords reference</a> for some SQL syntax that may be helpful!</li></ul><h3 id="Spotify-Wrapped"><a href="#Spotify-Wrapped" class="headerlink" title="Spotify Wrapped"></a>Spotify Wrapped</h3><p><a href="https://en.wikipedia.org/wiki/Spotify_Wrapped">Spotify Wrapped</a> is a feature presenting Spotify users’ 100 most played songs from the past year. In 2021, Spotify Wrapped calculated an <a href="https://newsroom.spotify.com/2021-12-01/learn-more-about-the-audio-aura-in-your-spotify-2021-wrapped-with-aura-reader-mystic-michaela/">“Audio Aura”</a> for each user, a “reading of [their] two most prominent moods as dictated by [their] top songs and artists of the year.” Suppose Spotify determines an audio aura by looking at the average energy, valence, and danceability of a person’s top 100 songs from the past year. In <code>answers.txt</code>, reflect on the following questions:</p><ul><li>If <code>songs.db</code> contains the top 100 songs of one listener from 2018, how would you characterize their audio aura?</li><li>Hypothesize about why the way you’ve calculated this aura might <em>not</em> be very representative of the listener. What better ways of calculating this aura would you propose?</li></ul><p>Be sure to submit <code>answers.txt</code> along with each of your <code>.sql</code> files!</p><h3 id="Testing"><a href="#Testing" class="headerlink" title="Testing"></a>Testing</h3><p>Execute the below to evaluate the correctness of your code using <code>check50</code>.</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">check50 cs50/labs/2023/x/songs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="How-to-Submit-🚀"><a href="#How-to-Submit-🚀" class="headerlink" title="How to Submit 🚀"></a>How to Submit 🚀</h2><p>In your terminal, execute the below to submit your work.</p><pre class="line-numbers language-none"><code class="language-none">submit50 cs50/labs/2023/x/songs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Acknowledgements-🍒"><a href="#Acknowledgements-🍒" class="headerlink" title="Acknowledgements 🍒"></a>Acknowledgements 🍒</h2><p>Dataset from <a href="https://www.kaggle.com/nadintamer/top-spotify-tracks-of-2018">Kaggle</a>.</p><hr><h2 id="Solution-🧑🏻‍💻"><a href="#Solution-🧑🏻‍💻" class="headerlink" title="Solution 🧑🏻‍💻"></a>Solution 🧑🏻‍💻</h2><p>Ricky’s GitHub Repository for CS50 Labs: <a href="https://github.com/Ricky2333/CS50-Labs">https://github.com/Ricky2333/CS50-Labs</a></p><blockquote><p>CS50 Study Group：677535709（QQ Group）</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> CS50 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CS50 </tag>
            
            <tag> CS50 Lab </tag>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CS50 Problem Set6</title>
      <link href="/2023/05/05/cs50-problem-set6/"/>
      <url>/2023/05/05/cs50-problem-set6/</url>
      
        <content type="html"><![CDATA[<h1 id="CS50-Problem-Set6"><a href="#CS50-Problem-Set6" class="headerlink" title="CS50 Problem Set6"></a>CS50 Problem Set6</h1><blockquote><p>CS50 Problem Set6 Page：<a href="https://cs50.harvard.edu/x/2023/psets/6/">https://cs50.harvard.edu/x/2023/psets/6/</a></p><p>CS50 Study Group：677535709（QQ Group）</p></blockquote><h2 id="What-to-Do-🚀"><a href="#What-to-Do-🚀" class="headerlink" title="What to Do 🚀"></a>What to Do 🚀</h2><blockquote><p>Be sure you have completed <a href="https://cs50.harvard.edu/x/2023/labs/6/">Lab 6</a> before beginning this problem set.</p></blockquote><ol><li>Log into <a href="https://code.cs50.io/">code.cs50.io</a> using your GitHub account</li><li>Run <code>update50</code> in your codespace’s terminal window to ensure your codespace is up-to-date.</li><li>Submit <a href="https://cs50.harvard.edu/x/2023/psets/6/hello/">Hello</a> in Python</li><li>Submit one of:<ul><li><a href="https://cs50.harvard.edu/x/2023/psets/6/mario/less/">this version of Mario</a> in Python, if feeling less comfortable</li><li><a href="https://cs50.harvard.edu/x/2023/psets/6/mario/more/">this version of Mario</a> in Python, if feeling more comfortable</li></ul></li><li>Submit one of:<ul><li><a href="https://cs50.harvard.edu/x/2023/psets/6/cash/">Cash</a> in Python, if feeling less comfortable</li><li><a href="https://cs50.harvard.edu/x/2023/psets/6/credit/">Credit</a> in Python, if feeling more comfortable</li></ul></li><li>Submit <a href="https://cs50.harvard.edu/x/2023/psets/6/readability/">Readability</a> in Python</li><li>Submit <a href="https://cs50.harvard.edu/x/2023/psets/6/dna/">DNA</a> in Python</li></ol><hr><h2 id="Problem-Set-📚"><a href="#Problem-Set-📚" class="headerlink" title="Problem Set 📚"></a>Problem Set 📚</h2><h3 id="P1-Hello"><a href="#P1-Hello" class="headerlink" title="P1 - Hello"></a>P1 - Hello</h3><blockquote><p><a href="https://cs50.harvard.edu/x/2023/psets/6/hello/">https://cs50.harvard.edu/x/2023/psets/6/hello/</a></p></blockquote><h3 id="P2-Mario-Less"><a href="#P2-Mario-Less" class="headerlink" title="P2 - Mario-Less"></a>P2 - Mario-Less</h3><blockquote><p><a href="https://cs50.harvard.edu/x/2023/psets/6/mario/less/">https://cs50.harvard.edu/x/2023/psets/6/mario/less/</a></p></blockquote><h3 id="P3-Mario-More"><a href="#P3-Mario-More" class="headerlink" title="P3 - Mario-More"></a>P3 - Mario-More</h3><blockquote><p><a href="https://cs50.harvard.edu/x/2023/psets/6/mario/more/">https://cs50.harvard.edu/x/2023/psets/6/mario/more/</a></p></blockquote><h3 id="P4-Cash"><a href="#P4-Cash" class="headerlink" title="P4 - Cash"></a>P4 - Cash</h3><blockquote><p><a href="https://cs50.harvard.edu/x/2023/psets/6/cash/">https://cs50.harvard.edu/x/2023/psets/6/cash/</a></p></blockquote><h3 id="P5-Credit"><a href="#P5-Credit" class="headerlink" title="P5 - Credit"></a>P5 - Credit</h3><blockquote><p><a href="https://cs50.harvard.edu/x/2023/psets/6/credit/">https://cs50.harvard.edu/x/2023/psets/6/credit/</a></p></blockquote><h3 id="P6-Readability"><a href="#P6-Readability" class="headerlink" title="P6 - Readability"></a>P6 - Readability</h3><blockquote><p><a href="https://cs50.harvard.edu/x/2023/psets/6/readability/">https://cs50.harvard.edu/x/2023/psets/6/readability/</a></p></blockquote><h3 id="P7-DNA"><a href="#P7-DNA" class="headerlink" title="P7 - DNA"></a>P7 - DNA</h3><blockquote><p><a href="https://cs50.harvard.edu/x/2023/psets/6/dna/">https://cs50.harvard.edu/x/2023/psets/6/dna/</a></p></blockquote><hr><h2 id="Solution-🧑🏻‍💻"><a href="#Solution-🧑🏻‍💻" class="headerlink" title="Solution 🧑🏻‍💻"></a>Solution 🧑🏻‍💻</h2><p>Ricky’s GitHub Repository for CS50 Problem Sets: <a href="https://github.com/Ricky2333/CS50-PSet">https://github.com/Ricky2333/CS50-PSet</a></p><blockquote><p>CS50 Study Group：677535709（QQ Group）</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> CS50 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CS50 </tag>
            
            <tag> Python </tag>
            
            <tag> CS50 PSet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CS50 Lab6</title>
      <link href="/2023/05/04/cs50-lab6/"/>
      <url>/2023/05/04/cs50-lab6/</url>
      
        <content type="html"><![CDATA[<h1 id="Lab-6-World-Cup"><a href="#Lab-6-World-Cup" class="headerlink" title="Lab 6: World Cup"></a>Lab 6: World Cup</h1><blockquote><p>Lab6 Page: <a href="https://cs50.harvard.edu/x/2023/labs/6/">https://cs50.harvard.edu/x/2023/labs/6/</a></p><p>CS50 Study Group：677535709（QQ Group）</p></blockquote><p>You are welcome to collaborate with one or two classmates on this lab, though it is expected that every student in any such group contribute equally to the lab.</p><p>Write a program to run simulations of the FIFA World Cup.</p><pre class="line-numbers language-none"><code class="language-none">$ python tournament.py 2018m.csvBelgium: 20.9% chance of winningBrazil: 20.3% chance of winningPortugal: 14.5% chance of winningSpain: 13.6% chance of winningSwitzerland: 10.5% chance of winningArgentina: 6.5% chance of winningEngland: 3.7% chance of winningFrance: 3.3% chance of winningDenmark: 2.2% chance of winningCroatia: 2.0% chance of winningColombia: 1.8% chance of winningSweden: 0.5% chance of winningUruguay: 0.1% chance of winningMexico: 0.1% chance of winning<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Background-🧐"><a href="#Background-🧐" class="headerlink" title="Background 🧐"></a>Background 🧐</h2><p>In soccer’s World Cup, the knockout round consists of 16 teams. In each round, each team plays another team and the losing teams are eliminated. When only two teams remain, the winner of the final match is the champion.</p><p>In soccer, teams are given <a href="https://en.wikipedia.org/wiki/FIFA_World_Rankings#Current_calculation_method">FIFA Ratings</a>, which are numerical values representing each team’s relative skill level. Higher FIFA ratings indicate better previous game results, and given two teams’ FIFA ratings, it’s possible to estimate the probability that either team wins a game based on their current ratings. The FIFA Ratings from two previous World Cups are available as the <a href="https://www.fifa.com/fifa-world-ranking/ranking-table/men/rank/id12189/">May 2018 Men’s FIFA Ratings</a> and <a href="https://www.fifa.com/fifa-world-ranking/ranking-table/women/rank/ranking_20190329/">March 2019 Women’s FIFA Ratings</a>.</p><p>Using this information, we can simulate the entire tournament by repeatedly simulating rounds until we’re left with just one team. And if we want to estimate how likely it is that any given team wins the tournament, we might simulate the tournament many times (e.g. 1000 simulations) and count how many times each team wins a simulated tournament. 1000 simulations might seem like many, but with today’s computing power we can accomplish those simulations in a matter of milliseconds. At the end of this lab, we’ll experiment with how worthwhile it might be to increase the number of simulations we run, given the trade-off of runtime.</p><p>Your task in this lab is to do just that using Python!</p><h2 id="Getting-Started-🍉"><a href="#Getting-Started-🍉" class="headerlink" title="Getting Started 🍉"></a>Getting Started 🍉</h2><p>Open <a href="https://code.cs50.io/">VS Code</a>.</p><p>Start by clicking inside your terminal window, then execute <code>cd</code> by itself. You should find that its “prompt” resembles the below.</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Click inside of that terminal window and then execute</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> https://cdn.cs50.net/2022/fall/labs/6/world-cup.zip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>followed by Enter in order to download a ZIP called <code>world-cup.zip</code> in your codespace. Take care not to overlook the space between <code>wget</code> and the following URL, or any other character for that matter!</p><p>Now execute</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">unzip</span> world-cup.zip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>to create a folder called <code>world-cup</code>. You no longer need the ZIP file, so you can execute</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rm</span> world-cup.zip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>and respond with “y” followed by Enter at the prompt to remove the ZIP file you downloaded.</p><p>Now type</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> world-cup<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>followed by Enter to move yourself into (i.e., open) that directory. Your prompt should now resemble the below.</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">world-cup/ $<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>If all was successful, you should execute</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ls</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>and you should see the following files:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">answers.txt  2018m.csv  2019w.csv  tournament.py<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>If you run into any trouble, follow these same steps again and see if you can determine where you went wrong!</p><h2 id="Understanding-☘️"><a href="#Understanding-☘️" class="headerlink" title="Understanding ☘️"></a>Understanding ☘️</h2><p>Start by taking a look at the <code>2018m.csv</code> file. This file contains the 16 teams in the knockout round of the 2018 Men’s World Cup and the ratings for each team. Notice that the CSV file has two columns, one called <code>team</code> (representing the team’s country name) and one called <code>rating</code> (representing the team’s rating).</p><p>The order in which the teams are listed determines which teams will play each other in each round (in the first round, for example, Uruguay will play Portugal and France will play Argentina; in the next round, the winner of the Uruguay-Portugal match will play the winner of the France-Argentina match). So be sure not to edit the order in which teams appear in this file!</p><p>Ultimately, in Python, we can represent each team as a dictionary that contains two values: the team name and the rating. Uruguay, for example, we would want to represent in Python as <code>{"team": "Uruguay", "rating": 976}</code>.</p><p>Next, take a look at <code>2019w.csv</code>, which contains data formatted the same way for the 2019 Women’s World Cup.</p><p>Now, open <code>tournament.py</code> and see that we’ve already written some code for you. The variable <code>N</code> at the top represents how many World Cup simulations to run: in this case, 1000.</p><p>The <code>simulate_game</code> function accepts two teams as inputs (recall that each team is a dictionary containing the team name and the team’s rating), and simulates a game between them. If the first team wins, the function returns <code>True</code>; otherwise, the function returns <code>False</code>.</p><p>The <code>simulate_round</code> function accepts a list of teams (in a variable called <code>teams</code>) as input, and simulates games between each pair of teams. The function then returns a list of all of the teams that won the round.</p><p>In the <code>main</code> function, notice that we first ensure that <code>len(sys.argv)</code> (the number of command-line arguments) is 2. We’ll use command-line arguments to tell Python which team CSV file to use to run the tournament simulation. We’ve then defined a list called <code>teams</code> (which will eventually be a list of teams) and a dictionary called <code>counts</code> (which will associate team names with the number of times that team won a simulated tournament). Right now they’re both empty, so populating them is left up to you!</p><p>Finally, at the end of <code>main</code>, we sort the teams in descending order of how many times they won simulations (according to <code>counts</code>) and print the estimated probability that each team wins the World Cup.</p><p>Populating <code>teams</code> and <code>counts</code> and writing the <code>simulate_tournament</code> function are left up to you!</p><h2 id="Implementation-Details-📚"><a href="#Implementation-Details-📚" class="headerlink" title="Implementation Details 📚"></a>Implementation Details 📚</h2><p>Complete the implementation of <code>tournament.py</code>, such that it simulates a number of tournaments and outputs each team’s probability of winning.</p><p>First, in <code>main</code>, read the team data from the CSV file into your program’s memory, and add each team to the list <code>teams</code>.</p><ul><li>The file to use will be provided as a command-line argument. You can access the name of the file, then, with <code>sys.argv[1]</code>.</li><li>Recall that you can open a file with <code>open(filename)</code>, where <code>filename</code> is a variable storing the name of the file.</li><li>Once you have a file <code>f</code>, you can use <code>csv.DictReader(f)</code> to give you a “reader”: an object in Python that you can loop over to read the file one row at a time, treating each row as a dictionary.</li><li>By default, all values read from the file will be strings. So be sure to first convert the team’s <code>rating</code> to an <code>int</code> (you can use the <code>int</code> function in Python to do this).</li><li>Ultimately, append each team’s dictionary to <code>teams</code>. The function call <code>teams.append(x)</code> will append <code>x</code> to the list <code>teams</code>.</li><li>Recall that each team should be a dictionary with a <code>team</code> name and a <code>rating</code>.</li></ul><p>Next, implement the <code>simulate_tournament</code> function. This function should accept as input a list of teams and should repeatedly simulate rounds until you’re left with one team. The function should the return the name of that team.</p><ul><li>You can call the <code>simulate_round</code> function, which simulates a single round, accepting a list of teams as input and returning a list of all of the winners.</li><li>Recall that if <code>x</code> is a list, you can use <code>len(x)</code> to determine the length of the list.</li><li>You should not assume the number of teams in the tournament, but you may assume it will be a power of 2.</li></ul><p>Finally, back in the <code>main</code> function, run <code>N</code> tournament simulations, and keep track of how many times each team wins in the <code>counts</code> dictionary.</p><ul><li>For example, if Uruguay won 2 tournaments and Portugal won 3 tournaments, then your <code>counts</code> dictionary should be <code>{"Uruguay": 2, "Portugal": 3}</code>.</li><li>You should use your <code>simulate_tournament</code> to simulate each tournament and determine the winner.</li><li>Recall that if <code>counts</code> is a dictionary, then syntax like <code>counts[team_name] = x</code> will associate the key stored in <code>team_name</code> with the value stored in <code>x</code>.</li><li>You can use the <code>in</code> keyword in Python to check if a dictionary has a particular key already. For example, <code>if "Portugal" in counts:</code> will check to see if <code>"Portugal"</code> already has an existing value in the <code>counts</code> dictionary.</li></ul><h2 id="Walkthrough-🎥"><a href="#Walkthrough-🎥" class="headerlink" title="Walkthrough 🎥"></a>Walkthrough 🎥</h2><p>This video was recorded when the course was still using CS50 IDE for writing code. Though the interface may look different from your codespace, the behavior of the two environments should be largely similar!</p><blockquote><p>YouTube: <a href="https://youtu.be/o5Bkc7gtRjo">https://youtu.be/o5Bkc7gtRjo</a></p><p>bilibili: <a href="https://www.bilibili.com/video/BV1124y1T7Rg?share_source=copy_web">https://www.bilibili.com/video/BV1124y1T7Rg?share_source=copy_web</a></p></blockquote><h2 id="Hints-💡"><a href="#Hints-💡" class="headerlink" title="Hints 💡"></a>Hints 💡</h2><ul><li><p>When reading in the file, you may find this syntax helpful, with <code>filename</code> as the name of your file and <code>file</code> as a variable.</p><pre class="line-numbers language-none"><code class="language-none">with open(filename) as file:    reader = csv.DictReader(file)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>In Python, to append to the end of a list, use the <code>.append()</code> function.</p></li></ul><h2 id="Testing"><a href="#Testing" class="headerlink" title="Testing"></a>Testing</h2><p>Your program should behave per the examples below. Since simulations have randomness within each, your output will likely not perfectly match the examples below.</p><pre class="line-numbers language-none"><code class="language-none">$ python tournament.py 2018m.csvBelgium: 20.9% chance of winningBrazil: 20.3% chance of winningPortugal: 14.5% chance of winningSpain: 13.6% chance of winningSwitzerland: 10.5% chance of winningArgentina: 6.5% chance of winningEngland: 3.7% chance of winningFrance: 3.3% chance of winningDenmark: 2.2% chance of winningCroatia: 2.0% chance of winningColombia: 1.8% chance of winningSweden: 0.5% chance of winningUruguay: 0.1% chance of winningMexico: 0.1% chance of winning<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">$ python tournament.py 2019w.csvGermany: 17.1% chance of winningUnited States: 14.8% chance of winningEngland: 14.0% chance of winningFrance: 9.2% chance of winningCanada: 8.5% chance of winningJapan: 7.1% chance of winningAustralia: 6.8% chance of winningNetherlands: 5.4% chance of winningSweden: 3.9% chance of winningItaly: 3.0% chance of winningNorway: 2.9% chance of winningBrazil: 2.9% chance of winningSpain: 2.2% chance of winningChina PR: 2.1% chance of winningNigeria: 0.1% chance of winning<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>You might be wondering what actually happened at the 2018 and 2019 World Cups! For Men’s, France won, defeating Croatia in the final. Belgium defeated England for the third place position. For Women’s, the United States won, defeating the Netherlands in the final. England defeated Sweden for the third place position.</li></ul><h2 id="Number-of-Simulations"><a href="#Number-of-Simulations" class="headerlink" title="Number of Simulations"></a>Number of Simulations</h2><p>Once you’re sure your code is correct, let’s tinker with the value of <code>N</code>, the constant at the top of our file, to adjust the number of times we simulate the tournament. More tournament simulations will give us more accurate predictions (why?), at the cost of time.</p><p>We can time programs by prepending their execution at the command-line with <code>time</code>. For example, with <code>N</code> set to 1000 (the default) execute</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">time</span> python tournament.py 2018m.csv<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>or</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">time</span> python tournament.py 2019w.csv<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>which should output something like</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">real    0m0.037suser    0m0.028ssys     0m0.008s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>though your own times might vary.</p><p>Pay attention to the <strong>real</strong> metric, which is the time, in total, it took <code>tournament.py</code> to run. And notice that you’re given time in minutes and seconds, with accuracy to thousandths of a second.</p><p>In <code>answers.txt</code>, keep track of how long it takes <code>tournament.py</code> to simulate…</p><ul><li>10 (ten) tournaments</li><li>100 (one hundred) tournaments</li><li>1000 (one thousand) tournaments</li><li>10000 (ten thousand) tournaments</li><li>100000 (one hundred thousand) tournaments</li><li>1000000 (one million) tournaments</li></ul><p>Each time you adjust <code>N</code>, record the <strong>real</strong> time in the appropriate TODO in <code>answers.txt</code> by using the same <code>0m0.000s</code> format. After timing each scenario, answer the two follow-up questions by overwriting the given TODO:</p><ul><li>Which predictions, if any, proved incorrect as you increased the number of simulations?</li><li>Suppose you’re charged a fee for each second of compute time your program uses. After how many simulations would you call the predictions “good enough”?</li></ul><p><strong>See a correctly formatted</strong> <code>answers.txt</code></p><pre class="line-numbers language-none"><code class="language-none">Times:10 simulations: 0m0.028s100 simulations: 0m0.030s1000 simulations: 0m0.041s10000 simulations: 0m0.139s100000 simulations: 0m1.031s1000000 simulations: 0m11.961sQuestions:Which predictions, if any, proved incorrect as you increased the number of simulations?:With a small number of simulations...Suppose you're charged a fee for each second of compute time your program uses.After how many simulations would you call the predictions "good enough"?:It seems like the predictions stabilized after about...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="How-to-Test-Your-Code-🖥"><a href="#How-to-Test-Your-Code-🖥" class="headerlink" title="How to Test Your Code 🖥"></a>How to Test Your Code 🖥</h2><p>Execute the below to evaluate the correctness of your code using <code>check50</code>. But be sure to compile and test it yourself as well!</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">check50 cs50/labs/2023/x/worldcup<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Execute the below to evaluate the style of your code using <code>style50</code>.</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">style50 tournament.py<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="How-to-Submit-🚀"><a href="#How-to-Submit-🚀" class="headerlink" title="How to Submit 🚀"></a>How to Submit 🚀</h2><p>In your terminal, execute the below to submit your work.</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">submit50 cs50/labs/2023/x/worldcup<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="Solution-🧑🏻‍💻"><a href="#Solution-🧑🏻‍💻" class="headerlink" title="Solution 🧑🏻‍💻"></a>Solution 🧑🏻‍💻</h2><p>Ricky’s GitHub Repository for CS50 Labs: <a href="https://github.com/Ricky2333/CS50-Labs">https://github.com/Ricky2333/CS50-Labs</a></p><blockquote><p>CS50 Study Group：677535709（QQ Group）</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> CS50 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CS50 </tag>
            
            <tag> CS50 Lab </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python｜可迭代对象</title>
      <link href="/2023/05/03/python-xue-xi-bi-ji-ke-die-dai-dui-xiang/"/>
      <url>/2023/05/03/python-xue-xi-bi-ji-ke-die-dai-dui-xiang/</url>
      
        <content type="html"><![CDATA[<p>本篇博客还在修改润色中～</p><p>敬请期待～</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CS50 Problem Set5</title>
      <link href="/2023/05/02/cs50-problem-set5/"/>
      <url>/2023/05/02/cs50-problem-set5/</url>
      
        <content type="html"><![CDATA[<h1 id="CS50-Problem-Set5"><a href="#CS50-Problem-Set5" class="headerlink" title="CS50 Problem Set5"></a>CS50 Problem Set5</h1><blockquote><p>CS50 Problem Set5 Page：<a href="https://cs50.harvard.edu/x/2023/psets/5/">https://cs50.harvard.edu/x/2023/psets/5/</a></p><p>CS50 Study Group：677535709（QQ Group）</p></blockquote><h2 id="What-to-Do-🚀"><a href="#What-to-Do-🚀" class="headerlink" title="What to Do 🚀"></a>What to Do 🚀</h2><blockquote><p>Be sure you have completed <a href="https://cs50.harvard.edu/x/2023/labs/5/">Lab 5</a> before beginning this problem set.</p></blockquote><ol><li>Log into <a href="https://code.cs50.io/">code.cs50.io</a> using your GitHub account</li><li>Run <code>update50</code> in your codespace’s terminal window to ensure your codespace is up-to-date and, when prompted, click <strong>Rebuild now</strong></li><li>Submit <a href="https://cs50.harvard.edu/x/2023/psets/5/speller/">Speller</a></li></ol><hr><h2 id="Problem-Set-📚"><a href="#Problem-Set-📚" class="headerlink" title="Problem Set 📚"></a>Problem Set 📚</h2><blockquote><p><a href="https://cs50.harvard.edu/x/2023/psets/5/speller/">https://cs50.harvard.edu/x/2023/psets/5/speller/</a></p></blockquote><p>For this problem, you’ll implement a program that spell-checks a file, a la the below, using a hash table.</p><pre class="line-numbers language-none"><code class="language-none">$ ./speller texts/lalaland.txtMISSPELLED WORDS[...]AHHHHHHHHHHHHHHHHHHHHHHHHHHHT[...]Shangri[...]fianc[...]Sebastian's[...]WORDS MISSPELLED:WORDS IN DICTIONARY:WORDS IN TEXT:TIME IN load:TIME IN check:TIME IN size:TIME IN unload:TIME IN TOTAL:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Getting-Started"><a href="#Getting-Started" class="headerlink" title="Getting Started"></a>Getting Started</h3><p>Log into <a href="https://code.cs50.io/">code.cs50.io</a>, click on your terminal window, and execute <code>cd</code> by itself. You should find that your terminal window’s prompt resembles the below:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Next execute</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> https://cdn.cs50.net/2022/fall/psets/5/speller.zip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>in order to download a ZIP called <code>speller.zip</code> into your codespace.</p><p>Then execute</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">unzip</span> speller.zip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>to create a folder called <code>speller</code>. You no longer need the ZIP file, so you can execute</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rm</span> speller.zip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>and respond with “y” followed by Enter at the prompt to remove the ZIP file you downloaded.</p><p>Now type</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> speller<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>followed by Enter to move yourself into (i.e., open) that directory. Your prompt should now resemble the below.</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">speller/ $<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Execute <code>ls</code> by itself, and you should see a few files and folders:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">dictionaries/  dictionary.c  dictionary.h  keys/  Makefile  speller.c  speller50  texts/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>If you run into any trouble, follow these same steps again and see if you can determine where you went wrong!</p><h3 id="Distribution"><a href="#Distribution" class="headerlink" title="Distribution"></a>Distribution</h3><h4 id="Understanding"><a href="#Understanding" class="headerlink" title="Understanding"></a>Understanding</h4><p>Theoretically, on input of size <em>n</em>, an algorithm with a running time of <em>n</em> is “asymptotically equivalent,” in terms of <em>O</em>, to an algorithm with a running time of <em>2n</em>. Indeed, when describing the running time of an algorithm, we typically focus on the dominant (i.e., most impactful) term (i.e., <em>n</em> in this case, since <em>n</em> could be much larger than 2). In the real world, though, the fact of the matter is that <em>2n</em> feels twice as slow as <em>n</em>.</p><p>The challenge ahead of you is to implement the fastest spell checker you can! By “fastest,” though, we’re talking actual “wall-clock,” not asymptotic, time.</p><p>In <code>speller.c</code>, we’ve put together a program that’s designed to spell-check a file after loading a dictionary of words from disk into memory. That dictionary, meanwhile, is implemented in a file called <code>dictionary.c</code>. (It could just be implemented in <code>speller.c</code>, but as programs get more complex, it’s often convenient to break them into multiple files.) The prototypes for the functions therein, meanwhile, are defined not in <code>dictionary.c</code> itself but in <code>dictionary.h</code> instead. That way, both <code>speller.c</code> and <code>dictionary.c</code> can <code>#include</code> the file. Unfortunately, we didn’t quite get around to implementing the loading part. Or the checking part. Both (and a bit more) we leave to you! But first, a tour.</p><h4 id="dictionary-h"><a href="#dictionary-h" class="headerlink" title="dictionary.h"></a>dictionary.h</h4><p>Open up <code>dictionary.h</code>, and you’ll see some new syntax, including a few lines that mention <code>DICTIONARY_H</code>. No need to worry about those, but, if curious, those lines just ensure that, even though <code>dictionary.c</code> and <code>speller.c</code> (which you’ll see in a moment) <code>#include</code> this file, <code>clang</code> will only compile it once.</p><p>Next notice how we <code>#include</code> a file called <code>stdbool.h</code>. That’s the file in which <code>bool</code> itself is defined. You’ve not needed it before, since the CS50 Library used to <code>#include</code> that for you.</p><p>Also notice our use of <code>#define</code>, a “preprocessor directive” that defines a “constant” called <code>LENGTH</code> that has a value of <code>45</code>. It’s a constant in the sense that you can’t (accidentally) change it in your own code. In fact, <code>clang</code> will replace any mentions of <code>LENGTH</code> in your own code with, literally, <code>45</code>. In other words, it’s not a variable, just a find-and-replace trick.</p><p>Finally, notice the prototypes for five functions: <code>check</code>, <code>hash</code>, <code>load</code>, <code>size</code>, and <code>unload</code>. Notice how three of those take a pointer as an argument, per the <code>*</code>:</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">bool <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>word<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token function">hash</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>word<span class="token punctuation">)</span><span class="token punctuation">;</span>bool <span class="token function">load</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>dictionary<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Recall that <code>char *</code> is what we used to call <code>string</code>. So those three prototypes are essentially just:</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">bool <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">const</span> string word<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token function">hash</span><span class="token punctuation">(</span><span class="token keyword">const</span> string word<span class="token punctuation">)</span><span class="token punctuation">;</span>bool <span class="token function">load</span><span class="token punctuation">(</span><span class="token keyword">const</span> string dictionary<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>And <code>const</code>, meanwhile, just says that those strings, when passed in as arguments, must remain constant; you won’t be able to change them, accidentally or otherwise!</p><h4 id="dictionary-c"><a href="#dictionary-c" class="headerlink" title="dictionary.c"></a>dictionary.c</h4><p>Now open up <code>dictionary.c</code>. Notice how, atop the file, we’ve defined a <code>struct</code> called <code>node</code> that represents a node in a hash table. And we’ve declared a global pointer array, <code>table</code>, which will (soon) represent the hash table you will use to keep track of words in the dictionary. The array contains <code>N</code> node pointers, and we’ve set <code>N</code> equal to <code>26</code> for now, to match with the default <code>hash</code> function as described below. You will likely want to increase this depending on your own implementation of <code>hash</code>.</p><p>Next, notice that we’ve implemented <code>load</code>, <code>check</code>, <code>size</code>, and <code>unload</code>, but only barely, just enough for the code to compile. Notice too that we’ve implemented <code>hash</code> with a sample algorithm based on the first letter of the word. Your job, ultimately, is to re-implement those functions as cleverly as possible so that this spell checker works as advertised. And fast!</p><h4 id="speller-c"><a href="#speller-c" class="headerlink" title="speller.c"></a>speller.c</h4><p>Okay, next open up <code>speller.c</code> and spend some time looking over the code and comments therein. You won’t need to change anything in this file, and you don’t need to understand its entirety, but do try to get a sense of its functionality nonetheless. Notice how, by way of a function called <code>getrusage</code>, we’ll be “benchmarking” (i.e., timing the execution of) your implementations of <code>check</code>, <code>load</code>, <code>size</code>, and <code>unload</code>. Also notice how we go about passing <code>check</code>, word by word, the contents of some file to be spell-checked. Ultimately, we report each misspelling in that file along with a bunch of statistics.</p><p>Notice, incidentally, that we have defined the usage of <code>speller</code> to be</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Usage: speller <span class="token punctuation">[</span>dictionary<span class="token punctuation">]</span> text<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>where <code>dictionary</code> is assumed to be a file containing a list of lowercase words, one per line, and <code>text</code> is a file to be spell-checked. As the brackets suggest, provision of <code>dictionary</code> is optional; if this argument is omitted, <code>speller</code> will use <code>dictionaries/large</code> by default. In other words, running</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./speller text<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>will be equivalent to running</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./speller dictionaries/large text<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>where <code>text</code> is the file you wish to spell-check. Suffice it to say, the former is easier to type! (Of course, <code>speller</code> will not be able to load any dictionaries until you implement <code>load</code> in <code>dictionary.c</code>! Until then, you’ll see <code>Could not load</code>.)</p><p>Within the default dictionary, mind you, are 143,091 words, all of which must be loaded into memory! In fact, take a peek at that file to get a sense of its structure and size. Notice that every word in that file appears in lowercase (even, for simplicity, proper nouns and acronyms). From top to bottom, the file is sorted lexicographically, with only one word per line (each of which ends with <code>\n</code>). No word is longer than 45 characters, and no word appears more than once. During development, you may find it helpful to provide <code>speller</code> with a <code>dictionary</code> of your own that contains far fewer words, lest you struggle to debug an otherwise enormous structure in memory. In <code>dictionaries/small</code> is one such dictionary. To use it, execute</p><pre class="line-numbers language-none"><code class="language-none">./speller dictionaries/small text<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>where <code>text</code> is the file you wish to spell-check. Don’t move on until you’re sure you understand how <code>speller</code> itself works!</p><p>Odds are, you didn’t spend enough time looking over <code>speller.c</code>. Go back one square and walk yourself through it again!</p><h4 id="texts-x2F"><a href="#texts-x2F" class="headerlink" title="texts/"></a>texts/</h4><p>So that you can test your implementation of <code>speller</code>, we’ve also provided you with a whole bunch of texts, among them the script from <em>La La Land</em>, the text of the Affordable Care Act, three million bytes from Tolstoy, some excerpts from <em>The Federalist Papers</em> and Shakespeare, and more. So that you know what to expect, open and skim each of those files, all of which are in a directory called <code>texts</code> within your <code>pset5</code> directory.</p><p>Now, as you should know from having read over <code>speller.c</code> carefully, the output of <code>speller</code>, if executed with, say,</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./speller texts/lalaland.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>will eventually resemble the below.</p><p>Below’s some of the output you’ll see. For information’s sake, we’ve excerpted some examples of “misspellings.” And lest we spoil the fun, we’ve omitted our own statistics for now.</p><pre class="line-numbers language-none"><code class="language-none">MISSPELLED WORDS[...]AHHHHHHHHHHHHHHHHHHHHHHHHHHHT[...]Shangri[...]fianc[...]Sebastian's[...]WORDS MISSPELLED:WORDS IN DICTIONARY:WORDS IN TEXT:TIME IN load:TIME IN check:TIME IN size:TIME IN unload:TIME IN TOTAL:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>TIME IN load</code> represents the number of seconds that <code>speller</code> spends executing your implementation of <code>load</code>. <code>TIME IN check</code> represents the number of seconds that <code>speller</code> spends, in total, executing your implementation of <code>check</code>. <code>TIME IN size</code> represents the number of seconds that <code>speller</code> spends executing your implementation of <code>size</code>. <code>TIME IN unload</code> represents the number of seconds that <code>speller</code> spends executing your implementation of <code>unload</code>. <code>TIME IN TOTAL</code> is the sum of those four measurements.</p><p><strong>Note that these times may vary somewhat across executions of <code>speller</code>, depending on what else your codespace is doing, even if you don’t change your code.</strong></p><p>Incidentally, to be clear, by “misspelled” we simply mean that some word is not in the <code>dictionary</code> provided.</p><h4 id="Makefile"><a href="#Makefile" class="headerlink" title="Makefile"></a>Makefile</h4><p>And, lastly, recall that <code>make</code> automates compilation of your code so that you don’t have to execute <code>clang</code> manually along with a whole bunch of switches. However, as your programs grow in size, <code>make</code> won’t be able to infer from context anymore how to compile your code; you’ll need to start telling <code>make</code> how to compile your program, particularly when they involve multiple source (i.e., <code>.c</code>) files, as in the case of this problem. And so we’ll utilize a <code>Makefile</code>, a configuration file that tells <code>make</code> exactly what to do. Open up <code>Makefile</code>, and you should see four lines:</p><ol><li>The first line tells <code>make</code> to execute the subsequent lines whenever you yourself execute <code>make speller</code> (or just <code>make</code>).</li><li>The second line tells <code>make</code> how to compile <code>speller.c</code> into machine code (i.e., <code>speller.o</code>).</li><li>The third line tells <code>make</code> how to compile <code>dictionary.c</code> into machine code (i.e., <code>dictionary.o</code>).</li><li>The fourth line tells <code>make</code> to link <code>speller.o</code> and <code>dictionary.o</code> in a file called <code>speller</code>.</li></ol><p><strong>Be sure to compile <code>speller</code> by executing <code>make speller</code> (or just <code>make</code>). Executing <code>make dictionary</code> won’t work!</strong></p><h3 id="Specification"><a href="#Specification" class="headerlink" title="Specification"></a>Specification</h3><p>Alright, the challenge now before you is to implement, in order, <code>load</code>, <code>hash</code>, <code>size</code>, <code>check</code>, and <code>unload</code> as efficiently as possible using a hash table in such a way that <code>TIME IN load</code>, <code>TIME IN check</code>, <code>TIME IN size</code>, and <code>TIME IN unload</code> are all minimized. To be sure, it’s not obvious what it even means to be minimized, inasmuch as these benchmarks will certainly vary as you feed <code>speller</code> different values for <code>dictionary</code> and for <code>text</code>. But therein lies the challenge, if not the fun, of this problem. This problem is your chance to design. Although we invite you to minimize space, your ultimate enemy is time. But before you dive in, some specifications from us.</p><ul><li>You may not alter <code>speller.c</code> or <code>Makefile</code>.</li><li>You may alter <code>dictionary.c</code> (and, in fact, must in order to complete the implementations of <code>load</code>, <code>hash</code>, <code>size</code>, <code>check</code>, and <code>unload</code>), but you may not alter the declarations (i.e., prototypes) of <code>load</code>, <code>hash</code>, <code>size</code>, <code>check</code>, or <code>unload</code>. You may, though, add new functions and (local or global) variables to <code>dictionary.c</code>.</li><li>You may change the value of <code>N</code> in <code>dictionary.c</code>, so that your hash table can have more buckets.</li><li>You may alter <code>dictionary.h</code>, but you may not alter the declarations of <code>load</code>, <code>hash</code>, <code>size</code>, <code>check</code>, or <code>unload</code>.</li><li>Your implementation of <code>check</code> must be case-insensitive. In other words, if <code>foo</code> is in dictionary, then <code>check</code> should return true given any capitalization thereof; none of <code>foo</code>, <code>foO</code>, <code>fOo</code>, <code>fOO</code>, <code>fOO</code>, <code>Foo</code>, <code>FoO</code>, <code>FOo</code>, and <code>FOO</code> should be considered misspelled.</li><li>Capitalization aside, your implementation of <code>check</code> should only return <code>true</code> for words actually in <code>dictionary</code>. Beware hard-coding common words (e.g., <code>the</code>), lest we pass your implementation a <code>dictionary</code> without those same words. Moreover, the only possessives allowed are those actually in <code>dictionary</code>. In other words, even if <code>foo</code> is in <code>dictionary</code>, <code>check</code> should return <code>false</code> given <code>foo's</code> if <code>foo's</code> is not also in <code>dictionary</code>.</li><li>You may assume that any <code>dictionary</code> passed to your program will be structured exactly like ours, alphabetically sorted from top to bottom with one word per line, each of which ends with <code>\n</code>. You may also assume that <code>dictionary</code> will contain at least one word, that no word will be longer than <code>LENGTH</code> (a constant defined in <code>dictionary.h</code>) characters, that no word will appear more than once, that each word will contain only lowercase alphabetical characters and possibly apostrophes, and that no word will start with an apostrophe.</li><li>You may assume that <code>check</code> will only be passed words that contain (uppercase or lowercase) alphabetical characters and possibly apostrophes.</li><li>Your spell checker may only take <code>text</code> and, optionally, <code>dictionary</code> as input. Although you might be inclined (particularly if among those more comfortable) to “pre-process” our default dictionary in order to derive an “ideal hash function” for it, you may not save the output of any such pre-processing to disk in order to load it back into memory on subsequent runs of your spell checker in order to gain an advantage.</li><li>Your spell checker must not leak any memory. Be sure to check for leaks with <code>valgrind</code>.</li><li><strong>The hash function you write should ultimately be your own, not one you search for online.</strong> There are many ways to implement a hash function beyond using the first character (or characters) of a word. Consider a hash function that uses a sum of ASCII values or the length of a word. A good hash function tends to reduce “collisions” and has a fairly even distribution across hash table “buckets”.</li></ul><p>Alright, ready to go?</p><ul><li>Implement <code>load</code>.</li><li>Implement <code>hash</code>.</li><li>Implement <code>size</code>.</li><li>Implement <code>check</code>.</li><li>Implement <code>unload</code>.</li></ul><h3 id="Walkthroughs"><a href="#Walkthroughs" class="headerlink" title="Walkthroughs"></a>Walkthroughs</h3><blockquote><p><a href="https://youtu.be/_z57x5PGF4w">https://youtu.be/_z57x5PGF4w</a></p></blockquote><p>Note that there are 6 videos in the below playlist.</p><p>Though Speller’s walkthrough indicates it is reasonable to use a hash function found online, this video is from an older version of the problem where we allowed this. Per the specification above, the hash function you write should ultimately be your own; you <strong>may not</strong> use a hash function you find online. Be sure to cite any external sources you referenced in writing your hash function.</p><h3 id="Hints"><a href="#Hints" class="headerlink" title="Hints"></a>Hints</h3><p>To compare two strings case-insensitively, you may find <a href="https://man.cs50.io/3/strcasecmp"><code>strcasecmp</code></a> (declared in <code>strings.h</code>) useful! You’ll likely also want to ensure that your hash function is case-insensitive, such that <code>foo</code> and <code>FOO</code> have the same hash value.</p><p>Ultimately, be sure to <code>free</code> in <code>unload</code> any memory that you allocated in <code>load</code>! Recall that <code>valgrind</code> is your newest best friend. Know that <code>valgrind</code> watches for leaks while your program is actually running, so be sure to provide command-line arguments if you want <code>valgrind</code> to analyze <code>speller</code> while you use a particular <code>dictionary</code> and/or text, as in the below. Best to use a small text, though, else <code>valgrind</code> could take quite a while to run.</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">valgrind ./speller texts/cat.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>If you run <code>valgrind</code> without specifying a <code>text</code> for <code>speller</code>, your implementations of <code>load</code> and <code>unload</code> won’t actually get called (and thus analyzed).</p><p>If unsure how to interpret the output of <code>valgrind</code>, do just ask <code>help50</code> for help:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">help50 valgrind ./speller texts/cat.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Testing"><a href="#Testing" class="headerlink" title="Testing"></a>Testing</h3><p>How to check whether your program is outting the right misspelled words? Well, you’re welcome to consult the “answer keys” that are inside of the <code>keys</code> directory that’s inside of your <code>speller</code> directory. For instance, inside of <code>keys/lalaland.txt</code> are all of the words that your program <em>should</em> think are misspelled.</p><p>You could therefore run your program on some text in one window, as with the below.</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./speller texts/lalaland.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>And you could then run the staff’s solution on the same text in another window, as with the below.</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./speller50 texts/lalaland.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>And you could then compare the windows visually side by side. That could get tedious quickly, though. So you might instead want to “redirect” your program’s output to a file, as with the below.</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./speller texts/lalaland.txt <span class="token operator">&gt;</span> student.txt./speller50 texts/lalaland.txt <span class="token operator">&gt;</span> staff.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>You can then compare both files side by side in the same window with a program like <code>diff</code>, as with the below.</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">diff</span> <span class="token parameter variable">-y</span> student.txt staff.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Alternatively, to save time, you could just compare your program’s output (assuming you redirected it to, e.g., <code>student.txt</code>) against one of the answer keys without running the staff’s solution, as with the below.</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">diff</span> <span class="token parameter variable">-y</span> student.txt keys/lalaland.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>If your program’s output matches the staff’s, <code>diff</code> will output two columns that should be identical except for, perhaps, the running times at the bottom. If the columns differ, though, you’ll see a <code>&gt;</code> or <code>|</code> where they differ. For instance, if you see</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">MISSPELLED WORDS                                                MISSPELLED WORDSTECHNO                                                          TECHNOL                                                               L                                                              <span class="token operator">&gt;</span> TheloniousPrius                                                           Prius                                                              <span class="token operator">&gt;</span> MIAL                                                               L<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>that means your program (whose output is on the left) does not think that <code>Thelonious</code> or <code>MIA</code> is misspelled, even though the staff’s output (on the right) does, as is implied by the absence of, say, <code>Thelonious</code> in the lefthand column and the presence of <code>Thelonious</code> in the righthand column.</p><h4 id="check50"><a href="#check50" class="headerlink" title="check50"></a>check50</h4><p>To test your code less manually (though still not exhaustively), you may also execute the below.</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">check50 cs50/problems/2023/x/speller<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Note that <code>check50</code> will also check for memory leaks, so be sure you’ve run <code>valgrind</code> as well.</p><h4 id="style50"><a href="#style50" class="headerlink" title="style50"></a>style50</h4><p>Execute the below to evaluate the style of your code using <code>style50</code>.</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">style50 dictionary.c<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Staff’s-Solution"><a href="#Staff’s-Solution" class="headerlink" title="Staff’s Solution"></a>Staff’s Solution</h3><p>How to assess just how fast (and correct) your code is? Well, as always, feel free to play with the staff’s solution, as with the below, and compare its numbers against yours.</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./speller50 texts/lalaland.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="How-to-Submit"><a href="#How-to-Submit" class="headerlink" title="How to Submit"></a>How to Submit</h3><p>In your terminal, execute the below to submit your work.</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">submit50 cs50/problems/2023/x/speller<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="Solution-🧑🏻‍💻"><a href="#Solution-🧑🏻‍💻" class="headerlink" title="Solution 🧑🏻‍💻"></a>Solution 🧑🏻‍💻</h2><p>Ricky’s GitHub Repository for CS50 Problem Sets: <a href="https://github.com/Ricky2333/CS50-PSet">https://github.com/Ricky2333/CS50-PSet</a></p><blockquote><p>CS50 Study Group：677535709（QQ Group）</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> CS50 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CS50 </tag>
            
            <tag> C </tag>
            
            <tag> CS50 PSet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CS50 Lab5</title>
      <link href="/2023/05/01/cs50-lab5/"/>
      <url>/2023/05/01/cs50-lab5/</url>
      
        <content type="html"><![CDATA[<h1 id="Lab-5-Inheritance"><a href="#Lab-5-Inheritance" class="headerlink" title="Lab 5: Inheritance"></a>Lab 5: Inheritance</h1><blockquote><p>Lab5 Page: <a href="https://cs50.harvard.edu/x/2023/labs/5/">https://cs50.harvard.edu/x/2023/labs/5/</a></p><p>CS50 Study Group：677535709（QQ Group）</p></blockquote><p>Simulate the inheritance of blood types for each member of a family.</p><pre class="line-numbers language-none"><code class="language-none">$ ./inheritanceChild (Generation 0): blood type OO    Parent (Generation 1): blood type AO        Grandparent (Generation 2): blood type OA        Grandparent (Generation 2): blood type BO    Parent (Generation 1): blood type OB        Grandparent (Generation 2): blood type AO        Grandparent (Generation 2): blood type BO<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Background-🧐"><a href="#Background-🧐" class="headerlink" title="Background 🧐"></a>Background 🧐</h2><p>A person’s blood type is determined by two alleles (i.e., different forms of a gene). The three possible alleles are A, B, and O, of which each person has two (possibly the same, possibly different). Each of a child’s parents randomly passes one of their two blood type alleles to their child. The possible blood type combinations, then, are: OO, OA, OB, AO, AA, AB, BO, BA, and BB.</p><p>For example, if one parent has blood type AO and the other parent has blood type BB, then the child’s possible blood types would be AB and OB, depending on which allele is received from each parent. Similarly, if one parent has blood type AO and the other OB, then the child’s possible blood types would be AO, OB, AB, and OO.</p><h2 id="Getting-Started-🍉"><a href="#Getting-Started-🍉" class="headerlink" title="Getting Started 🍉"></a>Getting Started 🍉</h2><p>Open <a href="https://code.cs50.io/">VS Code</a>.</p><p>Start by clicking inside your terminal window, then execute <code>cd</code> by itself. You should find that its “prompt” resembles the below.</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Click inside of that terminal window and then execute</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> https://cdn.cs50.net/2022/fall/labs/5/inheritance.zip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>followed by Enter in order to download a ZIP called <code>inheritance.zip</code> in your codespace. Take care not to overlook the space between <code>wget</code> and the following URL, or any other character for that matter!</p><p>Now execute</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">unzip</span> inheritance.zip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>to create a folder called <code>inheritance</code>. You no longer need the ZIP file, so you can execute</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rm</span> inheritance.zip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>and respond with “y” followed by Enter at the prompt to remove the ZIP file you downloaded.</p><p>Now type</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> inheritance<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>followed by Enter to move yourself into (i.e., open) that directory. Your prompt should now resemble the below.</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">inheritance/ $<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>If all was successful, you should execute</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ls</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>and you should see <code>inheritance.c</code>.</p><p>If you run into any trouble, follow these same steps again and see if you can determine where you went wrong!</p><h2 id="Understanding-☘️"><a href="#Understanding-☘️" class="headerlink" title="Understanding ☘️"></a>Understanding ☘️</h2><p>Take a look at the distribution code in <code>inheritance.c</code>.</p><p>Notice the definition of a type called <code>person</code>. Each person has an array of two <code>parents</code>, each of which is a pointer to another <code>person</code> struct. Each person also has an array of two <code>alleles</code>, each of which is a <code>char</code> (either <code>'A'</code>, <code>'B'</code>, or <code>'O'</code>).</p><p>Now, take a look at the <code>main</code> function. The function begins by “seeding” (i.e., providing some initial input to) a random number generator, which we’ll use later to generate random alleles. The <code>main</code> function then calls the <code>create_family</code> function to simulate the creation of <code>person</code> structs for a family of 3 generations (i.e. a person, their parents, and their grandparents). We then call <code>print_family</code> to print out each of those family members and their blood types. Finally, the function calls <code>free_family</code> to <code>free</code> any memory that was previously allocated with <code>malloc</code>.</p><p>The <code>create_family</code> and <code>free_family</code> functions are left to you to write!</p><h2 id="Implementation-Details-📚"><a href="#Implementation-Details-📚" class="headerlink" title="Implementation Details 📚"></a>Implementation Details 📚</h2><p>Complete the implementation of <code>inheritance.c</code>, such that it creates a family of a specified generation size and assigns blood type alleles to each family member. The oldest generation will have alleles assigned randomly to them.</p><ul><li>The <code>create_family</code> function takes an integer (<code>generations</code>) as input and should allocate (as via <code>malloc</code> ) one <code>person</code> for each member of the family of that number of generations, returning a pointer to the <code>person</code> in the youngest generation.<ul><li>For example, <code>create_family(3)</code> should return a pointer to a person with two parents, where each parent also has two parents.</li><li>Each <code>person</code> should have <code>alleles</code> assigned to them. The oldest generation should have alleles randomly chosen (as by calling the <code>random_allele</code> function), and younger generations should inherit one allele (chosen at random) from each parent.</li><li>Each <code>person</code> should have <code>parents</code> assigned to them. The oldest generation should have both <code>parents</code> set to <code>NULL</code>, and younger generations should have <code>parents</code> be an array of two pointers, each pointing to a different parent.</li></ul></li></ul><p>We’ve divided the <code>create_family</code> function into a few <code>TODO</code>s for you to complete.</p><ul><li>First, you should allocate memory for a new person. Recall that you can use <code>malloc</code> to allocate memory, and <code>sizeof(person)</code> to get the number of bytes to allocate.</li><li>Next, we’ve included a condition to check if <code>generations &gt; 1</code>.<ul><li>If <code>generations &gt; 1</code>, then there are more generations that still need to be allocated. We’ve already created two new <code>parents</code>, <code>parent0</code> and <code>parent1</code>, by recursively calling <code>create_family</code>. Your <code>create_family</code> function should then set the parent pointers of the new person you created. Finally, assign both <code>alleles</code> for the new person by randomly choosing one allele from each parent.</li><li>Otherwise (if <code>generations == 1</code>), then there will be no parent data for this person. Both <code>parents</code> of your new person should be set to <code>NULL</code>, and each <code>allele</code> should be generated randomly.</li></ul></li><li>Finally, your function should return a pointer for the <code>person</code> that was allocated.</li></ul><p>The <code>free_family</code> function should accept as input a pointer to a <code>person</code>, free memory for that person, and then recursively free memory for all of their ancestors.</p><ul><li>Since this is a recursive function, you should first handle the base case. If the input to the function is <code>NULL</code>, then there’s nothing to free, so your function can return immediately.</li><li>Otherwise, you should recursively <code>free</code> both of the person’s parents before <code>free</code>ing the child.</li></ul><h2 id="Walkthrough-🎥"><a href="#Walkthrough-🎥" class="headerlink" title="Walkthrough 🎥"></a>Walkthrough 🎥</h2><p>This video was recorded when the course was still using CS50 IDE for writing code. Though the interface may look different from your codespace, the behavior of the two environments should be largely similar!</p><blockquote><p>YouTube: <a href="https://youtu.be/9p7ddI3ozTY">https://youtu.be/9p7ddI3ozTY</a></p><p>bilibili: <a href="https://www.bilibili.com/video/BV1Jh411L7ps?share_source=copy_web">https://www.bilibili.com/video/BV1Jh411L7ps?share_source=copy_web</a></p></blockquote><h2 id="Hints-💡"><a href="#Hints-💡" class="headerlink" title="Hints 💡"></a>Hints 💡</h2><ul><li>You might find the <code>rand()</code> function useful for randomly assigning alleles. This function returns an integer between <code>0</code> and <code>RAND_MAX</code>, or <code>2147483647</code>.<ul><li>In particular, to generate a pseudorandom number that is either <code>0</code> or <code>1</code>, you can use the expression <code>rand() % 2</code>.</li></ul></li><li>Remember, to allocate memory for a particular person, we can use <code>malloc(n)</code>, which takes a size as argument and will allocate <code>n</code> bytes of memory.</li><li>Remember, to access a variable via a pointer, we can use arrow notation.<ul><li>For example, if <code>p</code> is a pointer to a person, then a pointer to this person’s first parent can be accessed by <code>p-&gt;parents[0]</code>.</li></ul></li></ul><h2 id="How-to-Test-Your-Code-🖥"><a href="#How-to-Test-Your-Code-🖥" class="headerlink" title="How to Test Your Code 🖥"></a>How to Test Your Code 🖥</h2><p>Upon running <code>./inheritance</code>, your program should adhere to the rules described in the background. The child should have two alleles, one from each parent. The parents should each have two alleles, one from each of their parents.</p><p>For example, in the example below, the child in Generation 0 received an O allele from both Generation 1 parents. The first parent received an A from the first grandparent and a O from the second grandparent. Similarly, the second parent received an O and a B from their grandparents.</p><pre class="line-numbers language-none"><code class="language-none">$ ./inheritanceChild (Generation 0): blood type OO    Parent (Generation 1): blood type AO        Grandparent (Generation 2): blood type OA        Grandparent (Generation 2): blood type BO    Parent (Generation 1): blood type OB        Grandparent (Generation 2): blood type AO        Grandparent (Generation 2): blood type BO<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Execute the below to evaluate the correctness of your code using <code>check50</code>. But be sure to compile and test it yourself as well!</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">check50 cs50/labs/2023/x/inheritance<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Execute the below to evaluate the style of your code using <code>style50</code>.</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">style50 inheritance.c<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="How-to-Submit-🚀"><a href="#How-to-Submit-🚀" class="headerlink" title="How to Submit 🚀"></a>How to Submit 🚀</h2><p>In your terminal, execute the below to submit your work.</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">submit50 cs50/labs/2023/x/inheritance<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="Solution-🧑🏻‍💻"><a href="#Solution-🧑🏻‍💻" class="headerlink" title="Solution 🧑🏻‍💻"></a>Solution 🧑🏻‍💻</h2><p>Ricky’s GitHub Repository for CS50 Labs: <a href="https://github.com/Ricky2333/CS50-Labs">https://github.com/Ricky2333/CS50-Labs</a></p><blockquote><p>CS50 Study Group：677535709（QQ Group）</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> CS50 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CS50 </tag>
            
            <tag> CS50 Lab </tag>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python学习笔记｜String</title>
      <link href="/2023/04/28/python-xue-xi-bi-ji-string/"/>
      <url>/2023/04/28/python-xue-xi-bi-ji-string/</url>
      
        <content type="html"><![CDATA[<p>本篇博客还在修改润色中～</p><p>敬请期待～</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CS61A HW1</title>
      <link href="/2023/04/26/cs61a-hw1/"/>
      <url>/2023/04/26/cs61a-hw1/</url>
      
        <content type="html"><![CDATA[<h1 id="CS61A-HW1"><a href="#CS61A-HW1" class="headerlink" title="CS61A HW1"></a>CS61A HW1</h1><blockquote><p>CS61A HW1 Page: <a href="https://inst.eecs.berkeley.edu/~cs61a/fa20/hw/hw01/">https://inst.eecs.berkeley.edu/~cs61a/fa20/hw/hw01/</a></p></blockquote><h2 id="Instructions-☘️"><a href="#Instructions-☘️" class="headerlink" title="Instructions ☘️"></a>Instructions ☘️</h2><p>Download <a href="https://inst.eecs.berkeley.edu/~cs61a/fa20/hw/hw01/hw01.zip">hw01.zip</a>.</p><p><strong>Submission:</strong> When you are done, submit with <code>python3 ok --submit</code>. You may submit more than once before the deadline; only the final submission will be scored. Check that you have successfully submitted your code on <a href="https://okpy.org/">okpy.org</a>. See <a href="https://inst.eecs.berkeley.edu/~cs61a/fa20/lab/lab00#submitting-the-assignment">Lab 0</a> for more instructions on submitting assignments.</p><p><strong>Using Ok:</strong> If you have any questions about using Ok, please refer to <a href="https://inst.eecs.berkeley.edu/~cs61a/fa20/articles/using-ok.html">this guide.</a></p><p><strong>Readings:</strong> You might find the following references useful:</p><ul><li><a href="http://composingprograms.com/pages/12-elements-of-programming.html">Section 1.2</a></li><li><a href="http://composingprograms.com/pages/13-defining-new-functions.html">Section 1.3</a></li><li><a href="http://composingprograms.com/pages/14-designing-functions.html">Section 1.4</a></li><li><a href="http://composingprograms.com/pages/15-control.html">Section 1.5</a></li></ul><p><strong>Note:</strong> Some of these readings necessary for the homework questions will not be covered until Monday’s lecture on Control.</p><p><strong>Grading:</strong> Homework is graded based on correctness. Each incorrect problem will decrease the total score by one point. There is a homework recovery policy as stated in the syllabus. <strong>This homework is out of 2 points.</strong></p><hr><h2 id="Required-Questions-🧐"><a href="#Required-Questions-🧐" class="headerlink" title="Required Questions 🧐"></a>Required Questions 🧐</h2><h3 id="Q1-Syllabus-Quiz"><a href="#Q1-Syllabus-Quiz" class="headerlink" title="Q1: Syllabus Quiz"></a>Q1: Syllabus Quiz</h3><p>Please fill out our <a href="https://docs.google.com/forms/d/e/1FAIpQLSeaHfn-kBxKMDgmrj1EISCRdw9NIS9MQlVf6WTrLHaHfTnscw/viewform?usp=sf_link">Syllabus Quiz</a> based off of our policies found on our <a href="https://cs61a.org/articles/about.html">syllabus page</a>.</p><hr><h3 id="Q2-A-Plus-Abs-B"><a href="#Q2-A-Plus-Abs-B" class="headerlink" title="Q2: A Plus Abs B"></a>Q2: A Plus Abs B</h3><p>Fill in the blanks in the following function for adding <code>a</code> to the absolute value of <code>b</code>, without calling <code>abs</code>. You may <strong>not</strong> modify any of the provided code other than the two blanks.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> operator <span class="token keyword">import</span> add<span class="token punctuation">,</span> sub<span class="token keyword">def</span> <span class="token function">a_plus_abs_b</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""Return a+abs(b), but without calling abs.    &gt;&gt;&gt; a_plus_abs_b(2, 3)    5    &gt;&gt;&gt; a_plus_abs_b(2, -3)    5    &gt;&gt;&gt; # a check that you didn't change the return statement!    &gt;&gt;&gt; import inspect, re    &gt;&gt;&gt; re.findall(r'^\s*(return .*)', inspect.getsource(a_plus_abs_b), re.M)    ['return f(a, b)']    """</span>    <span class="token keyword">if</span> b <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>        f <span class="token operator">=</span> _____    <span class="token keyword">else</span><span class="token punctuation">:</span>        f <span class="token operator">=</span> _____    <span class="token keyword">return</span> f<span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Use Ok to test your code:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">python3 ok <span class="token operator">-</span>q a_plus_abs_b<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h3 id="Q3-Two-of-Three"><a href="#Q3-Two-of-Three" class="headerlink" title="Q3: Two of Three"></a>Q3: Two of Three</h3><p>Write a function that takes three <em>positive</em> numbers as arguments and returns the sum of the squares of the two smallest numbers. <strong>Use only a single line for the body of the function.</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">two_of_three</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""Return a*a + b*b, where a and b are the two smallest members of the    positive numbers x, y, and z.    &gt;&gt;&gt; two_of_three(1, 2, 3)    5    &gt;&gt;&gt; two_of_three(5, 3, 1)    10    &gt;&gt;&gt; two_of_three(10, 2, 8)    68    &gt;&gt;&gt; two_of_three(5, 5, 5)    50    &gt;&gt;&gt; # check that your code consists of nothing but an expression (this docstring)    &gt;&gt;&gt; # a return statement    &gt;&gt;&gt; import inspect, ast    &gt;&gt;&gt; [type(x).__name__ for x in ast.parse(inspect.getsource(two_of_three)).body[0].body]    ['Expr', 'Return']    """</span>    <span class="token keyword">return</span> _____<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>Hint:</strong> Consider using the <code>max</code> or <code>min</code> function:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">max</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token number">3</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">min</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></blockquote><p>Use Ok to test your code:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">python3 ok <span class="token operator">-</span>q two_of_three<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h3 id="Q4-Largest-Factor"><a href="#Q4-Largest-Factor" class="headerlink" title="Q4: Largest Factor"></a>Q4: Largest Factor</h3><p>Write a function that takes an integer <code>n</code> that is <strong>greater than 1</strong> and returns the largest integer that is smaller than <code>n</code> and evenly divides <code>n</code>.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">largest_factor</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""Return the largest factor of n that is smaller than n.    &gt;&gt;&gt; largest_factor(15) # factors are 1, 3, 5    5    &gt;&gt;&gt; largest_factor(80) # factors are 1, 2, 4, 5, 8, 10, 16, 20, 40    40    &gt;&gt;&gt; largest_factor(13) # factor is 1 since 13 is prime    1    """</span>    <span class="token string">"*** YOUR CODE HERE ***"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>Hint:</strong> To check if <code>b</code> evenly divides <code>a</code>, you can use the expression <code>a % b == 0</code>, which can be read as, “the remainder of dividing <code>a</code> by <code>b</code> is 0.”</p></blockquote><p>Use Ok to test your code:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">python3 ok <span class="token operator">-</span>q largest_factor<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h3 id="Q5-If-Function-vs-Statement"><a href="#Q5-If-Function-vs-Statement" class="headerlink" title="Q5: If Function vs Statement"></a>Q5: If Function vs Statement</h3><p>Let’s try to write a function that does the same thing as an <code>if</code> statement.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">if_function</span><span class="token punctuation">(</span>condition<span class="token punctuation">,</span> true_result<span class="token punctuation">,</span> false_result<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""Return true_result if condition is a true value, and    false_result otherwise.    &gt;&gt;&gt; if_function(True, 2, 3)    2    &gt;&gt;&gt; if_function(False, 2, 3)    3    &gt;&gt;&gt; if_function(3==2, 3+2, 3-2)    1    &gt;&gt;&gt; if_function(3&gt;2, 3+2, 3-2)    5    """</span>    <span class="token keyword">if</span> condition<span class="token punctuation">:</span>        <span class="token keyword">return</span> true_result    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> false_result<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Despite the doctests above, this function actually does <em>not</em> do the same thing as an <code>if</code> statement in all cases. To prove this fact, write functions <code>cond</code>, <code>true_func</code>, and <code>false_func</code> such that <code>with_if_statement</code> prints the number <code>47</code>, but <code>with_if_function</code> prints both <code>42</code> and <code>47</code>.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">with_if_statement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    &gt;&gt;&gt; result = with_if_statement()    47    &gt;&gt;&gt; print(result)    None    """</span>    <span class="token keyword">if</span> cond<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> true_func<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> false_func<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">with_if_function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    &gt;&gt;&gt; result = with_if_function()    42    47    &gt;&gt;&gt; print(result)    None    """</span>    <span class="token keyword">return</span> if_function<span class="token punctuation">(</span>cond<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> true_func<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> false_func<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">cond</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token string">"*** YOUR CODE HERE ***"</span><span class="token keyword">def</span> <span class="token function">true_func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token string">"*** YOUR CODE HERE ***"</span><span class="token keyword">def</span> <span class="token function">false_func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token string">"*** YOUR CODE HERE ***"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>Hint</strong>: If you are having a hard time identifying how an <code>if</code> statement and <code>if_function</code> differ, consider the <a href="http://composingprograms.com/pages/15-control.html#conditional-statements">rules of evaluation for <code>if</code> statements</a> and <a href="http://composingprograms.com/pages/12-elements-of-programming.html#call-expressions">call expressions</a>.</p></blockquote><p>Use Ok to test your code:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">python3 ok <span class="token operator">-</span>q with_if_statementpython3 ok <span class="token operator">-</span>q with_if_function<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr><h3 id="Q6-Hailstone"><a href="#Q6-Hailstone" class="headerlink" title="Q6: Hailstone"></a>Q6: Hailstone</h3><p>Douglas Hofstadter’s Pulitzer-prize-winning book, <em>Gödel, Escher, Bach</em>, poses the following mathematical puzzle.</p><ol><li>Pick a positive integer <code>n</code> as the start.</li><li>If <code>n</code> is even, divide it by 2.</li><li>If <code>n</code> is odd, multiply it by 3 and add 1.</li><li>Continue this process until <code>n</code> is 1.</li></ol><p>The number <code>n</code> will travel up and down but eventually end at 1 (at least for all numbers that have ever been tried – nobody has ever proved that the sequence will terminate). Analogously, a hailstone travels up and down in the atmosphere before eventually landing on earth.</p><blockquote><p><strong>Breaking News</strong> (or at least the closest thing to that in math). There was a <a href="https://www.quantamagazine.org/mathematician-terence-tao-and-the-collatz-conjecture-20191211/">recent development</a> in the hailstone conjecture last year that shows that almost all numbers will eventually get to 1 if you repeat this process. This isn’t a complete proof but a major breakthrough.</p></blockquote><p>This sequence of values of <code>n</code> is often called a Hailstone sequence. Write a function that takes a single argument with formal parameter name <code>n</code>, prints out the hailstone sequence starting at <code>n</code>, and returns the number of steps in the sequence:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">hailstone</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""Print the hailstone sequence starting at n and return its    length.    &gt;&gt;&gt; a = hailstone(10)    10    5    16    8    4    2    1    &gt;&gt;&gt; a    7    """</span>    <span class="token string">"*** YOUR CODE HERE ***"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Hailstone sequences can get quite long! Try 27. What’s the longest you can find?</p><p>Use Ok to test your code:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">python3 ok <span class="token operator">-</span>q hailstone<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="Submit-🚀"><a href="#Submit-🚀" class="headerlink" title="Submit 🚀"></a>Submit 🚀</h2><p>Make sure to submit this assignment by running:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">python3 ok <span class="token operator">-</span><span class="token operator">-</span>submitpy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="Solution-🧑🏻‍💻"><a href="#Solution-🧑🏻‍💻" class="headerlink" title="Solution 🧑🏻‍💻"></a>Solution 🧑🏻‍💻</h2><p>Ricky’s GitHub Repository for CS61A: <a href="https://github.com/Ricky2333/CS61A">https://github.com/Ricky2333/CS61A</a></p><blockquote><p>Due to the <a href="https://inst.eecs.berkeley.edu/~cs61a/fa20/articles/about.html#academic-honesty">course policies</a>, this is a <strong>private repository</strong> only for self-review. </p><p>If you have any questions, feel free to contact me through the social links on my homepage.</p><p>Ricky’s Homepage: <a href="https://rickyxcoder.top/">https://rickyxcoder.top/</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> CS61A </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> CS61A </tag>
            
            <tag> CS61A HW </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CS50 Problem Set4</title>
      <link href="/2023/04/25/cs50-problem-set4/"/>
      <url>/2023/04/25/cs50-problem-set4/</url>
      
        <content type="html"><![CDATA[<h1 id="CS50-Problem-Set4"><a href="#CS50-Problem-Set4" class="headerlink" title="CS50 Problem Set4"></a>CS50 Problem Set4</h1><blockquote><p>CS50 Problem Set4 Page：<a href="https://cs50.harvard.edu/x/2023/psets/4/">https://cs50.harvard.edu/x/2023/psets/4/</a></p><p>CS50 Study Group：677535709（QQ Group）</p></blockquote><h2 id="What-to-Do-🚀"><a href="#What-to-Do-🚀" class="headerlink" title="What to Do 🚀"></a>What to Do 🚀</h2><blockquote><p>Be sure you have completed <a href="https://cs50.harvard.edu/x/2023/labs/4/">Lab 4</a> before beginning this problem set.</p></blockquote><ol><li>Log into <a href="https://code.cs50.io/">code.cs50.io</a> using your GitHub account</li><li>Run <code>update50</code> in your codespace’s terminal window to ensure your codespace is up-to-date and, when prompted, click <strong>Rebuild now</strong></li><li>Submit one of:<ul><li><a href="https://cs50.harvard.edu/x/2023/psets/4/filter/less/">this version of Filter</a> if feeling less comfortable</li><li><a href="https://cs50.harvard.edu/x/2023/psets/4/filter/more/">this version of Filter</a> if feeling more comfortable</li></ul></li><li>Submit one of:<ul><li><a href="https://cs50.harvard.edu/x/2023/psets/4/recover/">Recover</a></li><li><a href="https://cs50.harvard.edu/x/2023/psets/4/reverse/">Reverse</a></li></ul></li></ol><p>If you submit both versions of Filter, we’ll record the higher of your two scores.</p><hr><h2 id="Problem-Set-📚"><a href="#Problem-Set-📚" class="headerlink" title="Problem Set 📚"></a>Problem Set 📚</h2><h3 id="P1-Filter-Less"><a href="#P1-Filter-Less" class="headerlink" title="P1 - Filter-Less"></a>P1 - Filter-Less</h3><blockquote><p><a href="https://cs50.harvard.edu/x/2023/psets/4/filter/less/">https://cs50.harvard.edu/x/2023/psets/4/filter/less/</a></p></blockquote><h3 id="P2-Filter-More"><a href="#P2-Filter-More" class="headerlink" title="P2 - Filter-More"></a>P2 - Filter-More</h3><blockquote><p><a href="https://cs50.harvard.edu/x/2023/psets/4/filter/more/">https://cs50.harvard.edu/x/2023/psets/4/filter/more/</a></p></blockquote><h3 id="P3-Recover"><a href="#P3-Recover" class="headerlink" title="P3 - Recover"></a>P3 - Recover</h3><blockquote><p><a href="https://cs50.harvard.edu/x/2023/psets/4/recover/">https://cs50.harvard.edu/x/2023/psets/4/recover/</a></p></blockquote><h3 id="P4-Reverse"><a href="#P4-Reverse" class="headerlink" title="P4 - Reverse"></a>P4 - Reverse</h3><blockquote><p><a href="https://cs50.harvard.edu/x/2023/psets/4/reverse/">https://cs50.harvard.edu/x/2023/psets/4/reverse/</a></p></blockquote><hr><h2 id="Solution-🧑🏻‍💻"><a href="#Solution-🧑🏻‍💻" class="headerlink" title="Solution 🧑🏻‍💻"></a>Solution 🧑🏻‍💻</h2><p>Ricky’s GitHub Repository for CS50 Problem Sets: <a href="https://github.com/Ricky2333/CS50-PSet">https://github.com/Ricky2333/CS50-PSet</a></p><blockquote><p>CS50 Study Group：677535709（QQ Group）</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> CS50 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CS50 </tag>
            
            <tag> C </tag>
            
            <tag> CS50 PSet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bash Script｜学习笔记1</title>
      <link href="/2023/04/24/bash-script-ji-chu/"/>
      <url>/2023/04/24/bash-script-ji-chu/</url>
      
        <content type="html"><![CDATA[<h2 id="Bash-Script-简介-📚"><a href="#Bash-Script-简介-📚" class="headerlink" title="Bash Script 简介 📚"></a>Bash Script 简介 📚</h2><p><strong>Bash  Script（Bash 脚本）</strong> 是一种由 <strong>Bash shell</strong> 编写的脚本文件，可以 <strong>自动化地执行一系列命令</strong>。</p><p>Bash 脚本通常以 <code>.sh</code> 为文件扩展名，可以通过命令行终端或者其它脚本来执行。</p><p>Bash 脚本通常由一系列的命令和逻辑语句组成，可以包括循环、条件语句、函数、变量等。</p><p>Bash 脚本可以用于自动化各种任务，例如批量处理文件、执行系统命令、备份数据、部署应用程序等等。因为Bash脚本是文本文件，所以可以通过编辑器来编写和修改，也可以被版本控制系统管理。</p><h2 id="Bash-Script-实践🧑🏻‍💻"><a href="#Bash-Script-实践🧑🏻‍💻" class="headerlink" title="Bash Script 实践🧑🏻‍💻"></a>Bash Script 实践🧑🏻‍💻</h2><blockquote><p>以下内容需要有一定的 Linux 基础，如基本的 Linux 命令，Linux 权限等。</p></blockquote><h3 id="1-创建脚本并赋予执行权限"><a href="#1-创建脚本并赋予执行权限" class="headerlink" title="1. 创建脚本并赋予执行权限"></a>1. 创建脚本并赋予执行权限</h3><p>创建 Bash 脚本 <code>test.sh</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">touch</span> test.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br><ol start="2"><li><strong>检查文件权限</strong></li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ls</span> <span class="token parameter variable">-l</span> test.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以看到当前文件 <strong>没有执行权限</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">-rw-rw-r-- <span class="token number">1</span> rickyx rickyx <span class="token number">0</span> Apr <span class="token number">23</span> 00:28 test.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br><ol start="3"><li><strong>添加执行权限</strong></li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chmod</span> +x test.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>再次检查该文件权限</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ls</span> <span class="token parameter variable">-l</span> test.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以看到当前文件已经拥有执行权限</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">-rwxrwxr-x <span class="token number">1</span> rickyx rickyx <span class="token number">0</span> Apr <span class="token number">23</span> 00:28 test.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-编写脚本"><a href="#2-编写脚本" class="headerlink" title="2. 编写脚本"></a>2. 编写脚本</h3><p>一个简单的脚本，功能是「欢迎用户」</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token builtin class-name">echo</span> <span class="token string">"Hello, Ricky!!"</span> <span class="token comment"># 在终端上打印该语句</span><span class="token function">sleep</span> <span class="token number">1</span> <span class="token comment"># 等待1秒</span><span class="token builtin class-name">echo</span> <span class="token string">"You're looking good today, Ricky!!"</span> <span class="token comment"># 在终端上打印该语句</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>关于 <strong>shebang</strong> 🍉</p><p><code>#!</code>（称为 <strong>shebang</strong> 或 <strong>hashbang</strong>）是一个特殊的字符序列，告诉操作系统所要使用的 shell 的路径。在 Linux 和 Unix 系统中，shebang 必须是脚本文件的第一行，否则操作系统将无法识别并使用指定的 shell 解释器来执行脚本。</p><p>在本实例中，<code>#!/bin/bash</code> 指定了要使用 Bash shell 来执行该脚本。这意味着，当这个脚本被执行时，操作系统会自动查找 Bash 解释器的位置，然后使用 Bash 解释器来解释并执行这个脚本文件。</p><blockquote><p>在使用 Bash 编写脚本时，始终将 <code>#!/bin/bash</code> 作为脚本的开头部分是一个很好的习惯，以确保脚本可以正确地被执行。</p></blockquote><hr><h3 id="3-优化（引入变量）"><a href="#3-优化（引入变量）" class="headerlink" title="3. 优化（引入变量）"></a>3. 优化（引入变量）</h3><ol><li>使用变量</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"Ricky"</span> <span class="token comment"># 创建变量，并且赋值</span><span class="token builtin class-name">echo</span> <span class="token string">"Hello, <span class="token variable">$name</span>!!"</span><span class="token function">sleep</span> <span class="token number">1</span><span class="token builtin class-name">echo</span> <span class="token string">"You're looking good today, <span class="token variable">$name</span>!!"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><p>通过 <code>read</code> 获取变量值</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token builtin class-name">read</span> <span class="token parameter variable">-p</span> <span class="token string">"What's your name? "</span> name  <span class="token comment"># 创建变量，并且通过read赋值（使用-p参数添加Prompt提示）</span><span class="token builtin class-name">echo</span> <span class="token string">"Hello, <span class="token variable">$name</span>!!"</span><span class="token function">sleep</span> <span class="token number">1</span><span class="token builtin class-name">echo</span> <span class="token string">"You're looking good today, <span class="token variable">$name</span>!!"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><p>通过 <strong>命令行参数</strong> 获取变量值</p><p>执行时，添加命令行参数：<code>./test.sh Ricky</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token variable">$1</span> <span class="token comment"># 获取第1个命令行参数（第0个命令行参数 ./test.sh）</span><span class="token builtin class-name">echo</span> <span class="token string">"Hello, <span class="token variable">$name</span>!!"</span><span class="token function">sleep</span> <span class="token number">1</span><span class="token builtin class-name">echo</span> <span class="token string">"You're looking good today, <span class="token variable">$name</span>!!"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><p>通过 <strong>命令结果</strong> 获取变量值</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">whoami</span><span class="token variable">)</span></span> <span class="token comment">#获取whoami命令的结果，并且赋值给name</span><span class="token builtin class-name">echo</span> <span class="token string">"Hello, <span class="token variable">$name</span>!!"</span><span class="token function">sleep</span> <span class="token number">1</span><span class="token builtin class-name">echo</span> <span class="token string">"You're looking good today, <span class="token variable">$name</span>!!"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Bash Script </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CS50 Lab4</title>
      <link href="/2023/04/23/cs50-lab4/"/>
      <url>/2023/04/23/cs50-lab4/</url>
      
        <content type="html"><![CDATA[<h1 id="Lab-4-Smiley-amp-Volume"><a href="#Lab-4-Smiley-amp-Volume" class="headerlink" title="Lab 4: Smiley &amp; Volume"></a>Lab 4: Smiley &amp; Volume</h1><blockquote><p>Lab4 Page: <a href="https://cs50.harvard.edu/x/2023/labs/4/">https://cs50.harvard.edu/x/2023/labs/4/</a></p><p>CS50 Study Group：677535709（QQ Group）</p></blockquote><h2 id="What-to-Do"><a href="#What-to-Do" class="headerlink" title="What to Do"></a>What to Do</h2><ol><li>Log into <a href="https://code.cs50.io/">code.cs50.io</a> using your GitHub account</li><li>Run <code>update50</code> in your codespace’s terminal window to ensure your codespace is up-to-date and, when prompted, click <strong>Rebuild now</strong></li><li>Submit one of:<ul><li><a href="https://cs50.harvard.edu/x/2023/labs/4/smiley/">Smiley</a></li><li><a href="https://cs50.harvard.edu/x/2023/labs/4/volume/">Volume</a></li></ul></li></ol><p>If you submit both Smiley and Volume, we’ll record the higher of your two scores.</p><hr><h2 id="Smiley"><a href="#Smiley" class="headerlink" title="Smiley"></a>Smiley</h2><blockquote><p><a href="https://cs50.harvard.edu/x/2023/labs/4/smiley/">https://cs50.harvard.edu/x/2023/labs/4/smiley/</a></p></blockquote><h2 id="Volume"><a href="#Volume" class="headerlink" title="Volume"></a>Volume</h2><blockquote><p><a href="https://cs50.harvard.edu/x/2023/labs/4/volume/">https://cs50.harvard.edu/x/2023/labs/4/volume/</a></p></blockquote><hr><h2 id="Solution-🧑🏻‍💻"><a href="#Solution-🧑🏻‍💻" class="headerlink" title="Solution 🧑🏻‍💻"></a>Solution 🧑🏻‍💻</h2><p>Ricky’s GitHub Repository for CS50 Labs: <a href="https://github.com/Ricky2333/CS50-Labs">https://github.com/Ricky2333/CS50-Labs</a></p><blockquote><p>CS50 Study Group：677535709（QQ Group）</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> CS50 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CS50 </tag>
            
            <tag> CS50 Lab </tag>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CS50 Problem Set3</title>
      <link href="/2023/04/22/cs50-problem-set3/"/>
      <url>/2023/04/22/cs50-problem-set3/</url>
      
        <content type="html"><![CDATA[<h1 id="CS50-Problem-Set3"><a href="#CS50-Problem-Set3" class="headerlink" title="CS50 Problem Set3"></a>CS50 Problem Set3</h1><blockquote><p>CS50 Problem Set3 Page：<a href="https://cs50.harvard.edu/x/2023/psets/3/">https://cs50.harvard.edu/x/2023/psets/3/</a></p><p>CS50 Study Group：677535709（QQ Group）</p></blockquote><h2 id="What-to-Do-🚀"><a href="#What-to-Do-🚀" class="headerlink" title="What to Do 🚀"></a>What to Do 🚀</h2><blockquote><p>Be sure you have completed <a href="https://cs50.harvard.edu/x/2023/labs/3/">Lab 3</a> before beginning this problem set.</p></blockquote><ol><li>Log into <a href="https://code.cs50.io/">code.cs50.io</a> using your GitHub account</li><li>Run <code>update50</code> in your codespace’s terminal window to ensure your codespace is up-to-date and, when prompted, click <strong>Rebuild now</strong></li><li>Submit <a href="https://cs50.harvard.edu/x/2023/psets/3/plurality/">Plurality</a></li><li>Submit one of:<ul><li><a href="https://cs50.harvard.edu/x/2023/psets/3/runoff/">Runoff</a>, if feeling less comfortable</li><li><a href="https://cs50.harvard.edu/x/2023/psets/3/tideman/">Tideman</a>, if feeling more comfortable</li></ul></li></ol><p>If you submit both Runoff and Tideman, we’ll record the higher of your two scores.</p><hr><h2 id="Problem-Set-📚"><a href="#Problem-Set-📚" class="headerlink" title="Problem Set 📚"></a>Problem Set 📚</h2><h3 id="P1-Plurality"><a href="#P1-Plurality" class="headerlink" title="P1 - Plurality"></a>P1 - Plurality</h3><blockquote><p><a href="https://cs50.harvard.edu/x/2023/psets/3/plurality/">https://cs50.harvard.edu/x/2023/psets/3/plurality/</a></p></blockquote><h3 id="P2-Runoff"><a href="#P2-Runoff" class="headerlink" title="P2 - Runoff"></a>P2 - Runoff</h3><blockquote><p><a href="https://cs50.harvard.edu/x/2023/psets/3/runoff/">https://cs50.harvard.edu/x/2023/psets/3/runoff/</a></p></blockquote><h3 id="P3-Tideman"><a href="#P3-Tideman" class="headerlink" title="P3 - Tideman"></a>P3 - Tideman</h3><blockquote><p><a href="https://cs50.harvard.edu/x/2023/psets/3/tideman/">https://cs50.harvard.edu/x/2023/psets/3/tideman/</a></p></blockquote><hr><h2 id="Solution-🧑🏻‍💻"><a href="#Solution-🧑🏻‍💻" class="headerlink" title="Solution 🧑🏻‍💻"></a>Solution 🧑🏻‍💻</h2><p>Ricky’s GitHub Repository for CS50 Problem Sets: <a href="https://github.com/Ricky2333/CS50-PSet">https://github.com/Ricky2333/CS50-PSet</a></p><blockquote><p>CS50 Study Group：677535709（QQ Group）</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> CS50 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CS50 </tag>
            
            <tag> C </tag>
            
            <tag> CS50 PSet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CS50 Lab3</title>
      <link href="/2023/04/21/cs50-lab3/"/>
      <url>/2023/04/21/cs50-lab3/</url>
      
        <content type="html"><![CDATA[<h1 id="Lab-3-Sort"><a href="#Lab-3-Sort" class="headerlink" title="Lab 3: Sort"></a>Lab 3: Sort</h1><blockquote><p>Lab3 Page: <a href="https://cs50.harvard.edu/x/2023/labs/3/">https://cs50.harvard.edu/x/2023/labs/3/</a></p><p>CS50 Study Group：677535709（QQ Group）</p></blockquote><h2 id="Background-🧐"><a href="#Background-🧐" class="headerlink" title="Background 🧐"></a>Background 🧐</h2><p>Recall from lecture that we saw a few algorithms for sorting a sequence of numbers: selection sort, bubble sort, and merge sort.</p><ul><li>Selection sort iterates through the unsorted portions of a list, selecting the smallest element each time and moving it to its correct location.</li><li>Bubble sort compares pairs of adjacent values one at a time and swaps them if they are in the incorrect order. This continues until the list is sorted.</li><li>Merge sort recursively divides the list into two repeatedly and then merges the smaller lists back into a larger one in the correct order.</li></ul><h2 id="Getting-Started-🍉"><a href="#Getting-Started-🍉" class="headerlink" title="Getting Started 🍉"></a>Getting Started 🍉</h2><p>Open <a href="https://code.cs50.io/">VS Code</a>.</p><p>Start by clicking inside your terminal window, then execute <code>cd</code> by itself. You should find that its “prompt” resembles the below.</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Click inside of that terminal window and then execute</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> https://cdn.cs50.net/2022/fall/labs/3/sort.zip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>followed by Enter in order to download a ZIP called <code>sort.zip</code> in your codespace. Take care not to overlook the space between <code>wget</code> and the following URL, or any other character for that matter!</p><p>Now execute</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">unzip</span> sort.zip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>to create a folder called <code>sort</code>. You no longer need the ZIP file, so you can execute</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rm</span> sort.zip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>and respond with “y” followed by Enter at the prompt to remove the ZIP file you downloaded.</p><p>Now type</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> <span class="token function">sort</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>followed by Enter to move yourself into (i.e., open) that directory. Your prompt should now resemble the below.</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sort/ $<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>If all was successful, you should execute</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ls</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>and you should see a collection of <code>.txt</code> files alongside executable programs <code>sort1</code>, <code>sort2</code>, and <code>sort3</code>.</p><p>If you run into any trouble, follow these same steps steps again and see if you can determine where you went wrong!</p><h2 id="Instructions"><a href="#Instructions" class="headerlink" title="Instructions"></a>Instructions</h2><p>Provided to you are three already-compiled C programs, <code>sort1</code>, <code>sort2</code>, and <code>sort3</code>. Each of these programs implements a different sorting algorithm: selection sort, bubble sort, or merge sort (though not necessarily in that order!). Your task is to determine which sorting algorithm is used by each file.</p><ul><li><code>sort1</code>, <code>sort2</code>, and <code>sort3</code> are binary files, so you won’t be able to view the C source code for each. To assess which sort implements which algorithm, run the sorts on different lists of values.</li><li>Multiple <code>.txt</code> files are provided to you. These files contain <code>n</code> lines of values, either reversed, shuffled, or sorted.<ul><li>For example, <code>reversed10000.txt</code> contains 10000 lines of numbers that are reversed from <code>10000</code>, while <code>random10000.txt</code> contains 10000 lines of numbers that are in random order.</li></ul></li><li>To run the sorts on the text files, in the terminal, run <code>./[program_name] [text_file.txt]</code> . Make sure you have made use of <code>cd</code> to move into the <code>sort</code> directory!<ul><li>For example, to sort <code>reversed10000.txt</code> with <code>sort1</code>, run <code>./sort1 reversed10000.txt</code>.</li></ul></li><li>You may find it helpful to time your sorts. To do so, run <code>time ./[sort_file] [text_file.txt]</code>.<ul><li>For example, you could run <code>time ./sort1 reversed10000.txt</code> to run <code>sort1</code> on 10,000 reversed numbers. At the end of your terminal’s output, you can look at the <code>real</code> time to see how much time actually elapsed while running the program.</li></ul></li><li>Record your answers in <code>answers.txt</code>, along with an explanation for each program, by filling in the blanks marked <code>TODO</code>.</li></ul><h2 id="Hints-💡"><a href="#Hints-💡" class="headerlink" title="Hints 💡"></a>Hints 💡</h2><ul><li>The different types of <code>.txt</code> files may help you determine which sort is which. Consider how each algorithm performs with an already sorted list. How about a reversed list? Or shuffled list? It may help to work through a smaller list of each type and walk through each sorting process.</li></ul><h2 id="Walkthrough-🎥"><a href="#Walkthrough-🎥" class="headerlink" title="Walkthrough 🎥"></a>Walkthrough 🎥</h2><blockquote><p>YouTube: <a href="https://youtu.be/-Bhxxw6JKKY">https://youtu.be/-Bhxxw6JKKY</a></p><p>bilibili: <a href="https://www.bilibili.com/video/BV1pX4y1B7cj?share_source=copy_web">https://www.bilibili.com/video/BV1pX4y1B7cj?share_source=copy_web</a></p></blockquote><h2 id="How-to-Check-Your-Answers-🖥"><a href="#How-to-Check-Your-Answers-🖥" class="headerlink" title="How to Check Your Answers 🖥"></a>How to Check Your Answers 🖥</h2><p>Execute the below to evaluate the correctness of your answers using <code>check50</code>. But be sure to fill in your explanations as well, which <code>check50</code> won’t check here!</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">check50 cs50/labs/2023/x/sort<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="How-to-Submit-🚀"><a href="#How-to-Submit-🚀" class="headerlink" title="How to Submit 🚀"></a>How to Submit 🚀</h2><p>In your terminal, execute the below to submit your work.</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">submit50 cs50/labs/2023/x/sort<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="Solution-🧑🏻‍💻"><a href="#Solution-🧑🏻‍💻" class="headerlink" title="Solution 🧑🏻‍💻"></a>Solution 🧑🏻‍💻</h2><p>Ricky’s GitHub Repository for CS50 Labs: <a href="https://github.com/Ricky2333/CS50-Labs">https://github.com/Ricky2333/CS50-Labs</a></p><blockquote><p>CS50 Study Group：677535709（QQ Group）</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> CS50 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CS50 </tag>
            
            <tag> CS50 Lab </tag>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CS50 Problem Set2</title>
      <link href="/2023/04/20/cs50-problem-set2/"/>
      <url>/2023/04/20/cs50-problem-set2/</url>
      
        <content type="html"><![CDATA[<h1 id="CS50-Problem-Set2"><a href="#CS50-Problem-Set2" class="headerlink" title="CS50 Problem Set2"></a>CS50 Problem Set2</h1><blockquote><p>CS50 Problem Set2 Page：<a href="https://cs50.harvard.edu/x/2023/psets/2/">https://cs50.harvard.edu/x/2023/psets/2/</a></p><p>CS50 Study Group：677535709（QQ Group）</p></blockquote><h2 id="What-to-Do-🚀"><a href="#What-to-Do-🚀" class="headerlink" title="What to Do 🚀"></a>What to Do 🚀</h2><blockquote><p>Be sure you have completed <a href="https://cs50.harvard.edu/x/2023/labs/2/">Lab 2</a> before beginning this problem set.</p></blockquote><ol><li>Log into <a href="https://code.cs50.io/">code.cs50.io</a> using your GitHub account</li><li>Run <code>update50</code> in your codespace’s terminal window to ensure your codespace is up-to-date and, when prompted, click <strong>Rebuild now</strong></li><li>Submit <a href="https://cs50.harvard.edu/x/2023/psets/2/readability/">Readability</a></li><li>Submit one of:<ul><li><a href="https://cs50.harvard.edu/x/2023/psets/2/bulbs/">Bulbs</a>, if feeling less comfortable</li><li><a href="https://cs50.harvard.edu/x/2023/psets/2/caesar/">Caesar</a>, if feeling less comfortable</li><li><a href="https://cs50.harvard.edu/x/2023/psets/2/substitution/">Substitution</a>, if feeling more comfortable</li><li><a href="https://cs50.harvard.edu/x/2023/psets/2/wordle50/">Wordle50</a>, if feeling more comfortable</li></ul></li></ol><p>If you submit more than one of Bulbs, Caesar, Substitution, or Wordle50, we’ll record the single highest of your scores among those problems.</p><hr><h2 id="Problem-Set-📚"><a href="#Problem-Set-📚" class="headerlink" title="Problem Set 📚"></a>Problem Set 📚</h2><h3 id="P1-Readability"><a href="#P1-Readability" class="headerlink" title="P1 - Readability"></a>P1 - Readability</h3><blockquote><p><a href="https://cs50.harvard.edu/x/2023/psets/2/readability/">https://cs50.harvard.edu/x/2023/psets/2/readability/</a></p></blockquote><h3 id="P2-Bulbs"><a href="#P2-Bulbs" class="headerlink" title="P2 - Bulbs"></a>P2 - Bulbs</h3><blockquote><p><a href="https://cs50.harvard.edu/x/2023/psets/2/bulbs/">https://cs50.harvard.edu/x/2023/psets/2/bulbs/</a></p></blockquote><h3 id="P3-Caesar"><a href="#P3-Caesar" class="headerlink" title="P3 - Caesar"></a>P3 - Caesar</h3><blockquote><p><a href="https://cs50.harvard.edu/x/2023/psets/2/caesar/">https://cs50.harvard.edu/x/2023/psets/2/caesar/</a></p></blockquote><h3 id="P4-Substitution"><a href="#P4-Substitution" class="headerlink" title="P4 - Substitution"></a>P4 - Substitution</h3><blockquote><p><a href="https://cs50.harvard.edu/x/2023/psets/2/substitution/">https://cs50.harvard.edu/x/2023/psets/2/substitution/</a></p></blockquote><h3 id="P5-Wordle50"><a href="#P5-Wordle50" class="headerlink" title="P5 - Wordle50"></a>P5 - Wordle50</h3><blockquote><p><a href="https://cs50.harvard.edu/x/2023/psets/2/wordle50/">https://cs50.harvard.edu/x/2023/psets/2/wordle50/</a></p></blockquote><hr><h2 id="Solution-🧑🏻‍💻"><a href="#Solution-🧑🏻‍💻" class="headerlink" title="Solution 🧑🏻‍💻"></a>Solution 🧑🏻‍💻</h2><p>Ricky’s GitHub Repository for CS50 Problem Sets: <a href="https://github.com/Ricky2333/CS50-PSet">https://github.com/Ricky2333/CS50-PSet</a></p><blockquote><p>CS50 Study Group：677535709（QQ Group）</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> CS50 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CS50 </tag>
            
            <tag> C </tag>
            
            <tag> CS50 PSet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CS50 Lab2</title>
      <link href="/2023/04/19/cs50-lab2/"/>
      <url>/2023/04/19/cs50-lab2/</url>
      
        <content type="html"><![CDATA[<h1 id="Lab-2-Scrabble"><a href="#Lab-2-Scrabble" class="headerlink" title="Lab 2: Scrabble"></a>Lab 2: Scrabble</h1><blockquote><p>Lab2 Page: <a href="https://cs50.harvard.edu/x/2023/labs/2/">https://cs50.harvard.edu/x/2023/labs/2/</a></p><p>CS50 Study Group：677535709（QQ Group）</p></blockquote><h2 id="Background-🧐"><a href="#Background-🧐" class="headerlink" title="Background 🧐"></a>Background 🧐</h2><p>In the game of <a href="https://scrabble.hasbro.com/en-us/rules">Scrabble</a>, players create words to score points, and the number of points is the sum of the point values of each letter in the word.</p><table><thead><tr><th>Letter</th><th>Points</th></tr></thead><tbody><tr><td><strong>A</strong></td><td>1</td></tr><tr><td><strong>B</strong></td><td>3</td></tr><tr><td><strong>C</strong></td><td>3</td></tr><tr><td><strong>D</strong></td><td>2</td></tr><tr><td><strong>E</strong></td><td>1</td></tr><tr><td><strong>F</strong></td><td>4</td></tr><tr><td><strong>G</strong></td><td>2</td></tr><tr><td><strong>H</strong></td><td>4</td></tr><tr><td><strong>I</strong></td><td>1</td></tr><tr><td><strong>J</strong></td><td>8</td></tr><tr><td><strong>K</strong></td><td>5</td></tr><tr><td><strong>L</strong></td><td>1</td></tr><tr><td><strong>M</strong></td><td>3</td></tr><tr><td><strong>N</strong></td><td>1</td></tr><tr><td><strong>O</strong></td><td>1</td></tr><tr><td><strong>P</strong></td><td>3</td></tr><tr><td><strong>Q</strong></td><td>10</td></tr><tr><td><strong>R</strong></td><td>1</td></tr><tr><td><strong>S</strong></td><td>1</td></tr><tr><td><strong>T</strong></td><td>1</td></tr><tr><td><strong>U</strong></td><td>1</td></tr><tr><td><strong>V</strong></td><td>4</td></tr><tr><td><strong>W</strong></td><td>4</td></tr><tr><td><strong>X</strong></td><td>8</td></tr><tr><td><strong>Y</strong></td><td>4</td></tr><tr><td>Z</td><td>10</td></tr></tbody></table><p>For example, if we wanted to score the word <code>Code</code>, we would note that in general Scrabble rules, the <code>C</code> is worth <code>3</code> points, the <code>o</code> is worth <code>1</code> point, the <code>d</code> is worth <code>2</code> points, and the <code>e</code> is worth <code>1</code> point. Summing these, we get that <code>Code</code> is worth <code>3 + 1 + 2 + 1 = 7</code> points.</p><h2 id="Getting-Started-🍉"><a href="#Getting-Started-🍉" class="headerlink" title="Getting Started 🍉"></a>Getting Started 🍉</h2><p>Open <a href="https://code.cs50.io/">VS Code</a>.</p><p>Start by clicking inside your terminal window, then execute <code>cd</code> by itself. You should find that its “prompt” resembles the below.</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Click inside of that terminal window and then execute</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> https://cdn.cs50.net/2022/fall/labs/2/scrabble.zip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>followed by Enter in order to download a ZIP called <code>scrabble.zip</code> in your codespace. Take care not to overlook the space between <code>wget</code> and the following URL, or any other character for that matter!</p><p>Now execute</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">unzip</span> scrabble.zip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>to create a folder called <code>scrabble</code>. You no longer need the ZIP file, so you can execute</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rm</span> scrabble.zip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>and respond with “y” followed by Enter at the prompt to remove the ZIP file you downloaded.</p><p>Now type</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> scrabble<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>followed by Enter to move yourself into (i.e., open) that directory. Your prompt should now resemble the below.</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">scrabble/ $<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>If all was successful, you should execute</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ls</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>and you should see a file called <code>scrabble.c</code>. Open that file by executing the below:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">code scrabble.c<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>If you run into any trouble, follow these same steps steps again and see if you can determine where you went wrong!</p><h2 id="Walkthrough-🎥"><a href="#Walkthrough-🎥" class="headerlink" title="Walkthrough 🎥"></a>Walkthrough 🎥</h2><blockquote><p>YouTube: <a href="https://youtu.be/RtjxxxlN1gc">https://youtu.be/RtjxxxlN1gc</a></p><p>bilibili: <a href="https://www.bilibili.com/video/BV1Do4y1t7Dv?share_source=copy_web">https://www.bilibili.com/video/BV1Do4y1t7Dv?share_source=copy_web</a></p></blockquote><h2 id="Implementation-Details-☘️"><a href="#Implementation-Details-☘️" class="headerlink" title="Implementation Details ☘️"></a>Implementation Details ☘️</h2><p>Complete the implementation of <code>scrabble.c</code>, such that it determines the winner of a short scrabble-like game, where two players each enter their word, and the higher scoring player wins.</p><ul><li>Notice that we’ve stored the point values of each letter of the alphabet in an integer array named <code>POINTS</code><ul><li>For example, <code>A</code> or <code>a</code> is worth 1 point (represented by <code>POINTS[0]</code>), <code>B</code> or <code>b</code> is worth 3 points (represented by <code>POINTS[1]</code>), etc.</li></ul></li><li>Notice that we’ve created a prototype for a helper function called <code>compute_score()</code> that takes a string as input and returns an <code>int</code>. Whenever we would like to assign point values to a particular word, we can call this function. Note that this prototype is required for C to know that <code>compute_score()</code> exists later in the program.</li><li>In <code>main()</code>, the program prompts the two players for their words using the <code>get_string()</code> function. These values are stored inside variables named <code>word1</code> and <code>word2</code>.</li><li>In <code>compute_score()</code>, your program should compute, using the <code>POINTS</code> array, and return the score for the string argument. Characters that are not letters should be given zero points, and uppercase and lowercase letters should be given the same point values.<ul><li>For example, <code>!</code> is worth <code>0</code> points while <code>A</code> and <code>a</code> are both worth <code>1</code> point.</li><li>Though Scrabble rules normally require that a word be in the dictionary, no need to check for that in this problem!</li></ul></li><li>In <code>main()</code>, your program should print, depending on the players’ scores, <code>Player 1 wins!</code>, <code>Player 2 wins!</code>, or <code>Tie!</code>.</li></ul><h2 id="How-to-Test-Your-Code-🖥"><a href="#How-to-Test-Your-Code-🖥" class="headerlink" title="How to Test Your Code 🖥"></a>How to Test Your Code 🖥</h2><p>Your program should behave per the examples below.</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ ./scrabblePlayer <span class="token number">1</span>: Question?Player <span class="token number">2</span>: Question<span class="token operator">!</span>Tie<span class="token operator">!</span>$ ./scrabblePlayer <span class="token number">1</span>: Oh,Player <span class="token number">2</span>: hai<span class="token operator">!</span>Player <span class="token number">2</span> wins<span class="token operator">!</span>$ ./scrabblePlayer <span class="token number">1</span>: COMPUTERPlayer <span class="token number">2</span>: sciencePlayer <span class="token number">1</span> wins<span class="token operator">!</span>$ ./scrabblePlayer <span class="token number">1</span>: ScrabblePlayer <span class="token number">2</span>: wiNNeRPlayer <span class="token number">1</span> wins<span class="token operator">!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Execute the below to evaluate the correctness of your code using <code>check50</code>. But be sure to compile and test it yourself as well!</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">check50 cs50/labs/2023/x/scrabble<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Execute the below to evaluate the style of your code using <code>style50</code>.</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">style50 scrabble.c<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="How-to-Submit-🚀"><a href="#How-to-Submit-🚀" class="headerlink" title="How to Submit 🚀"></a>How to Submit 🚀</h2><p>In your terminal, execute the below to submit your work.</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">submit50 cs50/labs/2023/x/scrabble<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="Solution-🧑🏻‍💻"><a href="#Solution-🧑🏻‍💻" class="headerlink" title="Solution 🧑🏻‍💻"></a>Solution 🧑🏻‍💻</h2><p>Ricky’s GitHub Repository for CS50 Labs: <a href="https://github.com/Ricky2333/CS50-Labs">https://github.com/Ricky2333/CS50-Labs</a></p><blockquote><p>CS50 Study Group：677535709（QQ Group）</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> CS50 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CS50 </tag>
            
            <tag> CS50 Lab </tag>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CS50 Practice Problems</title>
      <link href="/2023/04/18/cs50-practice-problems-week1/"/>
      <url>/2023/04/18/cs50-practice-problems-week1/</url>
      
        <content type="html"><![CDATA[<h1 id="Week1-Practice-Problems"><a href="#Week1-Practice-Problems" class="headerlink" title="Week1-Practice Problems"></a>Week1-Practice Problems</h1><blockquote><p>Practice Problems Page: <a href="https://cs50.harvard.edu/x/2023/problems/1/">https://cs50.harvard.edu/x/2023/problems/1/</a></p><p>CS50 Study Group：677535709（QQ Group）</p></blockquote><p>These problems assume that you have already set up your CS50 Codespace in <a href="https://cs50.harvard.edu/x/2023/labs/1/">Lab 1</a>. Be sure to complete that before attempting these problems.</p><p>In addition to this week’s lab and problem set, you’re welcome to try any of these (optional!) practice problems:</p><ul><li><a href="https://cs50.harvard.edu/x/2023/problems/1/debug/">Debug</a>, for becoming familiar with C syntax and debugging programs</li><li><a href="https://cs50.harvard.edu/x/2023/problems/1/half/">Half</a>, for practice creating a function</li><li><a href="https://cs50.harvard.edu/x/2023/problems/1/prime/">Prime</a>, for practice using <code>for</code> loops</li></ul><hr><h2 id="P1-Debug"><a href="#P1-Debug" class="headerlink" title="P1-Debug"></a>P1-Debug</h2><blockquote><p><a href="https://cs50.harvard.edu/x/2023/problems/1/debug/">https://cs50.harvard.edu/x/2023/problems/1/debug/</a></p></blockquote><h3 id="Learning-Goals-🎯"><a href="#Learning-Goals-🎯" class="headerlink" title="Learning Goals 🎯"></a>Learning Goals 🎯</h3><ul><li>Become familiar with C syntax</li><li>Learn what C compiler error messages mean</li><li>Get practice debugging</li></ul><h3 id="Code-🧑🏻‍💻"><a href="#Code-🧑🏻‍💻" class="headerlink" title="Code 🧑🏻‍💻"></a>Code 🧑🏻‍💻</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// Become familiar wih C syntax</span><span class="token comment">// Learn to debug buggy code</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cs50.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">// Ask for your name and where live</span>    string name <span class="token operator">=</span> <span class="token function">get_string</span><span class="token punctuation">(</span><span class="token string">"What is your name? "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    string location <span class="token operator">=</span> <span class="token function">get_string</span><span class="token punctuation">(</span><span class="token string">"Where do you live? "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// Say hello</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hello, %s, from %s!\n"</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> location<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="P2-Half"><a href="#P2-Half" class="headerlink" title="P2-Half"></a>P2-Half</h2><h3 id="Learning-Goals-🎯-1"><a href="#Learning-Goals-🎯-1" class="headerlink" title="Learning Goals 🎯"></a>Learning Goals 🎯</h3><ul><li>Work with different data types</li><li>Practice type casting</li><li>Use math operations</li><li>Create a function with input parameters and return value</li></ul><h3 id="Code-🧑🏻‍💻-1"><a href="#Code-🧑🏻‍💻-1" class="headerlink" title="Code 🧑🏻‍💻"></a>Code 🧑🏻‍💻</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// Calculate your half of a restaurant bill</span><span class="token comment">// Data types, operations, type casting, return value</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cs50.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token keyword">float</span> <span class="token function">half</span><span class="token punctuation">(</span><span class="token keyword">float</span> bill<span class="token punctuation">,</span> <span class="token keyword">float</span> tax<span class="token punctuation">,</span> <span class="token keyword">int</span> tip<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">float</span> bill_amount <span class="token operator">=</span> <span class="token function">get_float</span><span class="token punctuation">(</span><span class="token string">"Bill before tax and tip: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">float</span> tax_percent <span class="token operator">=</span> <span class="token function">get_float</span><span class="token punctuation">(</span><span class="token string">"Sale Tax Percent: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> tip_percent <span class="token operator">=</span> <span class="token function">get_int</span><span class="token punctuation">(</span><span class="token string">"Tip percent: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"You will owe $%.2f each!\n"</span><span class="token punctuation">,</span> <span class="token function">half</span><span class="token punctuation">(</span>bill_amount<span class="token punctuation">,</span> tax_percent<span class="token punctuation">,</span> tip_percent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// TODO: Complete the function</span><span class="token keyword">float</span> <span class="token function">half</span><span class="token punctuation">(</span><span class="token keyword">float</span> bill<span class="token punctuation">,</span> <span class="token keyword">float</span> tax<span class="token punctuation">,</span> <span class="token keyword">int</span> tip<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">// add tax to the bill</span>    bill <span class="token operator">+=</span> bill <span class="token operator">*</span> tax <span class="token operator">/</span> <span class="token number">100.0</span><span class="token punctuation">;</span>    <span class="token comment">// add tip to the bill</span>    bill <span class="token operator">+=</span> bill <span class="token operator">*</span> tip <span class="token operator">/</span> <span class="token number">100.0</span><span class="token punctuation">;</span>    <span class="token comment">// split the bill</span>    <span class="token keyword">return</span> bill <span class="token operator">/</span> <span class="token number">2.0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="P3-Prime"><a href="#P3-Prime" class="headerlink" title="P3-Prime"></a>P3-Prime</h2><blockquote><p><a href="https://cs50.harvard.edu/x/2023/problems/1/prime/">https://cs50.harvard.edu/x/2023/problems/1/prime/</a></p></blockquote><h3 id="Learning-Goals-🎯-2"><a href="#Learning-Goals-🎯-2" class="headerlink" title="Learning Goals 🎯"></a>Learning Goals 🎯</h3><ul><li>Practice using <code>for</code> loops</li><li>Using modulo</li><li>Creating a Boolean function</li></ul><h3 id="Code-🧑🏻‍💻-2"><a href="#Code-🧑🏻‍💻-2" class="headerlink" title="Code 🧑🏻‍💻"></a>Code 🧑🏻‍💻</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cs50.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>bool <span class="token function">prime</span><span class="token punctuation">(</span><span class="token keyword">int</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">// get the lower bound</span>    <span class="token keyword">int</span> min<span class="token punctuation">;</span>    <span class="token keyword">do</span>    <span class="token punctuation">{</span>        min <span class="token operator">=</span> <span class="token function">get_int</span><span class="token punctuation">(</span><span class="token string">"Minimum: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>min <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// get the upper bound</span>    <span class="token keyword">int</span> max<span class="token punctuation">;</span>    <span class="token keyword">do</span>    <span class="token punctuation">{</span>        max <span class="token operator">=</span> <span class="token function">get_int</span><span class="token punctuation">(</span><span class="token string">"Maximum: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>min <span class="token operator">&gt;=</span> max<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// list prime numbers in this range</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> min<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> max<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">prime</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%i\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// check if number is a prime number</span>bool <span class="token function">prime</span><span class="token punctuation">(</span><span class="token keyword">int</span> number<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">// TODO</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> number <span class="token operator">/</span> i<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>number <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> false<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> CS50 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CS50 </tag>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CS50 Problem Set1</title>
      <link href="/2023/04/18/cs50-problem-set1/"/>
      <url>/2023/04/18/cs50-problem-set1/</url>
      
        <content type="html"><![CDATA[<h1 id="CS50-Problem-Set1"><a href="#CS50-Problem-Set1" class="headerlink" title="CS50 Problem Set1"></a>CS50 Problem Set1</h1><blockquote><p>CS50 Problem Set1 Page：<a href="https://cs50.harvard.edu/x/2023/psets/1/">https://cs50.harvard.edu/x/2023/psets/1/</a></p><p>CS50 Study Group：677535709（QQ Group）</p></blockquote><h2 id="What-to-Do-🚀"><a href="#What-to-Do-🚀" class="headerlink" title="What to Do 🚀"></a>What to Do 🚀</h2><blockquote><p>Be sure you have completed <a href="https://cs50.harvard.edu/x/2023/labs/1/">Lab 1</a> before beginning this problem set.</p></blockquote><ol><li>Log into <a href="https://code.cs50.io/">code.cs50.io</a> using your GitHub account.</li><li>Run <code>update50</code> in your codespace’s terminal window to ensure your codespace is up-to-date and, when prompted, click <strong>Rebuild now</strong></li><li>Submit <a href="https://cs50.harvard.edu/x/2023/psets/1/hello/">Hello</a></li><li>Submit one of:<ul><li><a href="https://cs50.harvard.edu/x/2023/psets/1/mario/less/">this version of Mario</a> if feeling less comfortable</li><li><a href="https://cs50.harvard.edu/x/2023/psets/1/mario/more/">this version of Mario</a> if feeling more comfortable</li></ul></li><li>Submit one of:<ul><li><a href="https://cs50.harvard.edu/x/2023/psets/1/cash/">Cash</a> if feeling less comfortable</li><li><a href="https://cs50.harvard.edu/x/2023/psets/1/credit/">Credit</a> if feeling more comfortable</li></ul></li></ol><p>If you submit both versions of Mario, we’ll record the higher of your two scores. If you submit both Cash and Credit, we’ll record the higher of your two scores.</p><hr><h2 id="Problem-Set-📚"><a href="#Problem-Set-📚" class="headerlink" title="Problem Set 📚"></a>Problem Set 📚</h2><h3 id="P1-Hello"><a href="#P1-Hello" class="headerlink" title="P1 - Hello"></a>P1 - Hello</h3><blockquote><p><a href="https://cs50.harvard.edu/x/2023/psets/1/hello/">https://cs50.harvard.edu/x/2023/psets/1/hello/</a></p></blockquote><h3 id="P2-Mario-less"><a href="#P2-Mario-less" class="headerlink" title="P2 - Mario-less"></a>P2 - Mario-less</h3><blockquote><p><a href="https://cs50.harvard.edu/x/2023/psets/1/mario/less/">https://cs50.harvard.edu/x/2023/psets/1/mario/less/</a></p></blockquote><h3 id="P3-Mario-more"><a href="#P3-Mario-more" class="headerlink" title="P3 - Mario-more"></a>P3 - Mario-more</h3><blockquote><p><a href="https://cs50.harvard.edu/x/2023/psets/1/mario/more/">https://cs50.harvard.edu/x/2023/psets/1/mario/more/</a></p></blockquote><h3 id="P4-Cash"><a href="#P4-Cash" class="headerlink" title="P4 - Cash"></a>P4 - Cash</h3><blockquote><p><a href="https://cs50.harvard.edu/x/2023/psets/1/cash/">https://cs50.harvard.edu/x/2023/psets/1/cash/</a></p></blockquote><h3 id="P5-Credit"><a href="#P5-Credit" class="headerlink" title="P5 - Credit"></a>P5 - Credit</h3><blockquote><p><a href="https://cs50.harvard.edu/x/2023/psets/1/credit/">https://cs50.harvard.edu/x/2023/psets/1/credit/</a></p></blockquote><hr><h2 id="Solution-🧑🏻‍💻"><a href="#Solution-🧑🏻‍💻" class="headerlink" title="Solution 🧑🏻‍💻"></a>Solution 🧑🏻‍💻</h2><p>Ricky’s GitHub Repository for CS50 Problem Sets: <a href="https://github.com/Ricky2333/CS50-PSet">https://github.com/Ricky2333/CS50-PSet</a></p><blockquote><p>CS50 Study Group：677535709（QQ Group）</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> CS50 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CS50 </tag>
            
            <tag> C </tag>
            
            <tag> CS50 PSet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CS50 Lab1</title>
      <link href="/2023/04/17/cs50-lab1/"/>
      <url>/2023/04/17/cs50-lab1/</url>
      
        <content type="html"><![CDATA[<h1 id="Lab-1-Population-Growth"><a href="#Lab-1-Population-Growth" class="headerlink" title="Lab 1: Population Growth"></a>Lab 1: Population Growth</h1><blockquote><p>Lab1 Page: <a href="https://cs50.harvard.edu/x/2023/labs/1/">https://cs50.harvard.edu/x/2023/labs/1/</a></p><p>CS50 Study Group：677535709（QQ Group）</p></blockquote><h2 id="Background-🧐"><a href="#Background-🧐" class="headerlink" title="Background 🧐"></a>Background 🧐</h2><p>Say we have a population of <code>n</code> llamas. Each year, <code>n / 3</code> new llamas are born, and <code>n / 4</code> llamas pass away.</p><p>For example, if we were to start with <code>n = 1200</code> llamas, then in the first year, <code>1200 / 3 = 400</code> new llamas would be born and <code>1200 / 4 = 300</code> llamas would pass away. At the end of that year, we would have <code>1200 + 400 - 300 = 1300</code> llamas.</p><p>To try another example, if we were to start with <code>n = 1000</code> llamas, at the end of the year, we would have <code>1000 / 3 = 333.33</code> new llamas. We can’t have a decimal portion of a llama, though, so we’ll truncate the decimal to get <code>333</code> new llamas born. <code>1000 / 4 = 250</code> llamas will pass away, so we’ll end up with a total of <code>1000 + 333 - 250 = 1083</code> llamas at the end of the year.</p><h2 id="Getting-Started-🍉"><a href="#Getting-Started-🍉" class="headerlink" title="Getting Started 🍉"></a>Getting Started 🍉</h2><p>Recall that Visual Studio Code (aka VS Code) is a popular “integrated development environment” (IDE) via which you can write code. So that you don’t have to download, install, and configure your own copy of VS Code, we’ll use a cloud-based version instead that has everything you’ll need pre-installed.</p><ol><li>Log into <a href="https://code.cs50.io/">code.cs50.io</a> using your GitHub account and follow the on-screen instructions to set up your very own “codespace” for Visual Studio Code. Once your codespace loads, you should see that, by default, VS Code is divided into three regions. Toward the top of VS Code is your “text editor,” where you’ll write all of your programs. Toward the bottom is a “terminal window,” a command-line interface (CLI) that allows you to explore your codespace’s files and directories (aka folders), compile code, and run programs. And on the left is your file “explorer,” a graphical user interface (GUI) via which you can also explore your codespace’s files and directories.</li><li>Once your codespace has loaded, close any <strong>Welcome</strong> tabs that might have opened by default</li><li>Log into <a href="https://submit.cs50.io/">submit.cs50.io</a> using your GitHub account and click <strong>Authorize cs50</strong> to activate <code>check50</code>.</li><li>Run <code>update50</code> in your codespace’s terminal window to ensure your codespace is up-to-date and, if prompted, click <strong>Rebuild now</strong>.</li></ol><p>Once complete, start by clicking inside your terminal window, then execute <code>cd</code> by itself. You should find that its “prompt” resembles the below.</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Click inside of that terminal window and then type</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> population<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>followed by Enter in order to make a directory called <code>population</code> in your codespace. Take care not to overlook the space between <code>mkdir</code> and <code>population</code> or any other character for that matter!</p><p>Here on out, to execute (i.e., run) a command means to type it into a terminal window and then hit Enter. Commands are case-sensitive, so be sure not to type in uppercase when you mean lowercase or vice versa.</p><p>Now execute</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> population<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>to move yourself into (i.e., open) that directory. Your prompt should now resemble the below.</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">population/ $<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Click inside of that terminal window and then type</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> https://cdn.cs50.net/2022/fall/labs/1/population.c<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>followed by Enter in order to download a template file called <code>population.c</code> in your codespace. Take care not to overlook the space between <code>wget</code> and the following URL, or any other character for that matter! If all was successful, you should execute</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ls</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>and see a file named <code>population.c</code>. Executing <code>code population.c</code> should open the file where you will type your code for this lab. If not, retrace your steps and see if you can determine where you went wrong!</p><h2 id="Walkthrough-🎥"><a href="#Walkthrough-🎥" class="headerlink" title="Walkthrough 🎥"></a>Walkthrough 🎥</h2><blockquote><p>YouTube: <a href="https://www.youtube.com/watch?v=dZmtRHHUB1M&amp;ab_channel=CS50">https://www.youtube.com/watch?v=dZmtRHHUB1M&amp;ab_channel=CS50</a></p><p>bilibili: <a href="https://www.bilibili.com/video/BV1CX4y1z79G?share_source=copy_web">https://www.bilibili.com/video/BV1CX4y1z79G?share_source=copy_web</a></p></blockquote><h2 id="Implementation-Details-☘️"><a href="#Implementation-Details-☘️" class="headerlink" title="Implementation Details ☘️"></a>Implementation Details ☘️</h2><p>Complete the implementation of <code>population.c</code>, such that it calculates the number of years required for the population to grow from the start size to the end size.</p><ul><li>Your program should first prompt the user for a starting population size.<ul><li>If the user enters a number less than 9 (the minimum allowed population size), the user should be re-prompted to enter a starting population size until they enter a number that is greater than or equal to 9. (If we start with fewer than 9 llamas, the population of llamas will quickly become stagnant!)</li></ul></li><li>Your program should then prompt the user for an ending population size.<ul><li>If the user enters a number less than the starting population size, the user should be re-prompted to enter an ending population size until they enter a number that is greater than or equal to the starting population size. (After all, we want the population of llamas to grow!)</li></ul></li><li>Your program should then calculate the (integer) number of years required for the population to reach at least the size of the end value.</li><li>Finally, your program should print the number of years required for the llama population to reach that end size, as by printing to the terminal <code>Years: n</code>, where <code>n</code> is the number of years.</li></ul><h2 id="How-to-Test-Your-Code-🖥"><a href="#How-to-Test-Your-Code-🖥" class="headerlink" title="How to Test Your Code 🖥"></a>How to Test Your Code 🖥</h2><p>Your program should behave per these examples below.</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ ./populationStart size: <span class="token number">1200</span>End size: <span class="token number">1300</span>Years: <span class="token number">1</span>$ ./populationStart size: <span class="token parameter variable">-5</span>Start size: <span class="token number">3</span>Start size: <span class="token number">9</span>End size: <span class="token number">5</span>End size: <span class="token number">18</span>Years: <span class="token number">8</span>$ ./populationStart size: <span class="token number">20</span>End size: <span class="token number">1</span>End size: <span class="token number">10</span>End size: <span class="token number">100</span>Years: <span class="token number">20</span>$ ./populationStart size: <span class="token number">100</span>End size: <span class="token number">1000000</span>Years: <span class="token number">115</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Execute the below to evaluate the correctness of your code using <code>check50</code>. But be sure to compile and test it yourself as well!</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">check50 cs50/labs/2023/x/population<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Execute the below to evaluate the style of your code using <code>style50</code>.</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">style50 population.c<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="How-to-Submit-🚀"><a href="#How-to-Submit-🚀" class="headerlink" title="How to Submit 🚀"></a>How to Submit 🚀</h2><p>In your terminal, execute the below to submit your work.</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">submit50 cs50/labs/2023/x/population<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="Solution-🧑🏻‍💻"><a href="#Solution-🧑🏻‍💻" class="headerlink" title="Solution 🧑🏻‍💻"></a>Solution 🧑🏻‍💻</h2><p>Ricky’s GitHub Repository for CS50 Labs: <a href="https://github.com/Ricky2333/CS50-Labs">https://github.com/Ricky2333/CS50-Labs</a></p><blockquote><p>CS50 Study Group：677535709（QQ Group）</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> CS50 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CS50 </tag>
            
            <tag> CS50 Lab </tag>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git教程</title>
      <link href="/2023/04/16/git-jiao-cheng/"/>
      <url>/2023/04/16/git-jiao-cheng/</url>
      
        <content type="html"><![CDATA[<p>本篇博客还在修改润色中～</p><p>敬请期待～</p>]]></content>
      
      
      <categories>
          
          <category> Git教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> CS50W </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python VS C（下篇）</title>
      <link href="/2023/04/15/python-vs-c-xia-pian/"/>
      <url>/2023/04/15/python-vs-c-xia-pian/</url>
      
        <content type="html"><![CDATA[<h2 id="写在最前-✍️"><a href="#写在最前-✍️" class="headerlink" title="写在最前 ✍️"></a>写在最前 ✍️</h2><p>在上一篇博客 <a href="https://rickyxcoder.top/2023/04/14/python-vs-c-shang-pian/">Python VS C（上篇）</a>中，摊主从程序运行过程、模块导入、基本数据类型、变量、运算符、条件语句等角度对 C语言 和 Python 进行了对比。</p><p>那在这篇博客中，摊主将更进一步，从循环、函数定义、输入、输出等角度，对这两个语言进行对比，帮助掌握其中一门语言的小伙伴快速上手另一门语言。</p><blockquote><p>本篇博客也是摊主的 <strong><a href="https://cs50.harvard.edu/x/2023/">CS50</a></strong> 课程学习笔记。</p><p><strong><a href="https://cs50.harvard.edu/x/2023/">CS50</a></strong> 是哈佛大学的计算机导论公开课，也是摊主截止目前认为最棒的计算机导论课程。</p><p>授课的 <a href="https://cs.harvard.edu/malan/">David J. Malan</a> 教授是摊主见过的对计算机教学最热情的老师，也是在计算机基础教学领域对摊主影响最大的一位老师。摊主也希望通过自己的努力，不断向 Malan 教授这样的大牛看齐。</p><p>有兴趣的小伙伴可以点击下面的链接，查看 <strong>CS50</strong> 课程的相关信息。</p><p><strong>CS50</strong> 官方课程网站：<a href="https://cs50.harvard.edu/x/2023/">https://cs50.harvard.edu/x/2023/</a></p></blockquote><hr><h2 id="正文（下篇）"><a href="#正文（下篇）" class="headerlink" title="正文（下篇）"></a>正文（下篇）</h2><h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h3><h4 id="C语言"><a href="#C语言" class="headerlink" title="C语言"></a>C语言</h4><p>基本语法</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">while</span> <span class="token punctuation">(</span>条件<span class="token punctuation">)</span> <span class="token punctuation">{</span>    循环体<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>实例</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h4><p>基本语法</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">while</span> 条件<span class="token punctuation">:</span>    循环体<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>实例</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">i <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">while</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">:</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>  i<span class="token operator">+=</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>不同点：</p><ul><li>C语言的条件表达式需要由括号<code>()</code> 括起来，而 Python 的条件表达式无需添加 <code>()</code> （但是加了也没错）</li><li>C语言中，循环体需要使用 <strong>花括号</strong> <code>{}</code> 括起来；而 Python 中，循环体是由 <strong>缩进</strong> 来表示的一段代码块，且需要在条件表达式后添加 <code>:</code></li></ul><hr><h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><h4 id="C语言-1"><a href="#C语言-1" class="headerlink" title="C语言"></a>C语言</h4><p>基本语法</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">for</span> <span class="token punctuation">(</span>初始化表达式<span class="token punctuation">;</span> 条件表达式<span class="token punctuation">;</span> 更新表达式<span class="token punctuation">)</span> <span class="token punctuation">{</span>    循环体<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>实例</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="Python-1"><a href="#Python-1" class="headerlink" title="Python"></a>Python</h4><p>在 Python 中，for 循环的变量是 <strong>迭代器</strong>（iterator），可以是任何可迭代的对象，例如列表、元组、字典、字符串等。</p><p>基本语法</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> 变量 <span class="token keyword">in</span> 序列<span class="token punctuation">:</span>    循环体<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>实例</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>不同点：</p><ul><li>在 C 语言中，for 循环使用一个 <strong>循环变量</strong> 来表示循环次数，可以使用 <code>++</code> 和 <code>--</code> 运算符来递增或递减循环变量的值；而在 Python 中，for 循环使用一个 <strong>迭代器</strong> 来表示循环次数，循环变量是根据迭代器的值自动计算得到的。</li><li>在 C 语言中，循环范围是一个数值区间，通常使用循环变量的值来表示循环次数；而在 Python 中，循环范围是一个序列，可以是任何可迭代的对象，例如列表、元组、字典、字符串等。</li></ul><hr><h3 id="do-while循环"><a href="#do-while循环" class="headerlink" title="do-while循环"></a>do-while循环</h3><h4 id="C语言-2"><a href="#C语言-2" class="headerlink" title="C语言"></a>C语言</h4><p>和 <code>while</code> 循环不同， <code>do-while</code> 循环会 <strong>先执行一次循环体</strong>，然后再根据循环条件来决定是否继续执行循环。</p><p>基本语法</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">do</span> <span class="token punctuation">{</span>    循环体<span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>条件<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>实例</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">do</span> <span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Python-2"><a href="#Python-2" class="headerlink" title="Python"></a>Python</h4><p>Python 中 <strong>没有原生的 do-while 循环结构</strong>，但是可以通过 <code>while</code> 循环和 <code>break</code> 语句来实现类似于 <code>do-while</code> 循环的效果。</p><p>实例</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">i <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    i <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">if</span> i <span class="token operator">&gt;=</span> <span class="token number">10</span><span class="token punctuation">:</span>        <span class="token keyword">break</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="函数定义"><a href="#函数定义" class="headerlink" title="函数定义"></a>函数定义</h3><h4 id="C语言-3"><a href="#C语言-3" class="headerlink" title="C语言"></a>C语言</h4><p>基本语法</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">返回类型 函数名<span class="token punctuation">(</span>参数列表<span class="token punctuation">)</span> <span class="token punctuation">{</span>    函数体<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>实例</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// 计算1～n之和</span><span class="token keyword">int</span> <span class="token function">get_sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        res <span class="token operator">+=</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Python-3"><a href="#Python-3" class="headerlink" title="Python"></a>Python</h4><p>基本语法</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> 函数名<span class="token punctuation">(</span>参数列表<span class="token punctuation">)</span><span class="token punctuation">:</span>    函数体<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>实例</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 计算1～n之和</span><span class="token keyword">def</span> <span class="token function">get_sum</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    res <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>        res <span class="token operator">+=</span> i    <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>🍉 PS：C语言中，需要指定返回值类型（没有返回值，需要写 <code>void</code>）；而在 Python 中，就像无需指定变量类型一样，无需指定返回值类型。</p><hr><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><h4 id="C语言-4"><a href="#C语言-4" class="headerlink" title="C语言"></a>C语言</h4><p>C语言使用<code>scanf</code> 语句进行输入，<code>scanf</code> 在读取不同类型的数据时，需要使用不同的格式读取。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">float</span> f<span class="token punctuation">;</span><span class="token keyword">double</span> avg<span class="token punctuation">;</span><span class="token keyword">char</span> c<span class="token punctuation">;</span><span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 读入一个整数</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%f"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 读入一个单精度浮点数</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lf"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>avg<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 读入一个双精度浮点数</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 读入一个字符</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 读入一个字符串</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Python-4"><a href="#Python-4" class="headerlink" title="Python"></a>Python</h4><p>Python 使用 <code>input()</code> 语句进行输入，其返回值均为字符串。所以如果想要对输入值进行后续处理，需要进行数据类型的转换。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请输入一个整数："</span><span class="token punctuation">)</span><span class="token punctuation">)</span>f <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请输入一个浮点数："</span><span class="token punctuation">)</span><span class="token punctuation">)</span>s <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请输入一个字符串："</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>🍉 PS：在转换用户输入的数据类型时，可能会出现一些异常情况，例如输入的数据格式不正确。为了避免这些异常情况导致程序崩溃，Python 使用 <strong>异常处理机制</strong> 对这些异常情况进行处理。</p><p>Python 使用 <code>try-except</code> 语句来捕获 <strong>ValueError</strong> 异常，如果发生这种异常，则输出提示信息。通过这种方式，可以保证程序在发生异常情况时不会崩溃，而是进行相应的处理。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span>    n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请输入一个整数："</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">except</span> ValueError<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"输入的数据不是整数，请重新输入！"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>在 <strong>算法竞赛</strong> 中，C/C++ 和 Python 的输入也有不少差别。</p><p>由于算法竞赛中的输入类型较为繁多，摊主打算单独写一篇博客，列举算法竞赛中 C/C++ 和 Python 的输入对比，有兴趣的小伙伴们可以小小期待一下。</p></blockquote><hr><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><h4 id="C语言-5"><a href="#C语言-5" class="headerlink" title="C语言"></a>C语言</h4><p>C语言使用 <code>printf</code> 语句进行输出，且需要自行使用 <code>\n</code> 控制换行。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token keyword">float</span> f <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span><span class="token keyword">double</span> avg <span class="token operator">=</span> <span class="token number">3.1415926</span><span class="token punctuation">;</span><span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token char">'a'</span><span class="token punctuation">;</span><span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"hello, world"</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token operator">*</span>pn <span class="token operator">=</span> <span class="token operator">&amp;</span>n<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span>     <span class="token comment">// 输出一个整数</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%f\n"</span><span class="token punctuation">,</span>f<span class="token punctuation">)</span>     <span class="token comment">// 输出一个单精度浮点数</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lf\n"</span><span class="token punctuation">,</span>avg<span class="token punctuation">)</span>  <span class="token comment">// 输出一个双精度浮点数</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c\n"</span><span class="token punctuation">,</span>c<span class="token punctuation">)</span>     <span class="token comment">// 输出一个字符</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span>str<span class="token punctuation">)</span>   <span class="token comment">// 输出一个字符串</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p\n"</span><span class="token punctuation">,</span> pn<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出一个指针</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Python-5"><a href="#Python-5" class="headerlink" title="Python"></a>Python</h4><p>Python 使用 <code>print</code> 语句进行输出，且 <code>print</code> 语句默认在结尾补充一个 <code>\n</code> 进行换行。（可以通过设置 <code>end</code> 参数改变默认的 <code>\n</code> 值，见下文）</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 输出一个整数</span>n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请输入一个整数："</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"整数："</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token comment"># 输出一个浮点数</span>f <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请输入一个浮点数："</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"浮点数："</span><span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token comment"># 输出一个字符串</span>s <span class="token operator">=</span> <span class="token string">"Hello, world!"</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"字符串："</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><p>🍉 补充1：在 <strong>Python 3</strong> 中，<code>print</code> 函数的用法发生了一些变化，可以通过设置 <code>sep</code> 和 <code>end</code> 参数来控制输出的格式：</p><ul><li><p><code>sep</code> 参数用于指定各个参数之间的分隔符，默认为一个空格；</p><ul><li><p>输入</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">n <span class="token operator">=</span> <span class="token number">123</span>f <span class="token operator">=</span> <span class="token number">3.14</span>s <span class="token operator">=</span> <span class="token string">"Hello, world!"</span><span class="token keyword">print</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> f<span class="token punctuation">,</span> s<span class="token punctuation">,</span> sep<span class="token operator">=</span><span class="token string">", "</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>输出</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token number">123</span><span class="token punctuation">,</span> <span class="token number">3.14</span><span class="token punctuation">,</span> Hello<span class="token punctuation">,</span> world!<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p><code>end</code> 参数用于指定输出结束时使用的字符，默认为一个换行符。</p><ul><li><p>输入</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">n <span class="token operator">=</span> <span class="token number">123</span>f <span class="token operator">=</span> <span class="token number">3.14</span>s <span class="token operator">=</span> <span class="token string">"Hello, world!"</span><span class="token keyword">print</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> f<span class="token punctuation">,</span> s<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">"~"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>输出</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token number">123</span> <span class="token number">3.14</span> Hello<span class="token punctuation">,</span> world!<span class="token operator">~</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li></ul><br><p>🍉 补充2：在 <strong>Python 3</strong> 中，<code>print</code> 函数还可以通过指定 <strong>格式化字符串</strong> 的方式来输出变量值。</p><p>通过在字符串前添加 <code>f</code> 代表 <strong>format</strong> 字符串，字符串内使用一对花括号 <code>{变量名}</code> 来输出变量的值。</p><ul><li><p>实例1：字符串拼接</p><ul><li><p>代码</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">name <span class="token operator">=</span> <span class="token string">"Ricky"</span>hobby <span class="token operator">=</span> <span class="token string">"coding"</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Hello, </span><span class="token interpolation"><span class="token punctuation">{</span>name<span class="token punctuation">}</span></span><span class="token string">\nYour hobby is </span><span class="token interpolation"><span class="token punctuation">{</span>hobby<span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>输出结果</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">Hello<span class="token punctuation">,</span> RickyYour hobby <span class="token keyword">is</span> coding<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li><li><p>实例2：字符串拼接其他类型变量</p><ul><li><p>代码</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">name <span class="token operator">=</span> <span class="token string">"Ricky"</span>age <span class="token operator">=</span> <span class="token number">20</span>score <span class="token operator">=</span> <span class="token number">99.99</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Hello, </span><span class="token interpolation"><span class="token punctuation">{</span>name<span class="token punctuation">}</span></span><span class="token string">\nYour age is </span><span class="token interpolation"><span class="token punctuation">{</span>age<span class="token punctuation">}</span></span><span class="token string">\nYour score is </span><span class="token interpolation"><span class="token punctuation">{</span>score<span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>输出结果</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">Hello<span class="token punctuation">,</span> RickyYour age <span class="token keyword">is</span> <span class="token number">20</span>Your score <span class="token keyword">is</span> <span class="token number">99.99</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>实例3：指定浮点数精度为4位</p><ul><li><p>代码</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">pi <span class="token operator">=</span> <span class="token number">3.1415926</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"圆周率是：</span><span class="token interpolation"><span class="token punctuation">{</span>pi<span class="token punctuation">:</span><span class="token format-spec">.4f</span><span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>输出结果</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">圆周率是：<span class="token number">3.1415</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li></ul><hr><h2 id="写在最后-✍️"><a href="#写在最后-✍️" class="headerlink" title="写在最后 ✍️"></a>写在最后 ✍️</h2><p>由于篇幅有限，博客中有不少语法细节没有展开，例如 Python <code>print</code> 输出的多种方式等，有兴趣的小伙伴可以自行探索。</p><p>而像 Python 中的一些可迭代对象（如列表、字典、集合、元组等）与 C++ 中各种 STL 容器的对比也没有在本篇博客中呈现，是因为这些数据类型的对比，每一个都值得写一整篇博客，所以没有匆忙的列入这篇博客中。</p><p>当然，摊主也会在后续的博客中不断完善相关内容，感兴趣的小伙伴们可以期待一波，我们下篇博客再见👋</p><hr><h2 id="参考资料-📚"><a href="#参考资料-📚" class="headerlink" title="参考资料 📚"></a>参考资料 📚</h2><p>Python官方教程：<a href="https://docs.python.org/3/tutorial/">https://docs.python.org/3/tutorial/</a></p><p>CS50：<a href="https://cs50.harvard.edu/x/2023/">https://cs50.harvard.edu/x/2023/</a></p><p>ChatGPT：<a href="https://openai.com/blog/chatgpt">https://openai.com/blog/chatgpt</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> CS50 </tag>
            
            <tag> C </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python VS C（上篇）</title>
      <link href="/2023/04/14/python-vs-c-shang-pian/"/>
      <url>/2023/04/14/python-vs-c-shang-pian/</url>
      
        <content type="html"><![CDATA[<h2 id="写在最前-✍️"><a href="#写在最前-✍️" class="headerlink" title="写在最前 ✍️"></a>写在最前 ✍️</h2><p>相信不少科班的同学最先学习的编程语言是 <strong>C语言</strong>。</p><p>之后因为各种各样的需求，就去学习了更多的语言，比如 <strong>Python</strong>，<strong>Java</strong> 等。</p><p>如今 <strong>Python</strong> 的热度可以说是越来越高，依靠其强大的计算生态，Python 牢牢占据 <a href="https://www.tiobe.com/tiobe-index/">TIOBE 热门编程语言排行榜</a> TOP3 的位置（写稿日：2023 年 4 月 14 日，Python 是 TOP1）。</p><p>相比 C语言，<strong>Python</strong> 在人工智能、数据科学、自动化、网页开发等领域有更加广泛的应用。</p><p>但是从 <strong>基本语法</strong> 的角度来看，Python 和 C语言 <strong>有不少共通之处</strong>。</p><p>所以本文将从这个角度切入，列举 Python 和 C语言 在基础语法上的异同点，帮助已经掌握 C语言的同学更快上手 Python。</p><blockquote><p>本篇博客也是摊主的 <strong><a href="https://cs50.harvard.edu/x/2023/">CS50</a></strong> 课程学习笔记。</p><p><strong><a href="https://cs50.harvard.edu/x/2023/">CS50</a></strong> 是哈佛大学的计算机导论公开课，也是摊主截止目前认为最棒的计算机导论课程。</p><p>授课的 <a href="https://cs.harvard.edu/malan/">David J. Malan</a> 教授是摊主见过的对计算机教学最热情的老师，也是在计算机基础教学领域对摊主影响最大的一位老师。摊主也希望通过自己的努力，不断向 Malan 教授这样的大牛看齐。</p><p>有兴趣的小伙伴可以点击下面的链接，查看 <strong>CS50</strong> 课程的相关信息。</p><p><strong>CS50</strong> 官方课程网站：<a href="https://cs50.harvard.edu/x/2023/">https://cs50.harvard.edu/x/2023/</a></p></blockquote><hr><h2 id="正文（上篇）"><a href="#正文（上篇）" class="headerlink" title="正文（上篇）"></a>正文（上篇）</h2><h3 id="程序运行过程"><a href="#程序运行过程" class="headerlink" title="程序运行过程"></a>程序运行过程</h3><h4 id="C语言"><a href="#C语言" class="headerlink" title="C语言"></a>C语言</h4><p>在 <strong>C语言</strong> 中，源代码 <code>test.c</code> 通过 <strong>编译器</strong> 编译为可执行文件 <code>test</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gcc <span class="token parameter variable">-o</span> <span class="token builtin class-name">test</span> test.c<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行该文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./test<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h4><p>Python 是 <strong>解释型语言</strong>，不需要编译成可执行文件，源代码 <code>test.py</code> 可以直接被 <strong>解释器</strong> 读取和执行，解释器会逐行解释代码并执行相应的操作。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python test.py<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h3 id="库-x2F-模块的导入"><a href="#库-x2F-模块的导入" class="headerlink" title="库/模块的导入"></a>库/模块的导入</h3><h4 id="C语言-1"><a href="#C语言-1" class="headerlink" title="C语言"></a>C语言</h4><p>基本语法</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;...&gt;</span>  <span class="token comment">// 基本语法</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>实例</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span>  <span class="token comment">// 实例</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;math.h&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="Python-1"><a href="#Python-1" class="headerlink" title="Python"></a>Python</h4><p>基本语法</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> <span class="token operator">&lt;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&gt;</span>            <span class="token comment"># 导入整个模块</span><span class="token keyword">import</span> <span class="token operator">&lt;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&gt;</span> <span class="token keyword">as</span> <span class="token operator">&lt;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&gt;</span>   <span class="token comment"># 导入整个模块并且给模块取别名</span><span class="token keyword">from</span> <span class="token operator">&lt;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> <span class="token operator">&lt;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&gt;</span> <span class="token comment"># 导入模块中的某个方法或属性</span><span class="token keyword">from</span> <span class="token operator">&lt;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> <span class="token operator">*</span>     <span class="token comment"># 导入模块中的所有方法和属性</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>实例</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> csv<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">from</span> math <span class="token keyword">import</span> sqrt<span class="token punctuation">,</span> sin<span class="token punctuation">,</span> cos<span class="token keyword">from</span> datetime <span class="token keyword">import</span> <span class="token operator">*</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="主函数"><a href="#主函数" class="headerlink" title="主函数"></a>主函数</h3><h4 id="C语言-2"><a href="#C语言-2" class="headerlink" title="C语言"></a>C语言</h4><p>在C语言中，主函数 <code>main</code> 是程序执行的起点，它的函数原型如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中，<code>argc</code> 表示命令行参数的数量，<code>argv</code> 是一个指向每个参数的指针数组。主函数可以通过命令行参数来接收外部传递进来的数据。</p><p>一些特点</p><ul><li><p><code>main</code> 函数必须存在于程序中，否则编译器会报错。</p></li><li><p><code>main</code> 函数中的代码将按照从上到下的顺序依次执行。</p></li><li><p>程序执行结束后，<code>main</code> 函数可以返回一个整数值，表示程序的执行结果。一般来说，返回值为 0 表示程序执行成功，非零值表示程序执行失败或出错。</p></li></ul><p>C语言 <code>main</code> 函数实例：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hello, World!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Python-2"><a href="#Python-2" class="headerlink" title="Python"></a>Python</h4><p>Python 中没有像 C 语言中的 <code>main</code> 函数那样的入口函数，整个 Python 脚本都是可执行的。</p><p>但是，<strong>为了方便编写测试代码和模块化编程</strong>，Python 提供了一种 <strong>判断当前脚本是否作为主程序执行</strong> 的方式，即通过判断 <code>__name__</code> 变量的值是否为 <code>"__main__"</code>。</p><ul><li>当 Python 脚本作为主程序执行时，<code>__name__</code> 的值会被设置为 <code>"__main__"</code></li><li>当 Python 脚本作为模块被导入时，<code>__name__</code> 的值会被设置为模块的名称。</li></ul><p>这个特性可以让我们在 Python 脚本中编写一些测试代码，但不会影响到被导入的代码。</p><p>通常，在 Python 脚本的末尾会使用以下代码来判断当前脚本是否作为主程序执行：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token comment"># 在这里编写主程序</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在这个代码块中，我们可以编写 Python 脚本的主要逻辑。当我们在命令行中执行这个脚本时，就会执行这个代码块中的代码。例如，下面是一个简单的 Python 脚本示例：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">say_hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Hello, World!"</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    say_hello<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当我们在命令行中执行这个脚本时，将会输出 <code>"Hello, World!"</code>；而如果我们将这个脚本作为模块导入到其他脚本中时，<code>say_hello</code> 函数不会被执行。</p><hr><h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><h4 id="C-x2F-C"><a href="#C-x2F-C" class="headerlink" title="C/C++"></a>C/C++</h4><table><thead><tr><th align="center">数据类型</th><th align="center">实例</th><th align="center">备注</th></tr></thead><tbody><tr><td align="center">bool</td><td align="center"><code>bool is_prime = true</code>、<code>bool is_odd = false</code></td><td align="center">早期 C语言 并不支持 <code>bool</code> 类型，通常用0和1表示<br>而 C++ 支持 <code>bool</code> 类型</td></tr><tr><td align="center">char</td><td align="center"><code>char c = 'b'</code></td><td align="center">表示单个字符</td></tr><tr><td align="center">int</td><td align="center"><code>int n = 10</code></td><td align="center">整数</td></tr><tr><td align="center">float</td><td align="center"><code>float a = 1.101</code></td><td align="center">单精度浮点数</td></tr><tr><td align="center">double</td><td align="center"><code>double b = 1.10001</code></td><td align="center">双精度浮点数</td></tr><tr><td align="center">long</td><td align="center"><code>long long n = 10000</code></td><td align="center">长整形</td></tr><tr><td align="center">string</td><td align="center"><code>string s = "hello"</code></td><td align="center">C语言 并没有 <code>string</code> 类型，通常用字符数组或字符指针表示<br>而 C++ 支持 <code>string</code> 类型</td></tr></tbody></table><p>🍉 PS：更多语法细节由于篇幅所限，且本文重点是两个语言的语法对比，故暂不列出，有需要同学可以自行查阅相关细节。</p><h4 id="Python-3"><a href="#Python-3" class="headerlink" title="Python"></a>Python</h4><table><thead><tr><th>数据类型</th><th>实例</th><th>备注</th></tr></thead><tbody><tr><td>bool</td><td><code>is_prime = True</code> 、<code>is_odd = False</code></td><td>首字母需大写</td></tr><tr><td>int</td><td><code>num = 10</code></td><td>整数</td></tr><tr><td>float</td><td><code>avg = 33.333</code></td><td>浮点数</td></tr><tr><td>complex</td><td><code>c = 1 + 2j</code></td><td>复数</td></tr><tr><td>str</td><td><code>s = 'hello'</code>、<code>t = "world"</code></td><td>单引号和双引号均可表示字符串</td></tr><tr><td>NoneType</td><td><code>n = None</code></td><td>空类型，表示没有值，用于占位或表示不存在的情况。</td></tr></tbody></table><p>🍉 PS：C 语言中的整数类型有固定的位数，例如 int 类型通常是 32 位或 64 位。而 Python 中的整数类型是动态的，可以表示任意大小的整数。</p><blockquote><p>Python中的列表（list）、集合（set）、字典（dictionary）等将在 Python VS C（下篇）中对比。</p></blockquote><hr><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><h4 id="C语言-3"><a href="#C语言-3" class="headerlink" title="C语言"></a>C语言</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> counter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">// 需要指定变量的数据类型</span>counter<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token comment">// 支持++等自增运算符</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p> C 语言是一种 <strong>静态类型语言</strong>，需要 <strong>在使用变量之前明确定义变量的数据类型</strong>。</p><h4 id="Python-4"><a href="#Python-4" class="headerlink" title="Python"></a>Python</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">counter <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment"># 无需指定变量的数据类型</span>counter <span class="token operator">+=</span> <span class="token number">1</span> <span class="token comment"># 不支持++等自增运算符</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Python 是一种 <strong>动态类型语言</strong>，因此它的数据类型是动态推断的，<strong>不需要事先定义变量的数据类型</strong>。</p><p>🍉PS：Python 中的数据类型通常是对象，具有更加丰富和灵活的操作和属性，例如字符串类型的方法和属性可以方便地进行字符串的处理和操作。而 C 语言中的数据类型则通常是基本数据类型，需要使用函数来进行操作和处理。</p><hr><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><p>Python 和 C 语言都支持「与」、「或」、「非」等逻辑运算符，但是具体的语法略有不同。</p><h4 id="C语言-4"><a href="#C语言-4" class="headerlink" title="C语言"></a>C语言</h4><ul><li><code>&amp;&amp;</code> 运算符：当两个操作数都为真（非零）时，结果为真，否则为假。</li><li><code>||</code> 运算符：当两个操作数中至少有一个为真（非零）时，结果为真，否则为假。</li><li><code>!</code> 运算符：对操作数取反，即真变为假，假变为真。</li></ul><h4 id="Python-5"><a href="#Python-5" class="headerlink" title="Python"></a>Python</h4><ul><li><p><code>and</code> 运算符：当两个操作数都为 True 时，结果为 True，否则为 False。</p></li><li><p><code>or</code> 运算符：当两个操作数中有至少一个为 True 时，结果为 True，否则为 False。</p></li><li><p><code>not</code> 运算符：对操作数取反，即 True 变为 False，False 变为 True。</p></li></ul><p>🍉 PS：C 语言 中的逻辑运算符 <strong>不具有短路运算</strong> 的特性，总是会计算左右两侧的操作数；而 Python 中的逻辑运算符具有 <strong>短路运算</strong> 的特性，当左侧操作数已经可以确定结果时，右侧操作数不再进行计算。</p><hr><h3 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h3><table><thead><tr><th>运算符</th><th>描述</th><th>C 示例</th><th>Python 示例</th></tr></thead><tbody><tr><td>+</td><td>加法</td><td><code>a + b</code></td><td><code>a + b</code></td></tr><tr><td>-</td><td>减法</td><td><code>a - b</code></td><td><code>a - b</code></td></tr><tr><td>*</td><td>乘法</td><td><code>a * b</code></td><td><code>a * b</code></td></tr><tr><td>/</td><td>浮点除法</td><td><code>a / b</code></td><td><code>a / b</code></td></tr><tr><td>%</td><td>取模</td><td><code>a % b</code></td><td><code>a % b</code></td></tr><tr><td>/</td><td>整除</td><td><code>a / b</code></td><td><code>a // b</code></td></tr><tr><td>$a^b$</td><td>幂运算</td><td><code>pow()</code></td><td><code>a ** b</code></td></tr></tbody></table><p>🍉 PS1：在 C 语言中，没有幂运算符，需要使用库函数 <code>pow()</code> 来进行幂运算，且 <code>pow()</code> 函数返回的是一个浮点数值，需要进行类型转换才能得到整数类型的结果。</p><p>例如：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;math.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token function">pow</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// c 的值为 8，</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>🍉 PS2：需要注意的是，在 C 语言中进行整数除法时，如果两个操作数都是整数，则除法运算符 <code>/</code> 返回的是一个整数值，会向下取整；而在 Python 中，除法运算符 <code>/</code> 返回的是一个浮点数值。</p><hr><h3 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h3><p>Python 和 C 语言中的位运算符均包括按位与（&amp;）、按位或（|）、按位异或（^）、按位取反（~）、左移位（&lt;&lt;）和右移位（&gt;&gt;）等运算。</p><table><thead><tr><th>运算符</th><th>描述</th><th>C 示例</th><th>Python 示例</th></tr></thead><tbody><tr><td>&amp;</td><td>按位与</td><td><code>a &amp; b</code></td><td><code>a &amp; b</code></td></tr><tr><td>|</td><td>按位或</td><td><code>a | b</code></td><td><code>a | b</code></td></tr><tr><td>^</td><td>按位异或</td><td><code>a ^ b</code></td><td><code>a ^ b</code></td></tr><tr><td>~</td><td>按位取反</td><td><code>~a</code></td><td><code>~a</code></td></tr><tr><td>&lt;&lt;</td><td>左移位</td><td><code>a &lt;&lt; b</code></td><td><code>a &lt;&lt; b</code></td></tr><tr><td>&gt;&gt;</td><td>右移位</td><td><code>a &gt;&gt; b</code></td><td><code>a &gt;&gt; b</code></td></tr></tbody></table><p>🍉 PS1：C 语言中的位运算符只能用于整数类型，包括有符号整数和无符号整数，而 Python 中的位运算符可以用于整数类型和布尔类型，布尔类型会被转换为整数类型（True 转换为 1，False 转换为 0）。</p><p>🍉 PS2：Python 和 C 语言的右移运算符（&gt;&gt;）在处理有符号整数时表现不同。Python 对负数的右移是向零舍入（也称为算术右移），而 C 语言的行为是依赖于编译器实现的（可能是算术右移或逻辑右移）。</p><hr><h3 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h3><h4 id="C语言-5"><a href="#C语言-5" class="headerlink" title="C语言"></a>C语言</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&gt;</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"x &gt; y\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"x = y\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"x &lt; y\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Python-6"><a href="#Python-6" class="headerlink" title="Python"></a>Python</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">x <span class="token operator">=</span> <span class="token number">3</span>y <span class="token operator">=</span> <span class="token number">5</span><span class="token keyword">if</span> x <span class="token operator">&gt;</span> y<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"x &gt; y"</span><span class="token punctuation">)</span><span class="token keyword">elif</span> x <span class="token operator">==</span> y<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"x = y"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"x &lt; y"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>不同点：</p><ul><li>C语言的条件表达式需要由括号<code>()</code> 括起来，而 Python 的条件表达式无需添加 <code>()</code> （但是加了也没错）</li><li>C语言使用 <strong>花括号</strong> <code>{}</code> 来表示代码块，而 Python 使用 <strong>缩进</strong> 来表示代码块，且需要在条件表达式后添加 <code>:</code></li><li>C语言使用 <code>else if</code>，而 Python 使用 <code>elif</code></li></ul><hr><h2 id="写在最后-✍️"><a href="#写在最后-✍️" class="headerlink" title="写在最后 ✍️"></a>写在最后 ✍️</h2><p>由于篇幅有限，且为了读者更好的阅读体验，摊主把内容拆成了上篇和下篇，更多对比内容见 <a href="https://rickyxcoder.top/2023/04/15/python-vs-c-xia-pian/">Python VS C（下篇）</a>☘️</p><hr><h2 id="参考资料-📚"><a href="#参考资料-📚" class="headerlink" title="参考资料 📚"></a>参考资料 📚</h2><p>Python官方教程：<a href="https://docs.python.org/3/tutorial/">https://docs.python.org/3/tutorial/</a></p><p>CS50：<a href="https://cs50.harvard.edu/x/2023/">https://cs50.harvard.edu/x/2023/</a></p><p>ChatGPT：<a href="https://openai.com/blog/chatgpt">https://openai.com/blog/chatgpt</a></p>]]></content>
      
      
      <categories>
          
          <category> Python基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CS50 </tag>
            
            <tag> C </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python学习笔记｜CSV</title>
      <link href="/2023/04/12/python-xue-xi-bi-ji-csv/"/>
      <url>/2023/04/12/python-xue-xi-bi-ji-csv/</url>
      
        <content type="html"><![CDATA[<p>本篇博客还在修改润色中～</p><p>敬请期待～</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>信息奥赛题解｜踩方格</title>
      <link href="/2023/04/10/xin-xi-ao-sai-ti-jie-cai-fang-ge/"/>
      <url>/2023/04/10/xin-xi-ao-sai-ti-jie-cai-fang-ge/</url>
      
        <content type="html"><![CDATA[<h1 id="信息奥赛题解｜踩方格"><a href="#信息奥赛题解｜踩方格" class="headerlink" title="信息奥赛题解｜踩方格"></a>信息奥赛题解｜踩方格</h1><hr><h2 id="🚀-题目浏览"><a href="#🚀-题目浏览" class="headerlink" title="🚀 题目浏览"></a>🚀 题目浏览</h2><h3 id="【题目描述】"><a href="#【题目描述】" class="headerlink" title="【题目描述】"></a>【题目描述】</h3><p>有一个方格矩阵，矩阵边界在无穷远处。我们做如下假设：</p><p>a、每走一步时，只能从当前方格移动一格，走到某个相邻的方格上；</p><p>b、走过的格子立即塌陷无法再走第二次；</p><p>c、只能向北、东、西三个方向走；</p><p>请问：如果允许在方格矩阵上走 $n$ 步，共有多少种不同的方案。（$2$ 种走法只要有一步不一样，即被认为是不同的方案）</p><h3 id="【输入】"><a href="#【输入】" class="headerlink" title="【输入】"></a>【输入】</h3><p>允许在方格上行走的步数 $n(n \le 20)$。</p><h3 id="【输出】"><a href="#【输出】" class="headerlink" title="【输出】"></a>【输出】</h3><p>计算出的方案数量。</p><h3 id="【输入样例】"><a href="#【输入样例】" class="headerlink" title="【输入样例】"></a>【输入样例】</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="【输出样例】"><a href="#【输出样例】" class="headerlink" title="【输出样例】"></a>【输出样例】</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token number">7</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="【原题链接】"><a href="#【原题链接】" class="headerlink" title="【原题链接】"></a>【原题链接】</h3><p><a href="http://ybt.ssoier.cn:8088/problem_show.php?pid=1196">http://ybt.ssoier.cn:8088/problem_show.php?pid=1196</a></p><hr><h2 id="☘️-题解分析"><a href="#☘️-题解分析" class="headerlink" title="☘️ 题解分析"></a>☘️ 题解分析</h2><p>本题是递推问题的经典问题之一，属于 「<strong>全局移动路线方案数</strong>」问题。</p><p>在之前的题解中，我们已经讲解了「<strong>单点移动路线</strong>」问题，其目标是求到达 <strong>某一个点</strong> 的方案数，但并没有涉及走到该点的步数；而本题的「<strong>全局移动路线</strong>」则是给定步数，求解所有该步数内能够走的不同路线数量。</p><blockquote><p>附：单点移动路线问题相关题解</p><p>主站点：</p><p><a href="https://rickyxcoder.top/2023/04/09/xin-xi-ao-sai-ti-jie-yi-dong-lu-xian/">【信息奥赛题解】移动路线（详细分析题解 &amp; C++ 代码）</a><br><a href="https://rickyxcoder.top/2023/04/10/xin-xi-ao-sai-ti-jie-guo-he-zu/">【信息奥赛题解】过河卒（详细分析题解 &amp; C++ 代码）</a></p><p>备用站点：</p><p><a href="https://rickyxcoder.gitee.io/2023/04/09/xin-xi-ao-sai-ti-jie-yi-dong-lu-xian/">【信息奥赛题解】移动路线（详细分析题解 &amp; C++ 代码）</a><br><a href="https://rickyxcoder.gitee.io/2023/04/10/xin-xi-ao-sai-ti-jie-guo-he-zu/">【信息奥赛题解】过河卒（详细分析题解 &amp; C++ 代码）</a></p></blockquote><p>在本题中，我们假设 <code>f[n]</code> 为 <strong>走 n 步的不同路线总数</strong>，那么这个 <code>f[n]</code> 可以拆分成 3 个独立的部分：</p><ul><li><strong>最后一步</strong> 向 <strong>左</strong> 走的路线数 <code>l[n]</code></li><li><strong>最后一步</strong> 向 <strong>右</strong> 走的路线数 <code>r[n]</code></li><li><strong>最后一步</strong> 向 <strong>上</strong> 走的路线数 <code>u[n]</code></li></ul><p>即 <code>f[n] = l[n] + r[n] + u[n]</code> ，所以我们可以通过计算 <code>l[n], r[n], u[n]</code> 来得到 <code>f[n]</code></p><p>而对于 <code>l[n]，r[n], u[n]</code> ，我们可以由 <code>f[n - 1]</code> 来推断。</p><br><p>按照我们的假设， <code>f[n-1]</code> 表示 走 n-1 步的不同路线总数，由于这里面的每条路线都是不同的，所以在这些路线的基础上，再往左走 1 步，得到的路线也都是不同的，就有 <code>l[n] = f[n-1]</code> ❌ </p><p>但是我们知道 <strong>并不是所有路线，都能再往左走的</strong>。在所有走 n -1 步的路线中，如果第 <strong>n - 1步是往右走的</strong>，就 <strong>没有办法在第 n 步的时候往左走的</strong>，因为左边的方格塌陷了。</p><p>所以 <strong>只有第 n - 1步往左走，或者往上走的路线</strong>，才能在第 n 步时，往左走。</p><p>而 所有 <strong>n -1步 往左走</strong>的路线数量，按照我们的假设，就等于 <code>l[n-1]</code>；所有 n -1步 <strong>往上走</strong>的路线数量，按照我们的假设，就等于 <code>u[n-1]</code> 。所以 <code>l[n] = l[n - 1] + u[n-1]</code> ✅</p><p>同理，<code>r[n] = r[n-1] + u[n-1]</code> ✅ </p><p><code>u[n]</code> 比较特殊，因为 n-1 步往左、往右的路线在走第 n 步时，均可以向上走，所以 <code>u[n] = l[n-1] + r[n-1] + u[n-1]=f[n-1]</code> ✅ </p><p>边界条件很好确定，<code>l[1] = r[1] = u[1] = 1</code>，因此就可以由递推关系，推出 <code>l[2],l[3], ... ,l[n]</code>，同理推出 <code>r[2],r[3], ... ,r[n]</code> 和 <code>u[2],u[3], ... ,u[n]</code> 🎉</p><p>最后再计算，$f[n] = l[n] + r[n] + u[n]$ 即可得到答案。</p><blockquote><p>本题还可以简化，不过该简化式一下子不容易想到，需要用一些数学知识，推导如下：</p><p>$f[n]$</p><p>$= l[n] + r[n] + u[n]$</p><p>$= 2 * l[n -1] + 2 * r[n-1] + 3 * u[n-1]$</p><p>$= 2 * f[n-1] + u[n-1]$</p><p>$= 2 * f[n-1] + u[n-2] + l[n -2] + r[n - 2]$</p><p>$= 2 * f[n-1] + f[n-2]$</p><p>即递推式为 $f[n] = 2 * f[n - 1] + f[n-2](n \ge 3)$</p></blockquote><p>🍉 总结：该题从 <strong>不同路线</strong> 和 <strong>路线的第 n 步和 n-1 步方向</strong> 角度去展开递推，会比较清晰明了（不建议像「单点移动路线」问题那样从某个点开始考虑）</p><hr><h2 id="🧑🏻‍💻-C-代码"><a href="#🧑🏻‍💻-C-代码" class="headerlink" title="🧑🏻‍💻 C++ 代码"></a>🧑🏻‍💻 C++ 代码</h2><p>标准版</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span>ll f<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> l<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> r<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> u<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//cin读入优化</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>    <span class="token comment">//边界条件</span>    l<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> r<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> u<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    f<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> l<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> r<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> u<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">//递推</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        l<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> l<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> u<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        r<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> r<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> u<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        u<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> l<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> r<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> u<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        f<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> l<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> r<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> u<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> f<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>优化版</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span>ll f<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//cin读入优化</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>    <span class="token comment">//数学简化后的递推</span>    f<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    f<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">//注意i从3开始</span>        f<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> f<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> f<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> f<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 信息奥赛题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 信息奥赛 </tag>
            
            <tag> C++ </tag>
            
            <tag> 递推 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>信息奥赛题解｜过河卒</title>
      <link href="/2023/04/10/xin-xi-ao-sai-ti-jie-guo-he-zu/"/>
      <url>/2023/04/10/xin-xi-ao-sai-ti-jie-guo-he-zu/</url>
      
        <content type="html"><![CDATA[<h1 id="信息奥赛题解｜过河卒"><a href="#信息奥赛题解｜过河卒" class="headerlink" title="信息奥赛题解｜过河卒"></a>信息奥赛题解｜过河卒</h1><hr><h2 id="🚀-题目浏览"><a href="#🚀-题目浏览" class="headerlink" title="🚀 题目浏览"></a>🚀 题目浏览</h2><h3 id="【题目描述】"><a href="#【题目描述】" class="headerlink" title="【题目描述】"></a>【题目描述】</h3><p>棋盘上 $A$ 点有一个过河卒，需要走到目标 $B$ 点。卒行走的规则：可以向下、或者向右。同时在棋盘上 $C$ 点有一个对方的马，该马所在的点和所有跳跃一步可达的点称为对方马的控制点。因此称之为“马拦过河卒”。</p><p>棋盘用坐标表示，$A$ 点 $(0, 0)$、$B$ 点 $(n, m)$，同样马的位置坐标是需要给出的。</p><p><img src="https://ricky-typora-notes.oss-cn-hangzhou.aliyuncs.com/5b477a6bd7600427bbb9f3258ff0b14d.png"></p><p>现在要求你计算出卒从 $A$ 点能够到达 $B$ 点的路径的条数，假设马的位置是固定不动的，并不是卒走一步马走一步。</p><h3 id="【输入】"><a href="#【输入】" class="headerlink" title="【输入】"></a>【输入】</h3><p>一行四个正整数，分别表示 $B$ 点坐标和马的坐标。</p><h3 id="【输出】"><a href="#【输出】" class="headerlink" title="【输出】"></a>【输出】</h3><p>一个整数，表示所有的路径条数。</p><h3 id="【输入样例】"><a href="#【输入样例】" class="headerlink" title="【输入样例】"></a>【输入样例】</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token number">6</span> <span class="token number">6</span> <span class="token number">3</span> <span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="【输出样例】"><a href="#【输出样例】" class="headerlink" title="【输出样例】"></a>【输出样例】</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token number">6</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="【数据范围】"><a href="#【数据范围】" class="headerlink" title="【数据范围】"></a>【数据范围】</h3><p>$1 \le n, m \le 20$，$0 \le$ 马的坐标 $\le 20$。</p><h3 id="【原题链接】"><a href="#【原题链接】" class="headerlink" title="【原题链接】"></a>【原题链接】</h3><p><a href="https://www.luogu.com.cn/problem/P1002">https://www.luogu.com.cn/problem/P1002</a></p><hr><h2 id="☘️-题解分析"><a href="#☘️-题解分析" class="headerlink" title="☘️ 题解分析"></a>☘️ 题解分析</h2><p>本题是「<strong>单点移动路线方案数</strong>」问题的经典题目之一，在上题「<strong>移动路线</strong>」的基础上，增加了障碍点的条件。（「移动路线」 题目链接：<a href="https://rickyxcoder.top/2023/04/09/xin-xi-ao-sai-ti-jie-yi-dong-lu-xian/">信息奥赛题解｜移动路线</a> / 备用站点：<a href="https://rickyxcoder.gitee.io/2023/04/09/xin-xi-ao-sai-ti-jie-yi-dong-lu-xian/">信息奥赛题解｜移动路线</a>）</p><p>我们只需要额外设置一个状态数组 <code>vis</code>，存储某个点是否为障碍点即可，剩下的思路和上题一致。</p><p>🍉 代码精简小提示 ：</p><ul><li>本题可以用两个数组，存储马可能跳的点的横坐标/纵坐标变化值，这样只需要循环一次，就能把所有马能跳到的障碍点的 <code>vis</code> 值置为 1</li><li>题目中起点是从 $(0,0)$ 开始，而传统的「<strong>移动路线</strong>」问题是从 $(1,1)$ 开始，所以可以在坐标读入的时候全部 <code>+1</code>。但是由于本题在计算马的坐标时，可能遇到 <code>-2</code> 越界的问题，所以干脆整体 <code>+2</code>，起点从 $(2,2)$ 开始，会精简不少代码。</li></ul><hr><h2 id="🧑🏻‍💻-C-代码"><a href="#🧑🏻‍💻-C-代码" class="headerlink" title="🧑🏻‍💻 C++ 代码"></a>🧑🏻‍💻 C++ 代码</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span><span class="token comment">//马可能会跳的点</span><span class="token keyword">int</span> horse_x<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> horse_y<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//vis数组存储过河状态</span><span class="token keyword">int</span> vis<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//a数组存储路线方案数</span><span class="token keyword">long</span> <span class="token keyword">long</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//cin读入优化</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//由于题目起点从（0，0）开始，且马的坐标跳跃坐标有 -2，所以不妨所有坐标点均 +2，防止越界</span>    cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> m <span class="token operator">&gt;&gt;</span> x <span class="token operator">&gt;&gt;</span> y<span class="token punctuation">;</span>    n <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">;</span>    m <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">;</span>    x <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">;</span>    y <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token comment">//将马可能走到的点的状态置为1</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">8</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        vis<span class="token punctuation">[</span>x <span class="token operator">+</span> horse_x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y <span class="token operator">+</span> horse_y<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//计算a数组</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">//此时起点为（2，2）</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span>                a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token comment">//遇到了障碍点</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>                a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>                a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">//输出结果</span>    cout <span class="token operator">&lt;&lt;</span> a<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 信息奥赛题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 信息奥赛 </tag>
            
            <tag> C++ </tag>
            
            <tag> 递推 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>信息奥赛题解｜移动路线</title>
      <link href="/2023/04/09/xin-xi-ao-sai-ti-jie-yi-dong-lu-xian/"/>
      <url>/2023/04/09/xin-xi-ao-sai-ti-jie-yi-dong-lu-xian/</url>
      
        <content type="html"><![CDATA[<h1 id="信息奥赛题解｜移动路线"><a href="#信息奥赛题解｜移动路线" class="headerlink" title="信息奥赛题解｜移动路线"></a>信息奥赛题解｜移动路线</h1><hr><h2 id="🚀-题目浏览"><a href="#🚀-题目浏览" class="headerlink" title="🚀 题目浏览"></a>🚀 题目浏览</h2><h3 id="【题目描述】"><a href="#【题目描述】" class="headerlink" title="【题目描述】"></a>【题目描述】</h3><p>桌子上有一个 $m$ 行 $n$ 列的方格矩阵，将每个方格用坐标表示，行坐标从下到上依次递增，列坐标从左至右依次递增，左下角方格的坐标为 $(1,1)$，则右上角方格的坐标为 $(m,n)$。</p><p>小明是个调皮的孩子，一天他捉来一只蚂蚁，不小心把蚂蚁的右脚弄伤了，于是蚂蚁只能向上或向右移动。小明把这只蚂蚁放在左下角的方格中，蚂蚁从左下角的方格中移动到右上角的方格中，每步移动一个方格。蚂蚁始终在方格矩阵内移动，请计算出不同的移动路线的数目。</p><p>对于 $1$ 行 $1$ 列的方格矩阵，蚂蚁原地移动，移动路线数为 $1$；对于 $1$ 行 $2$ 列（或 $2$ 行 $1$ 列）的方格矩阵，蚂蚁只需一次向右（或向上）移动，移动路线数也为 $1$</p><p>对于一个 $2$ 行 $3$ 列的方格矩阵，如下图所示：</p><p>$(2,1),(2,2),(2,3)$</p><p>$(1,1),(1,2),(1,3)$</p><p>蚂蚁共有3种移动路线：</p><p>路线1：$(1,1) → (1,2) → (1,3) → (2,3)$</p><p>路线2：$(1,1) → (1,2) → (2,2) → (2,3)$</p><p>路线3：$(1,1) → (2,1) → (2,2) → (2,3)$</p><h3 id="【输入】"><a href="#【输入】" class="headerlink" title="【输入】"></a>【输入】</h3><p>输入只有一行，包括两个整数 $m$ 和 $n(0 \lt m+n \le 20)$，代表方格矩阵的行数和列数，$m,n$ 之间用空格隔开。</p><h3 id="【输出】"><a href="#【输出】" class="headerlink" title="【输出】"></a>【输出】</h3><p>输出只有一行，为不同的移动路线的数目。</p><h3 id="【输入样例】"><a href="#【输入样例】" class="headerlink" title="【输入样例】"></a>【输入样例】</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token number">2</span> <span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="【输出样例】"><a href="#【输出样例】" class="headerlink" title="【输出样例】"></a>【输出样例】</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token number">7</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="【原题链接】"><a href="#【原题链接】" class="headerlink" title="【原题链接】"></a>【原题链接】</h3><p><a href="http://ybt.ssoier.cn:8088/problem_show.php?pid=1194">http://ybt.ssoier.cn:8088/problem_show.php?pid=1194</a></p><hr><h2 id="☘️-题解分析"><a href="#☘️-题解分析" class="headerlink" title="☘️ 题解分析"></a>☘️ 题解分析</h2><p>本题是求 <strong>到达某点路线方案数</strong> 中较为基础的题型，是典型的递推问题。</p><p>可以构造一个二维矩阵 <code>a[N][N]</code> 表示总地图，其中 <code>a[i][j]</code> 表示从起点到点 $(i,j)$  的路线方案数。</p><p>由于蚂蚁只能往上或者往右走，因此对于每一个点 <code>a[i][j]</code> 来说，只能从下面的点 <code>a[i-1][j]</code> 或者左边的点 <code>a[i][j-1]</code> 走到，所以到 <code>a[i][j]</code> 的方案数就是从 起点到 <code>a[i-1][j]</code> 和 起点<code>a[i][j-1]</code> 的方案数之和，即递推关系为 <code>a[i][j] = a[i-1][j] + a[i][j-1]</code></p><p>本题数组 <code>a</code> 推荐使用全局变量（全局变量默认初始值为 0），这样在 <code>i = 1</code> 或者 <code>j = 1</code> 时（边界情况下），该方程仍然成立。</p><ul><li>如起点为 $(1,1)$，想要到点 $(1,2)$ ，只有向右走一种方式，即 <code>a[1][2] = a[1][1] = 1</code> ，但是由于点 <code>a[0][2]</code> 在全局变量的情况下，默认值为 0，所以把方程写成 <code>a[1][2] = a[1][1] + a[0][2] = 1</code> 也是完全可以的。</li><li>这样的写法会简化代码，因为不用单独判断最下面一行和最左边一列了。</li></ul><p>❗️ 但是在初始化时要注意给 <code>a[1][1]</code> 单独赋值为 1，否则在递推计算时，所有结果均为0。（请思考为什么会这样？）</p><hr><h2 id="🧑🏻‍💻-C-代码"><a href="#🧑🏻‍💻-C-代码" class="headerlink" title="🧑🏻‍💻 C++ 代码"></a>🧑🏻‍💻 C++ 代码</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//计算a数组</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">//注意，a[1][1]的初始值需要单独赋值，否则a数组在该方程下全为0</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>                a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>                a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> m<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> a<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 信息奥赛题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 信息奥赛 </tag>
            
            <tag> C++ </tag>
            
            <tag> 递推 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>信息奥赛题解｜四平方和</title>
      <link href="/2023/04/08/xin-xi-ao-sai-ti-jie-si-ping-fang-he/"/>
      <url>/2023/04/08/xin-xi-ao-sai-ti-jie-si-ping-fang-he/</url>
      
        <content type="html"><![CDATA[<h1 id="信息奥赛题解｜四平方和"><a href="#信息奥赛题解｜四平方和" class="headerlink" title="信息奥赛题解｜四平方和"></a>信息奥赛题解｜四平方和</h1><hr><h2 id="🚀-题目浏览"><a href="#🚀-题目浏览" class="headerlink" title="🚀 题目浏览"></a>🚀 题目浏览</h2><h3 id="【题目描述】"><a href="#【题目描述】" class="headerlink" title="【题目描述】"></a>【题目描述】</h3><p>四平方和定理，又称为拉格朗日定理：</p><p>每个正整数都可以表示为至多 $4$ 个正整数的平方和。</p><p>如果把 $0$ 包括进去，就正好可以表示为 $4$ 个数的平方和。</p><p>比如：</p><p>$5=0^2+0^2+1^2+2^2$<br>$7=1^2+1^2+1^2+2^2$</p><p>对于一个给定的正整数，可能存在多种平方和的表示法。</p><p>要求你对 $4$ 个数排序：</p><p>$0 \le a \le b \le c \le d$</p><p>并对所有的可能表示法按 $a,b,c,d$ 为联合主键升序排列，最后输出第一个表示法。</p><h3 id="【输入】"><a href="#【输入】" class="headerlink" title="【输入】"></a>【输入】</h3><p>输入一个正整数 $N$。</p><h3 id="【输出】"><a href="#【输出】" class="headerlink" title="【输出】"></a>【输出】</h3><p>输出 $4$ 个非负整数，按从小到大排序，中间用空格分开。</p><h3 id="【数据范围】"><a href="#【数据范围】" class="headerlink" title="【数据范围】"></a>【数据范围】</h3><p>$0 \lt N \lt 5∗10^6$</p><h3 id="【输入样例】"><a href="#【输入样例】" class="headerlink" title="【输入样例】"></a>【输入样例】</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token number">5</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="【输出样例】"><a href="#【输出样例】" class="headerlink" title="【输出样例】"></a>【输出样例】</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token number">0</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="【原题链接】"><a href="#【原题链接】" class="headerlink" title="【原题链接】"></a>【原题链接】</h3><p><a href="https://www.luogu.com.cn/problem/P8635">https://www.luogu.com.cn/problem/P8635</a></p><hr><h2 id="☘️-题解分析"><a href="#☘️-题解分析" class="headerlink" title="☘️ 题解分析"></a>☘️ 题解分析</h2><p>四重循环的暴力枚举做法，显然会 TLE，所以可以采用 <strong>哈希</strong> 的方法，来降低时间复杂度。</p><p><strong>正确思路</strong>：</p><ul><li>将 $c$ 和 $d$ 的平方和存储到自己模拟的哈希表中，该步复杂度为 $O(\sqrt n) * O(\sqrt n) = O(n)$</li><li>枚举 $a，b$，并且在哈希表中查找  $n - a * a - b * b$，该步复杂度为 $(O\sqrt n) * O(\sqrt n) * O(1) = O(n)$</li></ul><p>所以该思路的时间复杂度为 $O(n) + O(n) = O(n)$，满足该题的数据范围。</p><p>本题推荐使用自己 <strong>用数组模拟的哈希表</strong>（相较于 STL 会更加快）</p><hr><h2 id="🧑🏻‍💻-C-代码"><a href="#🧑🏻‍💻-C-代码" class="headerlink" title="🧑🏻‍💻 C++ 代码"></a>🧑🏻‍💻 C++ 代码</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">5e6</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">int</span> C<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> D<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 哈希表，C[k]存储平方和为k时，c的值；D[k]存储平方和为k时，d的值</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>    <span class="token comment">// 将c、d的平方和存入哈希表（复杂度为O(N))）</span>    <span class="token function">memset</span><span class="token punctuation">(</span>C<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>C<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 初始化为-1，因为0是有实际含义的</span>    <span class="token function">memset</span><span class="token punctuation">(</span>D<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>D<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> c <span class="token operator">*</span> c <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> c<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> d <span class="token operator">=</span> c<span class="token punctuation">;</span> c <span class="token operator">*</span> c <span class="token operator">+</span> d <span class="token operator">*</span> d <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> d<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> sum <span class="token operator">=</span> c <span class="token operator">*</span> c <span class="token operator">+</span> d <span class="token operator">*</span> d<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>C<span class="token punctuation">[</span>sum<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment">// 该总和第一次出现,记录此时c和d的值</span>                C<span class="token punctuation">[</span>sum<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">,</span> D<span class="token punctuation">[</span>sum<span class="token punctuation">]</span> <span class="token operator">=</span> d<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">// 枚举a，b，查找 n - a*a - b*b 的哈希值</span>    <span class="token comment">// 哈希值存在，说明此时a,b,c,d平方和为n</span>    <span class="token comment">// 复杂度是sqrt(n) * sqrt(n) * O(1)= O(n) 哈希表查找为O(1)</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> a <span class="token operator">*</span> a <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> a<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> b <span class="token operator">=</span> a<span class="token punctuation">;</span> a <span class="token operator">*</span> a <span class="token operator">+</span> b <span class="token operator">*</span> b <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> b<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> dis <span class="token operator">=</span> n <span class="token operator">-</span> a <span class="token operator">*</span> a <span class="token operator">-</span> b <span class="token operator">*</span> b<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>C<span class="token punctuation">[</span>dis<span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> b <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> C<span class="token punctuation">[</span>dis<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> D<span class="token punctuation">[</span>dis<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">// 下面没有更多需求的话，直接return 0结束即可，不用写goto</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 信息奥赛题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 信息奥赛 </tag>
            
            <tag> C++ </tag>
            
            <tag> 哈希表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Acwing第86场周赛复盘</title>
      <link href="/2023/04/07/acwing-di-86-chang-zhou-sai-fu-pan/"/>
      <url>/2023/04/07/acwing-di-86-chang-zhou-sai-fu-pan/</url>
      
        <content type="html"><![CDATA[<h1 id="【Acwing-周赛复盘】第86场周赛复盘（2023-1-14）"><a href="#【Acwing-周赛复盘】第86场周赛复盘（2023-1-14）" class="headerlink" title="【Acwing 周赛复盘】第86场周赛复盘（2023.1.14）"></a>【Acwing 周赛复盘】第86场周赛复盘（2023.1.14）</h1><h2 id="周赛复盘-✍️"><a href="#周赛复盘-✍️" class="headerlink" title="周赛复盘 ✍️"></a>周赛复盘 ✍️</h2><blockquote><p>本周个人排名：678/2358（28.7%）</p><p>AC情况：2/3</p><p>这是博主参加的第一次周赛，深刻体会到了世界的参差 😂</p><p>看到排名 TOP3 的大佬都是不到 5 分钟内就 AK 了，真是恐怖如斯（ORZ）</p><p>对比下来，自己做满 75 分钟并且只 AC 了 2 题真是弱爆了。。。</p><p>希望未来也能继续努力，紧跟大佬们的步伐，继续加油 💪</p></blockquote><p><img src="http://ricky-typora-notes.oss-cn-hangzhou.aliyuncs.com/2023-02-21-170401.jpg" alt="周赛rank图"></p><h2 id="周赛信息-📚"><a href="#周赛信息-📚" class="headerlink" title="周赛信息 📚"></a>周赛信息 📚</h2><p><strong>时间</strong>：2023年1月14日19：00-20：15</p><p><strong>竞赛链接</strong>：<a href="https://www.acwing.com/activity/content/2794/">https://www.acwing.com/activity/content/2794/</a></p><p><strong>y总直播间</strong>：<a href="http://live.bilibili.com/21871779">http://live.bilibili.com/21871779</a></p><p><strong>y总录播讲解视频</strong>：<a href="https://www.bilibili.com/video/BV1284y1h7ip/?share_source=copy_web&amp;vd_source=33934722b558a5cefa750c1a9be72249">【AcWing杯 - 第86场周赛讲解】</a></p><h2 id="题目列表-🧑🏻‍💻"><a href="#题目列表-🧑🏻‍💻" class="headerlink" title="题目列表 🧑🏻‍💻"></a>题目列表 🧑🏻‍💻</h2><table><thead><tr><th align="center">题目名称</th><th align="center">原题链接</th><th align="center">难度</th></tr></thead><tbody><tr><td align="center">4794. 健身</td><td align="center"><a href="https://www.acwing.com/problem/content/4797/">原题链接</a></td><td align="center">简单 🟢</td></tr><tr><td align="center">4795. 安全区域</td><td align="center"><a href="https://www.acwing.com/problem/content/4798/">原题链接</a></td><td align="center">中等 🟡</td></tr><tr><td align="center">4796. 删除序列</td><td align="center"><a href="https://www.acwing.com/problem/content/4799/">原题链接</a></td><td align="center">困难 🔴</td></tr></tbody></table><hr><h2 id="题解-🚀"><a href="#题解-🚀" class="headerlink" title="题解 🚀"></a>题解 🚀</h2><h3 id="【题目A】健身"><a href="#【题目A】健身" class="headerlink" title="【题目A】健身"></a>【题目A】健身</h3><h4 id="【题目描述】"><a href="#【题目描述】" class="headerlink" title="【题目描述】"></a>【题目描述】</h4><p>李华一共要进行 $n$ 组健身训练。</p><p>其中，第 $i$ 组训练的<strong>时长</strong>为 $a_i$。</p><p>李华只做三种运动：胸部（<code>chest</code>）运动、二头肌（<code>biceps</code>）运动、背部（<code>back</code>）运动。</p><p>而且，三种运动是循环训练的，也就是说他第一组训练是胸部运动，第二组训练是二头肌运动，第三组训练是背部运动，第四组训练是胸部运动，第五组训练是二头肌运动……以此类推直到做完第 $n$ 组训练。</p><p>请你计算，他做哪种运动的 <strong>时长</strong> 最长。</p><h4 id="【输入】"><a href="#【输入】" class="headerlink" title="【输入】"></a>【输入】</h4><p>第一行包含整数 $n$。</p><p>第二行包含 $n$ 个整数 $a_1,a_2,…,a_n$。</p><h4 id="【输出】"><a href="#【输出】" class="headerlink" title="【输出】"></a>【输出】</h4><p>共一行，如果训练时长最长的运动为：</p><ul><li>胸部运动，则输出 <code>chest</code>。</li><li>二头肌运动，则输出 <code>biceps</code>。</li><li>背部运动，则输出 <code>back</code>。</li></ul><p>数据保证训练时长最长的运动是唯一的。</p><h4 id="【数据范围】"><a href="#【数据范围】" class="headerlink" title="【数据范围】"></a>【数据范围】</h4><p>前 $3$ 个测试点满足 $1 \le n \le 7$。<br>所有测试点满足 $1 \le n \le 20$，$1 \le a_i \le 25$。</p><h4 id="【输入样例1】"><a href="#【输入样例1】" class="headerlink" title="【输入样例1】"></a>【输入样例1】</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token number">2</span><span class="token number">2</span> <span class="token number">8</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="【输出样例1】"><a href="#【输出样例1】" class="headerlink" title="【输出样例1】"></a>【输出样例1】</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">biceps<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="【输入样例2】"><a href="#【输入样例2】" class="headerlink" title="【输入样例2】"></a>【输入样例2】</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token number">3</span><span class="token number">5</span> <span class="token number">1</span> <span class="token number">10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="【输出样例2】"><a href="#【输出样例2】" class="headerlink" title="【输出样例2】"></a>【输出样例2】</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">back<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="【输入样例3】"><a href="#【输入样例3】" class="headerlink" title="【输入样例3】"></a>【输入样例3】</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token number">7</span><span class="token number">3</span> <span class="token number">3</span> <span class="token number">2</span> <span class="token number">7</span> <span class="token number">9</span> <span class="token number">6</span> <span class="token number">8</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="【输出样例3】"><a href="#【输出样例3】" class="headerlink" title="【输出样例3】"></a>【输出样例3】</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">chest<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="【原题链接】"><a href="#【原题链接】" class="headerlink" title="【原题链接】"></a>【原题链接】</h4><p><a href="https://www.acwing.com/problem/content/4797/">https://www.acwing.com/problem/content/4797/</a></p><hr><h4 id="【题目分析】"><a href="#【题目分析】" class="headerlink" title="【题目分析】"></a>【题目分析】</h4><p>签到题，简单模拟即可。（但是现场编写的代码有很多可以改进和优化的地方，见下面「<strong>代码对比总结</strong>」部分）</p><h4 id="【复盘后的优化代码】✅"><a href="#【复盘后的优化代码】✅" class="headerlink" title="【复盘后的优化代码】✅"></a>【复盘后的优化代码】✅</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> s<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//cin读入优化</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>    <span class="token keyword">int</span> x<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        cin <span class="token operator">&gt;&gt;</span> x<span class="token punctuation">;</span>        <span class="token comment">// 下面的写法避免了多个if</span>        s<span class="token punctuation">[</span>i <span class="token operator">%</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">+=</span> x<span class="token punctuation">;</span>  <span class="token comment">// s[1]存储chest、s[2]存储biceps、s[0]存储back</span>    <span class="token punctuation">}</span>    <span class="token comment">// 找到最大值下标</span>    <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> s<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span>            k <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>      <span class="token comment">// 输出结果</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"chest"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"biceps"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">else</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"back"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="【周赛现场-AC-代码】"><a href="#【周赛现场-AC-代码】" class="headerlink" title="【周赛现场 AC 代码】"></a>【周赛现场 AC 代码】</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> tmp<span class="token punctuation">;</span><span class="token keyword">int</span> chest<span class="token punctuation">,</span>biceps<span class="token punctuation">,</span>back<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//cin读入优化</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        cin <span class="token operator">&gt;&gt;</span> tmp<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            chest <span class="token operator">+=</span> tmp<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            biceps <span class="token operator">+=</span> tmp<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            back <span class="token operator">+=</span> tmp<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token comment">//    cout &lt;&lt; chest &lt;&lt; " " &lt;&lt; biceps &lt;&lt; " " &lt;&lt; back &lt;&lt; endl;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>chest <span class="token operator">&gt;</span> biceps<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>chest <span class="token operator">&gt;</span> back<span class="token punctuation">)</span> <span class="token punctuation">{</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"chest"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"back"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>biceps <span class="token operator">&gt;</span> back<span class="token punctuation">)</span> <span class="token punctuation">{</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"biceps"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"back"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="【代码总结分析】"><a href="#【代码总结分析】" class="headerlink" title="【代码总结分析】"></a>【代码总结分析】</h4><ul><li><code>s[i%3] += x</code> 的思路值得借鉴，省去了多个 <code>if</code> 判断</li><li>寻找最大值下标的方式值得借鉴，优化了直接比较的多 if 判断</li></ul><hr><h3 id="【题目B】安全区域"><a href="#【题目B】安全区域" class="headerlink" title="【题目B】安全区域"></a>【题目B】安全区域</h3><h4 id="【题目描述】-1"><a href="#【题目描述】-1" class="headerlink" title="【题目描述】"></a>【题目描述】</h4><p>给定一个 $n×n$ 的方格棋盘和 $m$ 个国际象棋中的车。</p><p>对于一个方格，如果该方格满足以下两个条件中的至少一个，则该方格会被车攻击到：</p><ul><li>该方格内有车。</li><li>至少有一个车与该方格位于同一行或同一列。</li></ul><p>现在，我们要将 $m$ 个车逐个放入到棋盘中，其中第 $i$ 个车放到棋盘的第 $x_i$ 行第 $y_i$ 列的方格中。</p><p>车的编号从 $1$ 到 $m$，行/列的编号从 $1$ 到 $n$。</p><p>保证任意两个车不会放到同一个方格中。</p><p>对于 $1 \le i \le m$，请你计算，将前 $i$ 个车放入到棋盘中后，有多少个方格不会被车攻击到。</p><h4 id="【输入】-1"><a href="#【输入】-1" class="headerlink" title="【输入】"></a>【输入】</h4><p>第一行包含两个整数 $n,m$。</p><p>接下来 $m$ 行，其中第 $i$ 行包含两个整数 $x_i,y_i$，表示第 $i$ 个车放到棋盘的第 $x_i$ 行第 $y_i$ 列的方格中。</p><h4 id="【输出】-1"><a href="#【输出】-1" class="headerlink" title="【输出】"></a>【输出】</h4><p>共 1 行，其中第 $i$ 行输出将前 $i$ 个车放入到棋盘中后，不会被车攻击到的方格数量。</p><h4 id="【数据范围】-1"><a href="#【数据范围】-1" class="headerlink" title="【数据范围】"></a>【数据范围】</h4><p>前 $3$ 个测试点满足 $1 \le m \le 3$。<br>所有测试点满足 $1 \le n \le 10^5$，$1 \le m \le min(10^5,n^2)$，$1 \le x_i,y_i \le n$。</p><h4 id="【输入样例1】-1"><a href="#【输入样例1】-1" class="headerlink" title="【输入样例1】"></a>【输入样例1】</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token number">3</span> <span class="token number">3</span><span class="token number">1</span> <span class="token number">1</span><span class="token number">3</span> <span class="token number">1</span><span class="token number">2</span> <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="【输出样例1】-1"><a href="#【输出样例1】-1" class="headerlink" title="【输出样例1】"></a>【输出样例1】</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token number">4</span> <span class="token number">2</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="【输入样例2】-1"><a href="#【输入样例2】-1" class="headerlink" title="【输入样例2】"></a>【输入样例2】</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token number">5</span> <span class="token number">2</span><span class="token number">1</span> <span class="token number">5</span><span class="token number">5</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="【输出样例2】-1"><a href="#【输出样例2】-1" class="headerlink" title="【输出样例2】"></a>【输出样例2】</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token number">16</span> <span class="token number">9</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="【输入样例3】-1"><a href="#【输入样例3】-1" class="headerlink" title="【输入样例3】"></a>【输入样例3】</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token number">100000</span> <span class="token number">1</span><span class="token number">300</span> <span class="token number">400</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="【输出样例3】-1"><a href="#【输出样例3】-1" class="headerlink" title="【输出样例3】"></a>【输出样例3】</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token number">9999800001</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="【原题链接】-1"><a href="#【原题链接】-1" class="headerlink" title="【原题链接】"></a>【原题链接】</h4><p><a href="https://www.acwing.com/problem/content/4798/">https://www.acwing.com/problem/content/4798/</a></p><hr><h4 id="【题目分析】-1"><a href="#【题目分析】-1" class="headerlink" title="【题目分析】"></a>【题目分析】</h4><p>思维题，需要通过 <strong>数学推导</strong> 的方式，得到未被攻击的方格数数量为：$(n-c)*(n-r)$，其中 $c,r$ 为被攻击的列数、行数</p><p>🍉 PS：本题数据范围较大，需要使用 <code>long long</code> 类型，不然会报错。（在公式前强制转换即可：<code>(ll)(n-c)*(n-r)</code>）</p><h4 id="【复盘后的优化代码】✅-1"><a href="#【复盘后的优化代码】✅-1" class="headerlink" title="【复盘后的优化代码】✅"></a>【复盘后的优化代码】✅</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e5</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//cin读入优化</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> m<span class="token punctuation">;</span>    <span class="token keyword">int</span> row <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> col <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        cin <span class="token operator">&gt;&gt;</span> x <span class="token operator">&gt;&gt;</span> y<span class="token punctuation">;</span>            <span class="token comment">// 统计当前被攻击的行数、列数</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>a<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span> a<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> row<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>b<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span> b<span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> col<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token comment">// 求剩余个数的公式，该形式容易推导和记忆</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>ll<span class="token punctuation">)</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> row<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> col<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="【周赛现场-AC-代码】-1"><a href="#【周赛现场-AC-代码】-1" class="headerlink" title="【周赛现场 AC 代码】"></a>【周赛现场 AC 代码】</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e5</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>ll ans<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//cin读入优化</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> m<span class="token punctuation">;</span>    ll sum <span class="token operator">=</span> <span class="token punctuation">(</span>ll<span class="token punctuation">)</span> n <span class="token operator">*</span> n<span class="token punctuation">;</span>    <span class="token keyword">int</span> row <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> col <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        cin <span class="token operator">&gt;&gt;</span> x <span class="token operator">&gt;&gt;</span> y<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>a<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span> a<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> row<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>b<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span> b<span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> col<span class="token operator">++</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>ll<span class="token punctuation">)</span> sum <span class="token operator">-</span> <span class="token punctuation">(</span>ll<span class="token punctuation">)</span> row <span class="token operator">*</span> n <span class="token operator">-</span> <span class="token punctuation">(</span>ll<span class="token punctuation">)</span> col <span class="token operator">*</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> row<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="【代码对比总结】"><a href="#【代码对比总结】" class="headerlink" title="【代码对比总结】"></a>【代码对比总结】</h4><ul><li>推导的公式，可以写成 $(n-c)*(n-r)$ 这样更加 <strong>简洁且容易记忆</strong> 的形式。</li><li>在使用 <code>(ll)</code> 的 <strong>强制转换</strong> 时，需要注意 <strong>哪些项会爆 int</strong>。（本次周赛敲代码时，由于没有考虑该问题，以为在最前面加上 <code>(ll)</code> 就能整体转换，导致 <code>(ll) sum - row * n - col * (n - row)</code> 这样 爆int 的错误没能被及时发现，极大的影响了 AC 时间和心态）</li></ul><hr><h3 id="【题目C】删除序列"><a href="#【题目C】删除序列" class="headerlink" title="【题目C】删除序列"></a>【题目C】删除序列</h3><h4 id="【题目描述】-2"><a href="#【题目描述】-2" class="headerlink" title="【题目描述】"></a>【题目描述】</h4><p>给定一个长度为 $n$ 的正整数序列 $a_1,a_2,…,a_n$。</p><p>你可以进行任意次删除操作。</p><p>每次删除操作分为两步：</p><ol><li>选择序列中的 <strong>一个</strong> 元素（不妨设其元素值为 $x$），并将这 <strong>一个</strong> 元素删除，这可以给你加 $x$ 分。</li><li>将 <strong>所有</strong> 的 <strong>元素值</strong> 为 $x−1$ 和 $x+1$ 的元素（如果有的话）从序列中删除，这不会给你带来任何分数。</li></ol><p>请计算，通过删除操作，你可以获得的最大得分。  </p><h4 id="【输入】-2"><a href="#【输入】-2" class="headerlink" title="【输入】"></a>【输入】</h4><p>第一行包含整数 $n$。</p><p>第二行包含 $n$ 个正整数 $a_1,a_2,…,a_n$。</p><h4 id="【输出】-2"><a href="#【输出】-2" class="headerlink" title="【输出】"></a>【输出】</h4><p>一个整数，表示可以获得的最大得分。</p><h4 id="【数据范围】-2"><a href="#【数据范围】-2" class="headerlink" title="【数据范围】"></a>【数据范围】</h4><p>前 $6$ 个测试点满足 $1 \le n \le 10$。</p><p>所有测试点满足 $1 \le n \le 10^5$，$1 \le a_i \le 10^5$。</p><h4 id="【输入样例1】-2"><a href="#【输入样例1】-2" class="headerlink" title="【输入样例1】"></a>【输入样例1】</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token number">2</span><span class="token number">1</span> <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="【输出样例1】-2"><a href="#【输出样例1】-2" class="headerlink" title="【输出样例1】"></a>【输出样例1】</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="【输入样例2】-2"><a href="#【输入样例2】-2" class="headerlink" title="【输入样例2】"></a>【输入样例2】</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token number">3</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="【输出样例2】-2"><a href="#【输出样例2】-2" class="headerlink" title="【输出样例2】"></a>【输出样例2】</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token number">4</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="【输入样例3】-2"><a href="#【输入样例3】-2" class="headerlink" title="【输入样例3】"></a>【输入样例3】</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token number">9</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">1</span> <span class="token number">3</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="【输出样例3】-2"><a href="#【输出样例3】-2" class="headerlink" title="【输出样例3】"></a>【输出样例3】</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token number">10</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="【原题链接】-2"><a href="#【原题链接】-2" class="headerlink" title="【原题链接】"></a>【原题链接】</h4><p><a href="https://www.acwing.com/problem/content/4799/">https://www.acwing.com/problem/content/4799/</a></p><hr><h4 id="【题目分析】-2"><a href="#【题目分析】-2" class="headerlink" title="【题目分析】"></a>【题目分析】</h4><p>动态规划题，需要平时积累，详细讲解见 y总讲解录像：<a href="https://www.bilibili.com/video/BV1284y1h7ip/?share_source=copy_web&amp;vd_source=33934722b558a5cefa750c1a9be72249&amp;t=1814">链接</a></p><p><img src="http://ricky-typora-notes.oss-cn-hangzhou.aliyuncs.com/2023-02-21-170405.png" alt="y总的分析图"></p><p><strong>【二刷经历】</strong></p><p>2023 年 4 月 8 日（考完蓝桥杯的晚上），摊主想要把这篇文章上传至自己的博客网站，于是再次阅读了这篇寒假写的复盘，打算检查文章可能存在的错误。</p><p>在检查的过程中，摊主突然发现 C 题又不会做了，说明当时还是没有理解透彻，需要回炉重造。😂</p><p>回顾一下自己晚上的做题流程：</p><ul><li>一开始打算用贪心去解，即优先删去最大值，但是样例3这样的序列显然无法这样简单的贪心。</li><li>然后发现可以把无序的序列，进行升序排列，更加直观。</li><li>想到使用 <strong>线性DP</strong> 求解，但是始终无法推出状态转移方程，或者说究竟如何表示状态？<ul><li>自己模拟的序列是这样的 <code>1 1 1 2 2 2 2 2 3 3 3</code></li><li>DP 考虑如下<ul><li><code>dp[i]</code> 表示删去第 <code>i</code> 个数字后（一定要删去第 <code>i</code> 个数字），能得到的最大值</li><li><code>dp[i]</code> 表示 <code>1~i</code> 序列能得到的最大值（不一定删去第 <code>i</code> 个数字）</li></ul></li><li>但是在考虑上面两种情况是，总是会遇到 <strong>无法往下思考的点</strong>（这种状态在题目难时经常出现），有时候情况有点杂，自己就开始理不清了。<ul><li>比如第 1 种情况，如果一定删去第 <code>i</code> 个数字 <code>a[i]</code>，那这时候如何删除前面所有的 <code>a[i]-1</code>？状态好像没办法转移过来，或者说需要记录一连串数字的左右下标，感觉有点麻烦。（其实这里就应当考虑到，如果把一连串数字进行合并，会不会简单些）</li><li>再如第 2 种情况，那就需要讨论是否删除第 <code>i</code> 个数字，但是这样也需要讨论：比如 <code>1 1 1 2</code> ，执行到 2 时，如果删了 2，<code>dp[4] = 2</code>，不删 2 的话， <code>dp[4] = 3</code>，取两者最大值 → <code>dp[4] = 3</code>。但是假如在后面再添一个 <code>2</code>，我们一眼能看出来 <code>dp[5] = 4</code>，但是落实到具体方程时，<code>dp[5]=dp[4]+2=5</code>，显然有问题，因为这时候 <code>dp[4]</code> 应该为 2，出现了前后矛盾。</li></ul></li></ul></li><li>最后只能遗憾告终</li></ul><p>于是又去温习了一遍 y总的讲解，发现一开始 y总直接把 <code>1 1 1 2 2 2 2 2 3 3 3</code> 这种合并成了 <code>1 2 3</code>，就直接对 3 个数值进行 线性DP，省去了记录一连串数字的左右下标。（这里有一步贪心过程，如想要删除数字 2，一定是把 5 个 2 都删除）</p><p>然后 <code>dp[i]</code> 的表示是选择了上面线性DP的第二种方案，思路如下：</p><ul><li>序列 <code>1 2 ... i</code>，这里 <code>i</code> 并非下标，而是原序列中出现的值<ul><li>如果不选数字 <code>i</code>，则 <code>dp[i] = dp[i-1]</code></li><li>如果选择数字 <code>i</code>，则 <code>dp[i] = dp[i-2] + s[i]</code></li><li>取两者最大值即可。</li><li>注意 🍉：由于状态转移方程中出现了 <code>i-2</code>，所以为了防止下标越界，循环需要从 2 开始；或者写成这种形式 <code>dp[max(0,i-2)]</code></li></ul></li></ul><p>这里非常精妙的对数值进行线性DP，而不是像很多模型那样对下标进行线性DP（有点像「二分答案」那样）</p><p>只能说 DP 的题目思路都太精妙了，只有多看，多学，多练，才能让自己「顿悟」，继续加油。</p><h4 id="【复盘后的优化代码】✅-2"><a href="#【复盘后的优化代码】✅-2" class="headerlink" title="【复盘后的优化代码】✅"></a>【复盘后的优化代码】✅</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e5</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span>ll s<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> x<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//cin读入优化</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        cin <span class="token operator">&gt;&gt;</span> x<span class="token punctuation">;</span>        s<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">+=</span> x<span class="token punctuation">;</span>  <span class="token comment">// s数组类似于"桶"，这里的"桶"直接存储总和</span>    <span class="token punctuation">}</span>    <span class="token comment">// 动态规划</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> N <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 状态转移方程</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> i <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> dp<span class="token punctuation">[</span>N <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="【周赛现场-AC-代码】-2"><a href="#【周赛现场-AC-代码】-2" class="headerlink" title="【周赛现场 AC 代码】"></a>【周赛现场 AC 代码】</h4><p>该题现场未AC 😂</p><h4 id="【代码对比总结】-1"><a href="#【代码对比总结】-1" class="headerlink" title="【代码对比总结】"></a>【代码对比总结】</h4><ul><li>周赛现场没能看出本题为动态规划题，导致蛮力模拟一直解不出来。说明需要 <strong>多做题，多积累</strong>。</li></ul><hr><blockquote><p>🍉 PS：推荐前往摊主的个人博客查看该文章，可以有更好的阅读体验</p><p>主站点：<a href="https://rickyxcoder.top/2023/04/08/acwing-di-86-chang-zhou-sai-fu-pan/">【Acwing 周赛复盘】第86场周赛复盘</a> </p><p>备用站点：<a href="https://rickyxcoder.gitee.io/2023/04/08/acwing-di-86-chang-zhou-sai-fu-pan/">【Acwing 周赛复盘】第86场周赛复盘】</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Acwing周赛复盘 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 信息奥赛 </tag>
            
            <tag> Acwing </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>嵌入式系统｜期末指北</title>
      <link href="/2023/04/05/qi-mo-zhi-bei-qian-ru-shi-xi-tong/"/>
      <url>/2023/04/05/qi-mo-zhi-bei-qian-ru-shi-xi-tong/</url>
      
        <content type="html"><![CDATA[<h1 id="期末指北——嵌入式系统（feat-ChatGPT）"><a href="#期末指北——嵌入式系统（feat-ChatGPT）" class="headerlink" title="期末指北——嵌入式系统（feat. ChatGPT）"></a>期末指北——嵌入式系统（feat. ChatGPT）</h1><p><img src="http://ricky-typora-notes.oss-cn-hangzhou.aliyuncs.com/2023-02-21-164338.png" alt="嵌入式系统｜期末指北"></p><h2 id="写在最前-✍️"><a href="#写在最前-✍️" class="headerlink" title="写在最前 ✍️"></a>写在最前 ✍️</h2><p>本文摘录了一些 《嵌入式系统》课程的 <strong>常见选择题</strong>，供有需求的同学们学习使用。</p><p>部分答案解析由 <strong>ChatGPT</strong> 生成，摊主进行审核。</p><p><strong>教材版本</strong>：《嵌入式系统设计与应用——基于 ARM Cortex-A8 和 Linux（第二版）》</p><hr><h2 id="题目概览-🧑🏻‍💻"><a href="#题目概览-🧑🏻‍💻" class="headerlink" title="题目概览 🧑🏻‍💻"></a>题目概览 🧑🏻‍💻</h2><p><strong>1、下面关于哈佛结构描述正确的是（ ）</strong> </p><p>A、程序存储空间与数据存储空间分离 </p><p>B、存储空间与 IO 空间分离 </p><p>C、程序存储空间与数据存储空间合并 </p><p>D、存储空间与 IO 空间合并</p><br><p><strong>2、关于ARM处理器的工作模式，以下说法错误的是（ ）</strong></p><p>A、用户模式是程序正常执行的工作模式 </p><p>B、管理模式负责处理存储器故障，实现虚拟存储器和存储器的保护 </p><p>C、系统模式运行特权级的操作系统任务 </p><p>D、当处理器处于用户模式时，如果没有异常发生是不能改变工作模式的 </p><br><p><strong>3、存储一个 32 位数 0x2168465 到 2000H~2003H 四个字节单元中，若以小端模式存储，则 2000H 存储单元内容为（ ）</strong></p><p>A、 0x21 B、 0x68 C、0x65 D、0x02 </p><br><p><strong>4、下面关于 ARM 处理器的体系结构描述哪一个是错误的（ ）</strong> </p><p>A、三地址指令格式 </p><p>B、所有的指令都是单周期执行 </p><p>C、指令长度固定 </p><p>D、Load-Store结构</p><br><p><strong>5、ARM 指令集和 Thumb 指令集分别是（ ）位的。</strong> </p><p>A、8 位，16 位 </p><p>B、16 位，32 位 </p><p>C、16 位，16 位 </p><p>D、32 位，16 位 </p><br><p><strong>6、ARM Cortex A8的工作状态包括（ ）。</strong></p><p>A、测试状态和运行状态 </p><p>B、挂起状态和就绪状态 </p><p>C、就绪状态和运行状态 </p><p>D、ARM状态和Thumb状态 </p><br><p><strong>7、对于 ARM7 三级流水线，当一条指令被译码时，下一条指令正被（ ）</strong></p><p>A、取指</p><p>B、译码</p><p>C、PC值递增</p><p>D、执行</p><br><p><strong>8、复位后，ARM处理器处于（ ）模式</strong></p><p>A. USER</p><p>B. SVC</p><p>C. SYSTEM</p><p>D. ARM</p><br><p><strong>9、寄存器 R13 除可做通用寄存器外，还可以做（ ）</strong> </p><p>A、程序计数器 B、链接寄存器 C、栈指针寄存器 D、基址寄存器</p><br><p><strong>10、在下列ARM处理器的各种模式中，只有（ ）模式不可以自由地改变处理器的工作模式</strong></p><p>A、用户模式</p><p>B、系统模式</p><p>C、终止模式</p><p>D、中断模式 </p><br><p><strong>11、0x17 &amp; 0x1A 的运算结果是（ ）</strong></p><p>A、<code>0x01</code></p><p>B、<code>0x11</code></p><p>C、<code>0x17</code></p><p>D、<code>0x12</code></p><br><p><strong>12、对寄存器 R1 的内容乘以 4 的正确指令是（）</strong></p><p>A. <code>LSR R1, #2</code></p><p>B. <code>LSL R1, #2</code></p><p>C. <code>MOV R1, R1, LSL #2</code></p><p>D. <code>MOV R1, R1, LSR #2</code></p><br><p><strong>13、MOV R1, #0x1000 LDR R0, [R1], #4 执行上述指令序列后，R1 寄存器的值是（ ）</strong></p><p>A. <code>0x1000</code></p><p>B. <code>0x1004</code></p><p>C. <code>0x0FFC</code></p><p>D. <code>0x4</code></p><br><p><strong>14、R0=0x05, 执行BIC R0,R0,#3的运算后，R0结果是（ ）</strong></p><p>A. <code>0x02</code></p><p>B. <code>0x03</code></p><p>C. <code>0x04</code></p><p>D. <code>0x05</code> </p><br><p><strong>15、GET伪指令的含义是（ ）</strong></p><p>A. 包含一个外部文件</p><p>B. 定义程序的入口</p><p>C. 定义一个宏</p><p>D. 声明一个变量</p><br><p><strong>16、若 R1 = 2000H，（2000H）= 0x86，（2008H）= 0x39 ，则执行指令 LDR R0，[R1,#8]! 后 R0 的值为（ ）</strong></p><p>A. <code>0x2000</code></p><p>B. <code>0x86</code></p><p>C. <code>0x2008</code></p><p>D. <code>0x39</code></p><br><p><strong>17、将 ARM 处理器 R0 中的一个字节的数据，存入由 R1+4 指示的内存区域,且地址自动更新,则使用的 ARM 指令是（ ）</strong></p><p>A. <code>STR R0,［R1,#4]</code></p><p>B. <code>STRH R0,［R1，＃4]!</code></p><p>C. <code>STRH R0，[R1,＃4]</code></p><p>D. <code>STRB R0,[R1，#4]!</code></p><br><hr><h2 id="答案解析-🚀"><a href="#答案解析-🚀" class="headerlink" title="答案解析 🚀"></a>答案解析 🚀</h2><p><strong>1、下面关于哈佛结构描述正确的是（ ）</strong> </p><p>A、程序存储空间与数据存储空间分离</p><p>B、存储空间与 IO 空间分离 </p><p>C、程序存储空间与数据存储空间合并 </p><p>D、存储空间与 IO 空间合并</p><p><strong>【参考答案】</strong> A</p><p><strong>【ChatGPT 解析】</strong></p><p><strong>哈佛结构</strong> 是指在计算机体系结构中，将 <strong>「指令存储器（程序存储空间）与数据存储器」</strong> 分离的结构。在哈佛结构中，指令和数据存储器使用不同的总线和不同的物理存储器，这种结构可以提高数据存取的效率，因为指令和数据可以并行地访问。</p><p>而存储空间与IO空间分离，是指在计算机体系结构中，将存储器和IO接口分离的结构。在这种结构中，存储器和IO设备使用不同的总线和不同的物理接口，以实现相互独立的访问。这种结构可以提高计算机系统的稳定性和可靠性，同时也方便了硬件和软件的设计和维护。</p><p>和哈佛结构类似，存储空间与IO空间分离的结构也可以提高访问效率，因为存储器和IO设备可以并行地访问。但是这两者的分离方式不同，哈佛结构分离的是指令存储器和数据存储器，而存储空间与IO空间分离的结构分离的是存储器和IO接口。</p><p>因此，选项A描述的是哈佛结构的特点，程序存储空间和数据存储空间是分离的，选项B、C、D均不符合哈佛结构的定义。</p><br><p><strong>2、关于ARM处理器的工作模式，以下说法错误的是（ ）</strong></p><p>A、用户模式是程序正常执行的工作模式 </p><p>B、管理模式负责处理存储器故障，实现虚拟存储器和存储器的保护 </p><p>C、系统模式运行特权级的操作系统任务 </p><p>D、当处理器处于用户模式时，如果没有异常发生是不能改变工作模式的 </p><p><strong>【参考答案】</strong> B</p><p><strong>【ChatGPT 解析】</strong></p><p>B、<strong>管理模式</strong> 也称为特权模式，用于处理特殊的系统操作，如中断、异常、操作系统的内核代码等。</p><p>但是 <strong>管理模式并不负责处理存储器故障</strong> ，这是由 <strong>数据访问中止模式</strong> 负责的。</p><p>A、<strong>用户模式是程序正常执行的工作模式</strong>，ARM处理器在用户模式下执行应用程序，访问受限的系统资源和寄存器，并且无法直接执行特权指令。如果应用程序试图执行特权指令或访问受限的资源，会导致异常发生，处理器会切换到异常模式。</p><p>C、<strong>系统模式也是一种特权模式</strong>，用于运行特权级别的操作系统任务。在系统模式下，操作系统可以执行特权指令，访问所有资源和寄存器，并且可以进行特权级别的操作，如任务切换、内存管理等。</p><p>D、该选项略有争议，但是按照教材P27、P28的内容，并且对比 B 选项，该选项也算正确。</p><br><p><strong>3、存储一个 32 位数 0x2168465 到 2000H~2003H 四个字节单元中，若以小端模式存储，则 2000H 存储单元内容为（ ）</strong></p><p>A、 0x21 B、 0x68 C、0x65 D、0x02</p><p><strong>【参考答案】</strong> C</p><p><strong>【摊主解析】</strong></p><p>大端/小端模式是重点知识，可以把小端模式按照下图中「<strong>倒车入库</strong>」的方式理解，就会容易很多了。</p><p><img src="https://ricky-typora-notes.oss-cn-hangzhou.aliyuncs.com/2023-02-21-164350.png" alt="大端/小端记忆方式"></p><br><p><strong>4、下面关于 ARM 处理器的体系结构描述哪一个是错误的（ ）</strong> </p><p>A、三地址指令格式 </p><p>B、所有的指令都是单周期执行 </p><p>C、指令长度固定 </p><p>D、Load-Store结构</p><p><strong>【参考答案】</strong> B</p><p><strong>【ChatGPT 解析】</strong></p><p>ARM处理器的指令集体系结构（ISA）采用的是 RISC（Reduced Instruction Set Computing）架构，以精简的指令集为基础，支持高效的指令流水线执行。</p><p>B、<strong>并非所有的ARM指令都是单周期执行的</strong>。由于指令的复杂度不同，一些指令需要多个时钟周期才能完成执行。ARM处理器为了保持高效性，采用了流水线执行的方式，可以在一个时钟周期内执行多个指令的不同阶段。但是，在某些情况下，由于数据相关性或控制相关性等因素，可能需要中断流水线执行，从而导致指令执行的延迟。</p><p>A、ARM 指令集采用三地址指令格式，即一个指令可以同时操作三个操作数（源操作数1、源操作数2 和 目的操作数）。</p><p>C、该选项略有争议，指令长度方面，ARM处理器采用变长指令长度的方式，指令长度可以是 2 字节或 4 字节，以满足不同的应用需求。这里的固定可能是指 指令长度要么是 2 字节或 4 字节。（本题在一些搜题软件上的答案也是B）</p><p>D、Load-Store 结构则是 ARM 处理器的一种常见的指令执行方式，即只有 Load 和 Store 指令才能访问存储器中的数据，其他指令只能通过寄存器来操作数据，这样可以提高存储器的访问效率。</p><br><p><strong>5、ARM 指令集和 Thumb 指令集分别是（ ）位的。</strong> </p><p>A、8 位，16 位 </p><p>B、16 位，32 位 </p><p>C、16 位，16 位 </p><p>D、32 位，16 位 </p><p><strong>【参考答案】</strong> D</p><p><strong>【ChatGPT解析】</strong></p><p>ARM 指令集和 Thumb 指令集分别是 32 位和 16 位的。</p><p>ARM指令集具有更强的功能和灵活性，而Thumb指令集则具有更小的指令长度和更高的代码密度，可以在节省存储空间和提高执行速度之间做出平衡。</p><p>在 ARMv7 指令集中，还有一种指令集，称为 Thumb-2，它既支持 16 位指令，又支持 32 位指令，可以在需要时灵活地切换使用。</p><br><p><strong>6、ARM Cortex A8的工作状态包括（ ）。</strong></p><p>A、测试状态和运行状态 </p><p>B、挂起状态和就绪状态 </p><p>C、就绪状态和运行状态 </p><p>D、ARM状态和Thumb状态</p><p><strong>【参考答案】</strong> D</p><p><strong>【ChatGPT解析】</strong></p><p>ARM Cortex A8是一款基于 ARMv7 架构的处理器，<strong>支持 ARM 状态和 Thumb 状态两种工作状态</strong>。</p><p>在 ARM 状态下，处理器执行 32 位的 ARM 指令，提供较高的性能和复杂度；在 Thumb 状态下，处理器执行 16 位的Thumb指令，提供较高的代码密度和低功耗。处理器可以在 ARM 状态和 Thumb 状态之间切换，以根据应用程序的需求来平衡性能和功耗。</p><p>除了ARM状态和Thumb状态，处理器还支持一些特殊状态，如 Jazelle 状态和 ThumbEE 状态。在 Jazelle 状态下，处理器执行 Java 字节码，用于支持 Java 虚拟机（JVM）和Just-In-Time（JIT）编译器。在 ThumbEE 状态下，处理器执行基于Thumb指令的执行环境（TEE），用于安全应用程序的运行。</p><br><p><strong>7、对于 ARM7 三级流水线，当一条指令被译码时，下一条指令正被（ ）</strong></p><p>A、取指</p><p>B、译码</p><p>C、PC值递增</p><p>D、执行</p><p><strong>【参考答案】</strong> A</p><p><strong>【摊主解析】</strong></p><p>理想的 ARM7 的流水线由三个阶段组成，分别是取指、译码和执行。如下图所示：</p><p><img src="https://ricky-typora-notes.oss-cn-hangzhou.aliyuncs.com/2023-02-21-164351.png" alt="三级流水指令"></p><p>可以看到，当前指令正在被译码时，下一条指令已经被取指，等待进入译码阶段。这样可以充分利用处理器的性能，提高指令的执行效率。</p><br><p><strong>8、复位后，ARM处理器处于（ ）模式</strong></p><p>A. USER</p><p>B. SVC</p><p>C. SYSTEM</p><p>D. ARM</p><p><strong>【参考答案】</strong> B</p><p><strong>【摊主解析】</strong></p><p>根据教材 P27 页表格，复位后，ARM 处理器位于 <strong>管理模式</strong>（Supervisor，SVC）</p><br><p><strong>9、寄存器 R13 除可做通用寄存器外，还可以做（ ）</strong> </p><p>A、程序计数器 B、链接寄存器 C、栈指针寄存器 D、基址寄存器</p><p><strong>【参考答案】</strong> C</p><p><strong>【ChatGPT解析】</strong></p><p>在ARM体系结构中，R13 是栈指针寄存器（Stack Pointer），通常简称 SP。它的作用是存储当前栈的地址，以及在函数调用时分配和回收栈空间。</p><br><p><strong>10、在下列ARM处理器的各种模式中，只有（ ）模式不可以自由地改变处理器的工作模式</strong></p><p>A、用户模式</p><p>B、系统模式</p><p>C、终止模式</p><p>D、中断模式</p><p><strong>【参考答案】</strong> A</p><p><strong>【摊主解析】</strong></p><p>根据教材 P27、28 页内容，只有用户模式（User）模式不可以自由地改变处理器的工作模式。</p><p>用户模式是 ARM 处理器最基本的工作模式，用于一般的应用程序的执行。在用户模式下，处理器只能访问受保护的寄存器和内存区域，不能执行特权指令，也不能改变处理器的工作模式。</p><p>其他模式，如系统模式、中断模式和终止模式，都具有更高的特权级别，可以执行更多的指令和操作，并且可以改变处理器的工作模式。例如，系统模式用于操作系统内核的执行，中断模式用于响应外部中断事件，终止模式用于处理严重的错误情况。</p><p>因此，只有用户模式不可以自由地改变处理器的工作模式。</p><br><p><strong>11、0x17 &amp; 0x1A 的运算结果是（ ）</strong></p><p>A、<code>0x01</code></p><p>B、<code>0x11</code></p><p>C、<code>0x17</code></p><p>D、<code>0x12</code></p><p><strong>【参考答案】</strong> D</p><p><strong>【ChatGPT解析】</strong></p><p>进行位运算时，按位与运算符（&amp;）会将两个操作数的对应位上的值进行「与」运算，只有当两个操作数的对应位上的值都为1时，结果位上的值才为1，否则为0。</p><p>对于 <code>0x17 &amp; 0x1A</code>，按位进行与运算：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">  <span class="token number">0001</span> <span class="token number">0111</span><span class="token operator">&amp;</span> <span class="token number">0001</span> <span class="token number">1010</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>  <span class="token number">0001</span> <span class="token number">0010</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>因此，<code>0x17 &amp; 0x1A</code> 的运算结果是 <code>0x12</code>（十六进制），或者 <code>18</code>（十进制），所以选项 D 是正确的答案。</p><br><p><strong>12、对寄存器 R1 的内容乘以 4 的正确指令是（）</strong></p><p>A. <code>LSR R1, #2</code></p><p>B. <code>LSL R1, #2</code></p><p>C. <code>MOV R1, R1, LSL #2</code></p><p>D. <code>MOV R1, R1, LSR #2</code></p><p><strong>【参考答案】</strong> D</p><p><strong>【ChatGPT解析】</strong></p><p>要将寄存器 R1 中的内容乘以 4，可以使用逻辑左移指令（LSL）或移位后的移动指令（MOV）。</p><p>逻辑左移指令将操作数的二进制位向左移动指定的位数，并在右侧插入 0。移位后的移动指令将操作数左移指定的位数，并将结果移回到目标寄存器。</p><p>在选项A和D中，都使用了移位指令，但是是逻辑右移（LSR），而不是逻辑左移（LSL），这样不会得到正确的乘法结果。因此，选项A和D都是错误的。</p><p>在选项B中，使用了逻辑左移指令，但是没有将结果移回到目标寄存器，因此也是错误的。</p><p>正确的选项是C，使用移位后的移动指令将 R1 左移两位，然后将结果移回到 R1 中，从而得到 R1 的内容乘以4 的结果。</p><p>因此，正确的指令是：</p><pre class="line-numbers language-arm" data-language="arm"><code class="language-arm">MOV R1, R1, LSL #2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br><p><strong>13、执行下面指令序列后，R1 寄存器的值是（ ）</strong></p><pre class="line-numbers language-arm" data-language="arm"><code class="language-arm">MOV R1,#0x1000LDR R0,[R1],#4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>A. <code>0x1000</code></p><p>B. <code>0x1004</code></p><p>C. <code>0x0FFC</code></p><p>D. <code>0x4</code></p><p><strong>【参考答案】</strong> B</p><p><strong>【ChatGPT解析】</strong></p><p>执行上述指令序列后，R1寄存器的值是 <code>0x1004</code>。</p><p>该指令首先将 <code>0x1000</code> 赋值给 R1，然后从地址 R1 开始，读取 4 个字节的数据到 R0，同时 R1 值加上 4。</p><p>因此，执行完指令序列后，R1 的值应该是 <code>0x1004</code>。</p><br><p><strong>14、R0=0x05, 执行BIC R0,R0,#3的运算后，R0结果是（ ）</strong></p><p>A. <code>0x02</code></p><p>B. <code>0x03</code></p><p>C. <code>0x04</code></p><p>D. <code>0x05</code> </p><p><strong>【参考答案】</strong> C</p><p><strong>【ChatGPT解析1】</strong></p><p><code>BIC R0, R0, #3</code></p><p>其中，「BIC」是指位清零指令（Bit Clear），将目标寄存器的指定位清零。</p><p>R0 是 ARM 处理器的寄存器名，这里表示目标寄存器。</p><p><code>#3</code> 是一个立即数，表示要清零的位所在的位偏移量。因为 3 的二进制是 00000011，所以这个指令会将R0的二进制表示的低两位清零。</p><p><strong>【ChatGPT解析2】</strong></p><p><img src="https://ricky-typora-notes.oss-cn-hangzhou.aliyuncs.com/2023-02-21-164352-20230406000739987.png" alt="ChatGPT解析2"></p><br><p><strong>15、GET伪指令的含义是（ ）</strong></p><p>A. 包含一个外部文件</p><p>B. 定义程序的入口</p><p>C. 定义一个宏</p><p>D. 声明一个变量</p><p><strong>【参考答案】</strong> A</p><p><strong>【ChatGPT解析】</strong></p><p><strong>GET</strong> 是 ARM 汇编语言中的一个伪指令，<strong>用于将一个外部文件的内容包含到当前汇编文件中</strong>。可以将 GET 指令看作是「复制粘贴」操作，它会将外部文件的内容复制到指令所在的位置，从而使程序能够使用外部文件中的变量、常量、函数等信息。</p><br><p><strong>16、若 R1 = 2000H，（2000H）= 0x86，（2008H）= 0x39 ，则执行指令 LDR R0，[R1,#8]! 后 R0 的值为（ ）</strong></p><p>A. <code>0x2000</code></p><p>B. <code>0x86</code></p><p>C. <code>0x2008</code></p><p>D. <code>0x39</code></p><p><strong>【参考答案】</strong> D</p><p><strong>【摊主解析】</strong></p><p>该指令的含义是：将地址为 <code>R1+8</code> 的内存数据读取到 R0 寄存器中，并将R1的值加上 8（! 表示自动修改基地址R1的值）。</p><p>在本题中，R1 = 2000H，（2008H）= 0x39，所以将 0x39 读入 R0 中，同时 R1 的值变为 <code>2008H</code>。因此，R0 的值为 <code>0x39</code>。</p><br><p><strong>17、将 ARM 处理器 R0 中的一个字节的数据，存入由 R1+4 指示的内存区域,且地址自动更新,则使用的 ARM 指令是（ ）</strong></p><p>A. <code>STR R0,［R1,#4]</code></p><p>B. <code>STRH R0,［R1，＃4]!</code></p><p>C. <code>STRH R0，[R1,＃4]</code></p><p>D. <code>STRB R0,[R1，#4]!</code></p><p><strong>【参考答案】</strong> D</p><p><strong>【ChatGPT解析】</strong></p><ul><li><p><code>STRB</code> 指令是将 R0 寄存器中的 <strong>一个字节的数据</strong> 存储到存储器中，存储器的地址为 R1+4，即 [ R1, #4]。而且在存储数据后，R1自动加上1，指向下一个字节。因此，STRB指令是将一个字节的数据从寄存器存储到内存中，并且自动更新目标地址。</p></li><li><p><code>STR</code>指令是将 R0 寄存器中的 <strong>一个字的数据</strong> 存储到存储器中，存储器的地址为R1+4，即[ R1, #4]。和STRB指令不同，STR 指令存储的是一个字的数据，而不是一个字节，因此存储后 R1 自动加上 4，指向下一个字的地址。</p></li><li><p><code>STRH</code> 指令是将R0寄存器中的 <strong>一个半字的数据</strong> 存储到存储器中，存储器的地址为 R1+4，即[ R1, #4]。和STRB指令类似，STRH指令存储的是一个半字的数据，存储后 R1 自动加上 2，指向下一个半字的地址。</p></li></ul><p><strong>字</strong> 与 <strong>字节</strong> 换算公式：1 个字 = 2 个半字 = 4 个字节</p><p>本题需要存储一个字节的数据，所以选择 D</p><br>]]></content>
      
      
      <categories>
          
          <category> 嵌入式系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 期末指北 </tag>
            
            <tag> 嵌入式系统 </tag>
            
            <tag> ChatGPT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>信息奥赛题解｜昆虫繁殖</title>
      <link href="/2023/04/04/xin-xi-ao-sai-ti-jie-kun-chong-fan-zhi/"/>
      <url>/2023/04/04/xin-xi-ao-sai-ti-jie-kun-chong-fan-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="信息奥赛题解｜昆虫繁殖"><a href="#信息奥赛题解｜昆虫繁殖" class="headerlink" title="信息奥赛题解｜昆虫繁殖"></a>信息奥赛题解｜昆虫繁殖</h1><hr><h2 id="🚀-题目浏览"><a href="#🚀-题目浏览" class="headerlink" title="🚀 题目浏览"></a>🚀 题目浏览</h2><h3 id="【题目描述】"><a href="#【题目描述】" class="headerlink" title="【题目描述】"></a>【题目描述】</h3><p>科学家在热带森林中发现了一种特殊的昆虫，这种昆虫的繁殖能力很强。每对成虫过 $X$ 个月后开始产卵，每月产 $Y$ 对卵，每对卵要过两个月长成成虫。</p><p>假设每个成虫不死，第一个月只有一对成虫，且卵长成成虫后的第一个月不产卵( 过 $X$ 个月产卵)，问过 $Z$ 个月以后，共有成虫多少对？</p><p>$0 \le X \le 20,1 \le Y \le 20,X \le Z \le 50$</p><h3 id="【输入】"><a href="#【输入】" class="headerlink" title="【输入】"></a>【输入】</h3><p>$X,Y,Z$ 的数值。</p><h3 id="【输出】"><a href="#【输出】" class="headerlink" title="【输出】"></a>【输出】</h3><p>过 $Z$ 个月以后，共有成虫对数。</p><h3 id="【输入样例】"><a href="#【输入样例】" class="headerlink" title="【输入样例】"></a>【输入样例】</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token number">1</span> <span class="token number">2</span> <span class="token number">8</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="【输出样例】"><a href="#【输出样例】" class="headerlink" title="【输出样例】"></a>【输出样例】</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token number">37</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="【原题链接】"><a href="#【原题链接】" class="headerlink" title="【原题链接】"></a>【原题链接】</h3><p><a href="http://ybt.ssoier.cn:8088/problem_show.php?pid=1204">http://ybt.ssoier.cn:8088/problem_show.php?pid=1204</a></p><hr><h2 id="☘️-题解分析"><a href="#☘️-题解分析" class="headerlink" title="☘️ 题解分析"></a>☘️ 题解分析</h2><p><strong>昆虫繁殖</strong> 问题是 算法初学者 在学习 <strong>递推专题</strong> 时，必定遇到的问题之一。此题对于初学者来说 <strong>难度较高</strong>，很容易出现题目推着推着，就把各种变量、下标搞混的情况。😵‍💫</p><p>博主在阅读其他人写的题解时，要么解释的非常潦草，难以理解；要么干脆只有代码，没有解释。💦</p><p>所以在对本题进行了一定的研究后，博主撰写了此篇题解，希望能在未来帮助更多的小伙伴弄懂本题的递推关系，最后能够手撕本题代码。🧑🏻‍💻</p><p>在博主看来本题的难点主要有 3 个：</p><ul><li>第一，不知道如何表示「过了 z 个月」</li><li>第二，不知道如何得到递推方程</li><li>第三，推出来部分递推方程，却不知道如何设定边界条件，书写代码</li></ul><p>首先解决 <strong>第一个问题</strong>，该如何表示「<strong>过了 z 个月</strong>」？能否用列表的方式，来清晰的表式每一个月的数据 ？</p><p>该问题的关键在于，我们如何表示刚开始的第一个月？是从 0 开始，还是 1 开始 ? 实际上，两种方式都可以的，列表的方式如下：</p><ul><li>从 0 开始的月份下标，此时「过了 z 个月」，就对应 z 月（如过了 1 个月，就是从 0月 → 1 月）</li></ul><table><thead><tr><th align="center">月份</th><th align="center">0月</th><th align="center">1月</th><th align="center">2月</th><th align="center">3月</th><th align="center">4月</th><th align="center">…</th><th align="center">z 月</th></tr></thead><tbody><tr><td align="center"></td><td align="center">初始数据</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><ul><li>从 1 开始的月份下标，此时「过了 z 个月」，对应的是 z + 1 月（如过了 1 个月，就是从 1月 → 2 月）</li></ul><table><thead><tr><th align="center">月份</th><th align="center">1月</th><th align="center">2月</th><th align="center">3月</th><th align="center">4月</th><th align="center">5月</th><th align="center">…</th><th align="center">z + 1月</th></tr></thead><tbody><tr><td align="center"></td><td align="center">初始数据</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><p>在本文中，博主选择从第一种方式，即月份下标从 0 开始（原因会在下文分析完问题二、三后阐述）</p><br><p>对于 <strong>第二个问题</strong>，我们需要通过 <strong>模拟</strong> 的方式来推出递推方程。</p><p>首先，以 $x = 1, y = 2, z = 4$ 的情况进行模拟，此条件表示的是：</p><ul><li>过 $x = 1$ 个月，成虫开始产卵</li><li>每对成虫每次产 $y = 2$ 对卵</li><li>要求过 $z = 4$ 个月后，成虫的数量</li></ul><p>因为要求解成虫数量，所以比较容易想到的方式是 <strong>创建两个数组</strong>，一个存储每个月的成虫总数量（数组 <code>c</code> 表示），另一个存储每个月卵的总数量（数组 <code>r</code> 表示）。</p><p><strong>在第 0 个月</strong> 时，有 1 对成虫，0 对卵，所以 $c[0] = 1，r[0] = 0$</p><table><thead><tr><th align="center">月份</th><th align="center">0月</th><th align="center">1月</th><th align="center">2月</th><th align="center">3月</th><th align="center">4月</th></tr></thead><tbody><tr><td align="center">每月成虫总数量 c[i]</td><td align="center">1</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">每月卵总数量 r[i]</td><td align="center">0</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><p><strong>过了 1 个月后</strong>（1月），成虫开始产卵，所以在 1 月份时，卵的数量为 2，成虫数量仍为 1，$c[1] = 1，r[1] = 2$</p><table><thead><tr><th align="center">月份</th><th align="center">0月</th><th align="center">1月</th><th align="center">2月</th><th align="center">3月</th><th align="center">4月</th></tr></thead><tbody><tr><td align="center">每月成虫总数量 c[i]</td><td align="center">1</td><td align="center">1</td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">每月卵总数量 r[i]</td><td align="center">0</td><td align="center">2</td><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><p><strong>过了 2 个月后</strong>（2月），此时 1 月产的卵没有长大为成虫，所以成虫数量仍为 1，并且在这个月，成虫又产生了 y = 2 对卵，则此时共有 4 对卵（2 对新产生的卵，2 对为 1 月份仅成长了 1 个月的卵），$c[2] = 1,r[2] = 4$</p><table><thead><tr><th align="center">月份</th><th align="center">0月</th><th align="center">1月</th><th align="center">2月</th><th align="center">3月</th><th align="center">4月</th></tr></thead><tbody><tr><td align="center">每月成虫总数量 c[i]</td><td align="center">1</td><td align="center">1</td><td align="center">1</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">每月卵总数量 r[i]</td><td align="center">0</td><td align="center">2</td><td align="center">4</td><td align="center"></td><td align="center"></td></tr></tbody></table><p><strong>过了 3 个月后</strong>（3月），此时 1 月的卵成长为了成虫，<strong>成虫数量增加</strong>，所以 $c[3] = c[2] + r[3 - 2] = 3$；对于卵来说，此时有 2 只卵变成成虫，但是原先的 1 对成虫又产生了 2 只卵，所以 $r[3] = r[2] - 2 + 2 = 4$</p><table><thead><tr><th align="center">月份</th><th align="center">0月</th><th align="center">1月</th><th align="center">2月</th><th align="center">3月</th><th align="center">4月</th></tr></thead><tbody><tr><td align="center">每月成虫总数量 c[i]</td><td align="center">1</td><td align="center">1</td><td align="center">1</td><td align="center">3</td><td align="center"></td></tr><tr><td align="center">每月卵总数量 r[i]</td><td align="center">0</td><td align="center">2</td><td align="center">4</td><td align="center">4</td><td align="center"></td></tr></tbody></table><p>于是我们容易总结得到，成虫数量 $c[i] = c[i - 1] + r[i -2]$ （但是这其实是有问题的 ❌）</p><p>我们继续来看 <strong>4 月份</strong>，如果按照上面这种方式，那么 $c[4] = c[3] + r[4-2] = 8$。</p><p>但是仔细思考，2 月份的 4 对卵，已经有 2 对在 3 月份变成了成虫，实际上只有 2 对卵在 4 月份变成了成虫，正确的 $c[4] = c[3] + 2 = 6$ 才对。🤔</p><p>经过思考，我们发现上面公式里的 <code>r[i-2]</code>，<strong>不应该设成 2 个月前卵的总数量</strong>，因为如果是总数量，那么这些卵中有一部分来自于上个月，这部分卵在下一个月就会变成成虫，而不是等 2 个月后才变成成虫。💡</p><p>所以，更加合理的表示方式，应该是将「<strong>r 数组设置为每个月新增的卵的数量</strong>」。即每个月的成虫总数量 <code>c[i]</code>，应该等于 上个月成虫的总数量 <code>c[i-1]</code> + 上 2 个月新增的卵的数量 <code>r[i-2]</code>（其他时间产生的卵和 <code>c[i]</code> 的计算并没有关系）✅ </p><p>这也是为什么很多题解中，选择设置 <strong>c为每月成虫总数量</strong>，但是 <strong>r 为每月<u><em>新增</em></u> 的卵的数量</strong>的原因。</p><p>这样设定变量含义，就能够得到正确的递推方程：<br>$$<br>c[i] = c[i - 1] + r[i - 2] ; r[i] = c[i -x] * y<br>$$<br>递推方程含义为（在 x 个月之后）：</p><p>每月成虫总数量 $c[i]$ = 上一个月成虫总数量 $c[i -1]$ + 上 2 个月新增的卵的数量 $r[i - 2]$</p><p>每月新增的卵的数量 $r[i]$ = 上 x 个月的成虫总数量 $c[i-x] * y$</p><p>在理解了这一步后，我们再重新来推一下这个表格：</p><p>在 <code>0 - x-1</code> 月，第一对成虫不产卵，$c[i] \equiv  1,r[i] \equiv 0$，即：</p><ul><li>在第 0 月时，$c[0] = 1,r[0] = 0$</li></ul><table><thead><tr><th align="center">月份</th><th align="center">0月</th><th align="center">1月</th><th align="center">2月</th><th align="center">3月</th><th align="center">4月</th></tr></thead><tbody><tr><td align="center">每月成虫总数量 c[i]</td><td align="center">1</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">每月卵新增数量 r[i]</td><td align="center">0</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><p>在 <code>x</code> 月，第一对成虫开始产卵，且产了 y 对卵，$c[x] =  1,r[x] = y$，即：</p><ul><li>在第 1 月时，$c[1] = 1,r[1] = 2$</li></ul><table><thead><tr><th align="center">月份</th><th align="center">0月</th><th align="center">1月</th><th align="center">2月</th><th align="center">3月</th><th align="center">4月</th></tr></thead><tbody><tr><td align="center">每月成虫总数量 c[i]</td><td align="center">1</td><td align="center">1</td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">每月卵新增数量 r[i]</td><td align="center">0</td><td align="center">2</td><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><p>在 <code>x+1 - z</code> 月，递推关系满足上述递推方程，有：</p><ul><li>在第 2 月时，$c[2] = c[1] + r[0] = 1,r[2] = c[2 - 1] * 2 = 2$</li><li>在第 3 月时，$c[3] = c[2] + r[1] = 3,r[3] = c[3 - 1] * 2 = 2$</li><li>在第 4 月时，$c[4] = c[3] + r[2] = 5,r[4] = c[4 - 1] * 2 = 6$</li></ul><table><thead><tr><th align="center">月份</th><th align="center">0月</th><th align="center">1月</th><th align="center">2月</th><th align="center">3月</th><th align="center">4月</th></tr></thead><tbody><tr><td align="center">每月成虫总数量 c[i]</td><td align="center">1</td><td align="center">1</td><td align="center">1</td><td align="center">3</td><td align="center">5</td></tr><tr><td align="center">每月卵新增数量 r[i]</td><td align="center">0</td><td align="center">2</td><td align="center">2</td><td align="center">2</td><td align="center">6</td></tr></tbody></table><p>按照样例中 $z=8$，我们也可以得到下表，样例答案 c[8] = 37 就是这样来的。</p><table><thead><tr><th align="center">月份</th><th align="center">0月</th><th align="center">1月</th><th align="center">2月</th><th align="center">3月</th><th align="center">4月</th><th align="center">5月</th><th align="center">6月</th><th align="center">7月</th><th align="center">8月</th></tr></thead><tbody><tr><td align="center">每月成虫总数量 c[i]</td><td align="center">1</td><td align="center">1</td><td align="center">1</td><td align="center">3</td><td align="center">5</td><td align="center">7</td><td align="center">13</td><td align="center">23</td><td align="center">37</td></tr><tr><td align="center">每月卵新增数量 r[i]</td><td align="center">0</td><td align="center">2</td><td align="center">2</td><td align="center">2</td><td align="center">6</td><td align="center">10</td><td align="center">14</td><td align="center">26</td><td align="center">46</td></tr></tbody></table><p>下面，我们以 $x = 2,y=3,z = 4$ 为例，再次模拟。</p><p>首先，在 <code>0 - x-1</code> 月，第一对成虫是不产卵的，所以 $c[i] \equiv  1,r[i] \equiv 0$，即：</p><ul><li>在第 0 月时，$c[0] = 1,r[0] = 0$</li><li>在第 1 月时，$c[1] = 1,r[1] = 0$</li></ul><table><thead><tr><th align="center">月份</th><th align="center">0月</th><th align="center">1月</th><th align="center">2月</th><th align="center">3月</th><th align="center">4月</th></tr></thead><tbody><tr><td align="center">每月成虫总数量 c[i]</td><td align="center">1</td><td align="center">1</td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">每月卵新增数量 r[i]</td><td align="center">0</td><td align="center">0</td><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><p>在 <code>x</code> 月，第一对成虫开始产卵，且产了 y 对卵，$c[x] =  1,r[x] = y$，即：</p><ul><li>在第 2 月时，$c[2] = 1,r[2] = 3$</li></ul><table><thead><tr><th align="center">月份</th><th align="center">0月</th><th align="center">1月</th><th align="center">2月</th><th align="center">3月</th><th align="center">4月</th></tr></thead><tbody><tr><td align="center">每月成虫总数量 c[i]</td><td align="center">1</td><td align="center">1</td><td align="center">1</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">每月卵新增数量 r[i]</td><td align="center">0</td><td align="center">0</td><td align="center">3</td><td align="center"></td><td align="center"></td></tr></tbody></table><p>在 <code>x+1 - z</code> 月，递推关系满足上述递推方程，有：</p><ul><li>在第 3 月时，$c[3] = c[2] + r[1] = 1,r[3] = c[3 - 2] * 3 = 3$</li><li>在第 4 月时，$c[4] = c[3] + r[2] = 4,r[4] = c[4 - 2] * 3 = 3$</li></ul><table><thead><tr><th align="center">月份</th><th align="center">0月</th><th align="center">1月</th><th align="center">2月</th><th align="center">3月</th><th align="center">4月</th></tr></thead><tbody><tr><td align="center">每月成虫总数量 c[i]</td><td align="center">1</td><td align="center">1</td><td align="center">1</td><td align="center">1</td><td align="center">4</td></tr><tr><td align="center">每月卵新增数量 r[i]</td><td align="center">0</td><td align="center">0</td><td align="center">3</td><td align="center">3</td><td align="center">3</td></tr></tbody></table><p>至此，整道题目的逻辑关系基本理清。✅ </p><br><p>在梳理完了递推关系后，我们尝试书写代码（这题对于初学者来说确实麻烦，但是 <strong>对逻辑思维是很好的锻炼</strong>）</p><p>我们从上面的过程入手，<strong>边界条件</strong> 就比较容易确定。显然，总过程分为 3 段，分别是 <code>0-x-1</code>月, <code>x</code>月, <code>x+1-z</code> 月，所以我们的程序也可以分为 3 段来写：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//模拟 0 - x - 1 月</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>r<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//模拟 x 月</span>c<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>r<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> y<span class="token punctuation">;</span><span class="token comment">//模拟 x + 1 - z 月</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> z<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  c<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> r<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  r<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> r<span class="token punctuation">[</span>i <span class="token operator">-</span> x<span class="token punctuation">]</span> <span class="token operator">*</span> y<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样，我们就完成了本题的核心代码（恭喜 🎉🎉🎉）</p><p>其实，在对 $x$ 月的赋值时，也可以将其合并到第 3 段，但是这个合并操作要求 x &gt; 1（因为第 3 段的 递推方程中包含 <code>r[i - 2]</code>，所以需要保证 <code>i - 2 &gt; 0</code>）。为了代码逻辑更加清晰，博主采用了 3 段式。</p><p>当然，博主也看到有代码是月份从 1 开始的，这样的话，「过了 z 个月」就是 z + 1 月，最终输出的答案是 c[z + 1]，这样从 1 开始的下标就可以保证 2、3 段合并时 $i - 2 &gt; 0$ 了，也是可以的。</p><p>在本文中，博主选择月份下标从 0 开始，这样「过了 z 个月」就是 z 月，比较容易记忆，大伙可以根据喜好自行选择。</p><p>🍉 PS：本题需要使用 <code>long long</code> 类型，<code>int</code> 类型不够用。</p><hr><h2 id="🧑🏻‍💻-C-代码"><a href="#🧑🏻‍💻-C-代码" class="headerlink" title="🧑🏻‍💻 C++ 代码"></a>🧑🏻‍💻 C++ 代码</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e2</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span>ll c<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">//c数组存储每个月成虫的总数量</span>ll r<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">//r数组存储每个月新增的昆虫数量</span>ll x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    cin <span class="token operator">&gt;&gt;</span> x <span class="token operator">&gt;&gt;</span> y <span class="token operator">&gt;&gt;</span> z<span class="token punctuation">;</span>      <span class="token comment">//模拟 0 - x - 1 月</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        c<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        r<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//模拟 x 月</span>    c<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    r<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> y<span class="token punctuation">;</span>      <span class="token comment">//模拟 x + 1 - z 月</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> z <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        r<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">[</span>i <span class="token operator">-</span> x<span class="token punctuation">]</span> <span class="token operator">*</span> y<span class="token punctuation">;</span>        c<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> r<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> c<span class="token punctuation">[</span>z<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 信息奥赛题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 信息奥赛 </tag>
            
            <tag> C++ </tag>
            
            <tag> 递推 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python学习笔记｜List</title>
      <link href="/2023/04/02/python-xue-xi-bi-ji-list/"/>
      <url>/2023/04/02/python-xue-xi-bi-ji-list/</url>
      
        <content type="html"><![CDATA[<p>本篇博客还在修改润色中～</p><p>敬请期待～</p>]]></content>
      
      
      <categories>
          
          <category> Python基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>信息奥赛题解｜爬楼梯</title>
      <link href="/2023/04/01/xin-xi-ao-sai-ti-jie-pa-lou-ti/"/>
      <url>/2023/04/01/xin-xi-ao-sai-ti-jie-pa-lou-ti/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="信息奥赛题解｜爬楼梯"><a href="#信息奥赛题解｜爬楼梯" class="headerlink" title="信息奥赛题解｜爬楼梯"></a>信息奥赛题解｜爬楼梯</h1><hr><h2 id="🚀-题目浏览"><a href="#🚀-题目浏览" class="headerlink" title="🚀 题目浏览"></a>🚀 题目浏览</h2><h3 id="【题目描述】"><a href="#【题目描述】" class="headerlink" title="【题目描述】"></a>【题目描述】</h3><p>树老师爬楼梯，他可以每次走 $1$ 级或者 $2$ 级，输入楼梯的级数，求不同的走法数。</p><p>例如：楼梯一共有 $3$ 级，他可以每次都走一级，或者第一次走一级，第二次走两级，也可以第一次走两级，第二次走一级，一共 $3$ 种方法。</p><h3 id="【输入】"><a href="#【输入】" class="headerlink" title="【输入】"></a>【输入】</h3><p>输入包含若干行，每行包含一个正整数 $N$，代表楼梯级数，$1≤N≤30$。</p><h3 id="【输出】"><a href="#【输出】" class="headerlink" title="【输出】"></a>【输出】</h3><p>不同的走法数，每一行输入对应一行输出。</p><h3 id="【输入样例】"><a href="#【输入样例】" class="headerlink" title="【输入样例】"></a>【输入样例】</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token number">5</span><span class="token number">8</span><span class="token number">10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="【输出样例】"><a href="#【输出样例】" class="headerlink" title="【输出样例】"></a>【输出样例】</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token number">8</span><span class="token number">34</span><span class="token number">89</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="【原题链接】"><a href="#【原题链接】" class="headerlink" title="【原题链接】"></a>【原题链接】</h3><p><a href="http://ybt.ssoier.cn:8088/problem_show.php?pid=1204">http://ybt.ssoier.cn:8088/problem_show.php?pid=1204</a></p><hr><h2 id="☘️-题解分析"><a href="#☘️-题解分析" class="headerlink" title="☘️ 题解分析"></a>☘️ 题解分析</h2><p>爬楼梯问题也是 <strong>递推思想</strong> 的典型体现。</p><p>我们可以把走到第 <code>i</code> 级楼梯的方案数 <code>f[i]</code>  看成 <strong>一个集合</strong>，由「最后一步走 1 级楼梯的方案数 <code>f[i-1]</code> 」和 「最后一步走 2 级楼梯的方案数 <code>f[i-2]</code> 」这 <strong>两个子集</strong> 构成。</p><p>比如走到第 <code>5</code> 级楼梯的方案数 <code>f[5]</code> ，按照最后一步走的级数可以分为以下两个子集：</p><ul><li>最后一步走 1 级，那么走最后一步之前，我们处在第 4 级台阶，所以这个子集的大小为 <code>f[4]</code></li><li>最后一步走 2 级，那么走最后一步之前，我们处在第 3 级台阶，所以这个子集的大小为 <code>f[3]</code></li></ul><p>这样的分割方法做到了 <strong>不重复、不遗漏</strong>，因此只需按照方程 <code>f[i] = f[i-1] + f[i-2]</code> 去递推即可。</p><h2 id="❗️-误区提示"><a href="#❗️-误区提示" class="headerlink" title="❗️ 误区提示"></a>❗️ 误区提示</h2><p>此题的一个 <strong>常见错误</strong>，就是把递推方程书写成 <code>f[i] = f[i-1] + 2*f[i-2]</code>。</p><p>这是因为在划分子集时，把第二个子集「<strong>最后一步走 2 级</strong>」✅ 误解成了「<strong>最后一步走 2 级有多少种方案</strong>」❌</p><p>这就导致在考虑 <code>f[i-2]</code> 时，认为 <strong>最后一步走 2 级有 2 种方案</strong>：即一次走 2 级，或先走 1 级，再走 1 级。把 <code>f[i-2]</code> 与 <code>f[2]</code> 产生了联系，所以在 <code>f[i-2]</code> 前乘了 2。❌ </p><p>但是仔细思考，我们会发现上面这种错误的想法，<strong>本质上是因为两个子集出现了重复</strong>。</p><p> 「最后一步走 2 级，但是每次走 1 级」的方案，其实是包含在第一个子集 「最后一步走 1 级」中的。因为如果先走 1 级，再走 1 级，那最后一步就是 1 级，根本不能划分在「最后一步走 2 级」这个子集中，从而产生了错误。</p><p>也就是说，<code>f[i-2]</code> 与 <code>f[2]</code> 是没有关系的❗️</p><p>初学者在初学时犯了这种错误后，需要仔细思考原因，避免下次再走入这个误区。🍀</p><hr><h2 id="🧑🏻‍💻-C-代码"><a href="#🧑🏻‍💻-C-代码" class="headerlink" title="🧑🏻‍💻 C++ 代码"></a>🧑🏻‍💻 C++ 代码</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">35</span><span class="token punctuation">;</span><span class="token keyword">int</span> tmp<span class="token punctuation">;</span><span class="token keyword">int</span> f<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//cin读入优化</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    f<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    f<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        f<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> f<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> f<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">//最后一步走1级的方案 + 最后一步走2级的方案</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">&gt;&gt;</span> tmp<span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> f<span class="token punctuation">[</span>tmp<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 信息奥赛题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 信息奥赛 </tag>
            
            <tag> C++ </tag>
            
            <tag> 递推 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux命令行大全｜读书笔记</title>
      <link href="/2023/03/31/linux-ming-ling-xing-da-quan-du-shu-bi-ji/"/>
      <url>/2023/03/31/linux-ming-ling-xing-da-quan-du-shu-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="Book-Notes-The-Linux-Command-Line-Chapter-5"><a href="#Book-Notes-The-Linux-Command-Line-Chapter-5" class="headerlink" title="Book Notes: The Linux Command Line - Chapter 5"></a>Book Notes: The Linux Command Line - Chapter 5</h1><hr><h2 id="About-this-Book-📚"><a href="#About-this-Book-📚" class="headerlink" title="About this Book 📚"></a>About this Book 📚</h2><p><strong>Name</strong>: <em>The Linux Command Line</em></p><p><strong>Author</strong>: William E. Shotts</p><p><strong>Publisher</strong>: No Starch Press</p><p><strong>Cover</strong>:</p><p><img src="https://ricky-typora-notes.oss-cn-hangzhou.aliyuncs.com/51kjjarKXBL._SX376_BO1,204,203,200_.jpg" alt="The Linux Command Line"></p><p><strong>Translation Version:</strong></p><p><img src="https://img2.doubanio.com/view/subject/l/public/s27318531.jpg" alt="Linux命令行大全"></p><hr><h2 id="Notes-✍️"><a href="#Notes-✍️" class="headerlink" title="Notes ✍️"></a>Notes ✍️</h2><h3 id="4-Types-of-Commands"><a href="#4-Types-of-Commands" class="headerlink" title="4 Types of Commands"></a>4 Types of Commands</h3><ul><li><strong>An executable program</strong><ul><li>All files we saw in <code>/usr/bin</code> are executable programs. Within this category, programs can be <em><strong>compiled binaries</strong></em> such as programs written in C and C++, or programs written in scripting languages such as the shell, Perl, Python, Ruby, and so on.</li></ul></li><li><strong>A built-in command</strong><ul><li>A command <em><strong>built into the shell itself</strong></em>. <code>bash</code> supports a number of commands internally called <em>shell builtins</em>. The <code>cd</code> command, for example, is a shell builtin.</li></ul></li><li><strong>A shell function</strong><ul><li>Shell functions are miniature shell scripts incorporated into the environment.</li></ul></li><li><strong>An alias</strong><ul><li>Aliases are commands that we can <em><strong>define by ourselves</strong></em>, built from other commands.</li></ul></li></ul><h3 id="Commands-of-Chapter-5"><a href="#Commands-of-Chapter-5" class="headerlink" title="Commands of Chapter 5"></a>Commands of Chapter 5</h3><ul><li><p><code>type</code></p><ul><li>Display information about command type</li><li>Examples<ul><li><code>type ls</code></li><li><code>type cd</code></li><li><code>type mv</code></li></ul></li></ul></li><li><p><code>which</code></p><ul><li>Display an Executeable’s Location</li><li>Examples<ul><li><code>which ls</code></li><li><code>which cp</code></li></ul></li></ul></li><li><p><code>help</code></p><ul><li>Display information about built-in commands</li><li>Examples<ul><li><code>help cd</code></li></ul></li></ul></li><li><p><code>--help</code></p><ul><li>Display a description of the command’s supported syntax and options</li><li>Examples<ul><li><code>mkdir --help</code></li><li><code>mv --help</code></li></ul></li></ul></li><li><p><code>man</code> </p><ul><li>Display a program’s mannual page</li><li>Examples<ul><li><code>man mv</code></li></ul></li></ul></li><li><p><code>whatis</code></p><ul><li>Display one-line manual page descriptions<ul><li><code>whatis mv</code></li><li><code>whatis cp</code></li></ul></li></ul></li><li><p><code>alias</code></p><ul><li>Create an alias for a command</li><li>🍉 PS: The <code>alias</code> commands disappear when shell session ends, but we will learn how to store them for future use in later chapters.</li></ul></li></ul><hr><h2 id="Lab-🧑🏻‍💻"><a href="#Lab-🧑🏻‍💻" class="headerlink" title="Lab 🧑🏻‍💻"></a>Lab 🧑🏻‍💻</h2><h3 id="Why-Labs"><a href="#Why-Labs" class="headerlink" title="Why Labs ?"></a>Why Labs ?</h3><p>Lab provides <strong>a hands-on learning experience</strong> that allows us <strong>to apply theoretical knowledge to practical situations</strong>. This helps us to better understand concepts and retain information more effectively.</p><h3 id="Lab1"><a href="#Lab1" class="headerlink" title="Lab1"></a>Lab1</h3><blockquote><p>use <code>type</code> , <code>which</code>, <code>help</code>, <code>whatis</code>, <code>man</code> to check fundamental commands</p></blockquote><ul><li><code>pwd</code></li><li><code>cd</code></li><li><code>ls</code></li><li><code>mkdir</code></li><li><code>cp</code></li><li><code>mv</code></li><li><code>rm</code></li><li><code>less</code></li><li><code>file</code></li></ul><hr><h3 id="Lab2"><a href="#Lab2" class="headerlink" title="Lab2"></a>Lab2</h3><p><strong>Prerequisites</strong></p><blockquote><p> Try using <code>;</code> to write commands in 1 line</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span><span class="token punctuation">;</span> <span class="token builtin class-name">cd</span> Desktop<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>Task</strong></p><blockquote><p>Use <code>alias</code> to change current directory to <code>Desktop</code></p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">type</span> cdd <span class="token comment"># check if 'cdd' is used</span><span class="token builtin class-name">alias</span> <span class="token assign-left variable">cdd</span><span class="token operator">=</span><span class="token string">'cd; cd Desktop;'</span> <span class="token comment"># if not, assgin these command lines to 'cdd'</span>cdd <span class="token comment"># use this command</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 英文读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>信息奥赛实训报告｜STL</title>
      <link href="/2023/03/26/xin-xi-ao-sai-shi-xun-bao-gao-stl/"/>
      <url>/2023/03/26/xin-xi-ao-sai-shi-xun-bao-gao-stl/</url>
      
        <content type="html"><![CDATA[<h1 id="【信息奥赛实训报告】STL"><a href="#【信息奥赛实训报告】STL" class="headerlink" title="【信息奥赛实训报告】STL"></a>【信息奥赛实训报告】STL</h1><p><img src="http://ricky-typora-notes.oss-cn-hangzhou.aliyuncs.com/2023-02-21-170357.jpg" alt="信息奥赛实训报告"></p><h2 id="实训概要-📙"><a href="#实训概要-📙" class="headerlink" title="实训概要 📙"></a>实训概要 📙</h2><hr><h3 id="实训专题"><a href="#实训专题" class="headerlink" title="实训专题"></a>实训专题</h3><p>STL 与基础数据结构专题训练</p><h3 id="实训目的"><a href="#实训目的" class="headerlink" title="实训目的"></a>实训目的</h3><ul><li>掌握STL常用的算法、容器、容器适配器的使用方法。</li><li>能够利用STL的算法、容器、容器适配器求解问题。</li></ul><h3 id="题目列表"><a href="#题目列表" class="headerlink" title="题目列表"></a>题目列表</h3><ul><li>A：摘苹果</li><li>B：立方和</li><li>C：计算个数</li><li>D：后缀表达式的值</li><li>E：做蛋糕</li><li>F：查资料</li><li>G：明明的随机数</li></ul><h2 id="题解-🧑🏻‍💻"><a href="#题解-🧑🏻‍💻" class="headerlink" title="题解 🧑🏻‍💻"></a>题解 🧑🏻‍💻</h2><hr><h3 id="A：摘苹果"><a href="#A：摘苹果" class="headerlink" title="A：摘苹果"></a>A：摘苹果</h3><h4 id="【题目描述】"><a href="#【题目描述】" class="headerlink" title="【题目描述】"></a>【题目描述】</h4><p>苹果树上有 $n$ 个苹果，每个苹果的高度分別为 $h_{1},h_{2},\dots,h_{n}$。</p><p>你拥有一个非常方便的摘苹果工具，每次可以把指定高度上的所有苹果全部摘下来。</p><p>你打算摘 $q$ 次，第 $i$ 次摘高度为 $a_{i}$ 的所有苹果。</p><p>问每次可以摘到多少个苹果？</p><h4 id="【输入】"><a href="#【输入】" class="headerlink" title="【输入】"></a>【输入】</h4><p>第一行包含两个正整数 $n,q(1≤n≤10^{6},1≤q≤2*10^{5})$，分别表示苹果的数量和摘苹果的次数。</p><p>第二行包含 $n$ 个正整数 $h_{1},h_{2},\dots,h_{n}(1\le h_{i} \le 10^{9})$，分别表示每个苹果的高度。</p><p>其后 $q$ 行，第 $i$ 行包含一个正整数 $a(1≤ a_i ≤ 10^9)$，表示当次要摘的苹果的高度。</p><h4 id="【输出】"><a href="#【输出】" class="headerlink" title="【输出】"></a>【输出】</h4><p>对于每次摘苹果的操作，在一行内输出一个整数，表示这一次摘到的苹果的数量。</p><h4 id="【输入样例】"><a href="#【输入样例】" class="headerlink" title="【输入样例】"></a>【输入样例】</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token number">6</span> <span class="token number">4</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">2</span> <span class="token number">4</span><span class="token number">1</span><span class="token number">2</span><span class="token number">1</span><span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="【输出样例】"><a href="#【输出样例】" class="headerlink" title="【输出样例】"></a>【输出样例】</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token number">3</span><span class="token number">2</span><span class="token number">0</span><span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="【题目分析】"><a href="#【题目分析】" class="headerlink" title="【题目分析】"></a>【题目分析】</h4><p>本题考查 STL 中的 <code>map</code> ，只需统计每个高度的苹果数，然后采摘时输出即可，难度较低。</p><p>另外题目输入量较大，使用 <code>cin读入优化</code> 可以有效减少时间。</p><h4 id="【-C-代码】"><a href="#【-C-代码】" class="headerlink" title="【 C++ 代码】"></a>【 C++ 代码】</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> q<span class="token punctuation">,</span> tmp<span class="token punctuation">;</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> mp<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//cin读入优化</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> q<span class="token punctuation">;</span>    mp<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        cin <span class="token operator">&gt;&gt;</span> tmp<span class="token punctuation">;</span>        mp<span class="token punctuation">[</span>tmp<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>   <span class="token comment">//该高度苹果数量累加</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> q<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        cin <span class="token operator">&gt;&gt;</span> tmp<span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> mp<span class="token punctuation">[</span>tmp<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>  <span class="token comment">//输出该高度苹果总数</span>        mp<span class="token punctuation">[</span>tmp<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">//清零当前高度苹果数</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="B：立方和"><a href="#B：立方和" class="headerlink" title="B：立方和"></a>B：立方和</h3><h4 id="【题目描述】-1"><a href="#【题目描述】-1" class="headerlink" title="【题目描述】"></a>【题目描述】</h4><p>给你一个正整数 $x$，问是否存在至少一对正整数对 $(a,b)$ 满足 $a^3+b^3=x$?</p><h4 id="【输入】-1"><a href="#【输入】-1" class="headerlink" title="【输入】"></a>【输入】</h4><p>第一行包含一个正整数 $T(1≤ T≤100)$，表示测试数据组数。</p><p>每组数据占一行，包含一个正整数 $x(1≤ x ≤10^{12})$。</p><h4 id="【输出】-1"><a href="#【输出】-1" class="headerlink" title="【输出】"></a>【输出】</h4><p>对于每组数据，如果存在至少一对 $(a,b)$ 满足题意，输出 <code>YES</code>，否则输出 <code>NO</code></p><h4 id="【输入样例】-1"><a href="#【输入样例】-1" class="headerlink" title="【输入样例】"></a>【输入样例】</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token number">6</span><span class="token number">1</span><span class="token number">2</span><span class="token number">3</span><span class="token number">8</span><span class="token number">9</span><span class="token number">8567958184</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="【输出样例】-1"><a href="#【输出样例】-1" class="headerlink" title="【输出样例】"></a>【输出样例】</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">NOYESNONOYESYES<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="【题目分析】-1"><a href="#【题目分析】-1" class="headerlink" title="【题目分析】"></a>【题目分析】</h4><p>本题有两种思路：</p><ol><li>由于 x 最大不超过 $10^{12}$，故 $a,b$ 的范围在 $[1,10^{4}]$，因此可以对 $a$ 枚举，对 $b$ 用二分，实测可以 AC。（但是不能 $a,b$ 均枚举，会超时）</li><li>可以先将所有 $a^3$ 存入容器中，然后枚举 $b$ ，看 $x-b^3$ 是否在容器中，若有，则有解。</li></ol><p>🍉 PS1：使用 <code>vector</code> 会超时，因为在 <code>vector</code> 中查找元素，时间复杂度为 $O(N)$；而在 <code>set、map</code> 中，查找的时间复杂度为 $O(logN)$，时间会大大降低。</p><p>🍉 PS2：本题数据上限很大，已经超出了 <code>int</code> 类型的范围，需要使用 <code>long long</code> 类型。（ <code>1ll</code> 是 1 的 <code>long long</code> 形式，<code>任何 int 类型数据 * 1ll</code> 后均能转换为 <code>long long</code> 类型）</p><h4 id="【-C-代码】-1"><a href="#【-C-代码】-1" class="headerlink" title="【 C++ 代码】"></a>【 C++ 代码】</h4><p>思路1：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span>ll T<span class="token punctuation">,</span> tmp<span class="token punctuation">,</span> flag<span class="token punctuation">;</span>ll <span class="token function">f</span><span class="token punctuation">(</span>ll a<span class="token punctuation">,</span> ll b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//cin读入优化</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> T<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>T<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cin <span class="token operator">&gt;&gt;</span> tmp<span class="token punctuation">;</span>        flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>ll a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> a <span class="token operator">&lt;=</span> <span class="token number">10001</span><span class="token punctuation">;</span> <span class="token operator">++</span>a<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">//对a枚举</span>            ll b<span class="token punctuation">,</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> mid<span class="token punctuation">;</span>            ll l <span class="token operator">=</span> a<span class="token punctuation">;</span>            ll r <span class="token operator">=</span> <span class="token number">10001</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">//对b二分</span>                mid <span class="token operator">=</span> l <span class="token operator">+</span> <span class="token punctuation">(</span>r <span class="token operator">-</span> l<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>                res <span class="token operator">=</span> <span class="token function">f</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>res <span class="token operator">==</span> tmp<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    b <span class="token operator">=</span> mid<span class="token punctuation">;</span>                    flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>res <span class="token operator">&lt;</span> tmp<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    l <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    r <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>                      <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token comment">//已找到，退出a的枚举</span>        <span class="token punctuation">}</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"YES"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>  <span class="token comment">//输出结果</span>        <span class="token keyword">else</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"NO"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span>ll <span class="token function">f</span><span class="token punctuation">(</span>ll a<span class="token punctuation">,</span> ll b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> a <span class="token operator">*</span> a <span class="token operator">*</span> a <span class="token operator">+</span> b <span class="token operator">*</span> b <span class="token operator">*</span> b<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>思路2：</p><p>AC 版 ✅</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">int</span> T<span class="token punctuation">,</span> flag<span class="token punctuation">;</span>ll x<span class="token punctuation">;</span>set<span class="token operator">&lt;</span>ll<span class="token operator">&gt;</span> s<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//cin读入优化</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">10001</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">1ll</span> <span class="token operator">*</span> i <span class="token operator">*</span> i <span class="token operator">*</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//向s中存入所有可能的a^3</span>    <span class="token punctuation">}</span>    cin <span class="token operator">&gt;&gt;</span> T<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>T<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        cin <span class="token operator">&gt;&gt;</span> x<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>ll b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> b <span class="token operator">*</span> b <span class="token operator">*</span> b <span class="token operator">&lt;</span> x<span class="token punctuation">;</span> b<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment">//枚举b</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>x <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">*</span> b <span class="token operator">*</span> b <span class="token operator">*</span> b<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">//查看(x-b^3)是否在set中</span>                flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"YES"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">else</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"NO"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>vector</code> 超时版 ❌  </p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">int</span> T<span class="token punctuation">,</span> flag<span class="token punctuation">;</span>ll x<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>ll<span class="token operator">&gt;</span> v<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>ll<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>iterator it<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//cin读入优化</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">10001</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">1ll</span> <span class="token operator">*</span> i <span class="token operator">*</span> i <span class="token operator">*</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//1ll是1的long long 形式</span>    <span class="token punctuation">}</span>    cin <span class="token operator">&gt;&gt;</span> T<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>T<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        cin <span class="token operator">&gt;&gt;</span> x<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>ll b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token number">1ll</span> <span class="token operator">*</span> b <span class="token operator">*</span> b <span class="token operator">*</span> b <span class="token operator">&lt;</span> x<span class="token punctuation">;</span> b<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">//使用vector查找时会超时</span>            it <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> x <span class="token operator">-</span> <span class="token number">1ll</span> <span class="token operator">*</span> b <span class="token operator">*</span> b <span class="token operator">*</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>it <span class="token operator">!=</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"YES"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">else</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"NO"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="C：计算个数"><a href="#C：计算个数" class="headerlink" title="C：计算个数"></a>C：计算个数</h3><h4 id="【题目描述】-2"><a href="#【题目描述】-2" class="headerlink" title="【题目描述】"></a>【题目描述】</h4><p>给定一个正整数 $n$，你可以执行以下操作： </p><ul><li>不做处理</li><li>在当前数的左侧拼接一个正整数。如果此前尚未拼接过，则拼接的正整数不能超过原数 $n$ 的一半，否则不能超过上一次被拼接的数的一半。拼接完成后，可以继续按照此规则继续处理，直到不能再加正整数为止，或者不做处理。</li></ul><p>问总共能处理出多少种正整数？</p><h4 id="【输入】-2"><a href="#【输入】-2" class="headerlink" title="【输入】"></a>【输入】</h4><p>输入仅一个正整数 $n(1 ≤ n ≤ 1000)$。</p><h4 id="【输出】-2"><a href="#【输出】-2" class="headerlink" title="【输出】"></a>【输出】</h4><p>输出一个整数，表示能被处理出来的数字的种类数。</p><h4 id="【输入样例】-2"><a href="#【输入样例】-2" class="headerlink" title="【输入样例】"></a>【输入样例】</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token number">4</span><span class="token number">6</span><span class="token number">8</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="【输出样例】-2"><a href="#【输出样例】-2" class="headerlink" title="【输出样例】"></a>【输出样例】</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token number">4</span><span class="token number">6</span><span class="token number">10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><hr><h4 id="【题目分析】-2"><a href="#【题目分析】-2" class="headerlink" title="【题目分析】"></a>【题目分析】</h4><p>本题考查 <strong>递推</strong> 思想。</p><p>以题目中的 8 为例，<code>f(8)</code> 代表 8 拼接后的总个数。</p><p><code>f(8)</code> = <code>f(4)</code> 的个数与 8 拼 + <code>f(3)</code> 的个数与 8 拼 + <code>f(2)</code> 的个数与8拼 + <code>f(1)</code> 的个数与8拼，即  <code>f(8) = f(4) + f(3) + f(2) + f(1)</code>。</p><p>因此从 递推 角度，从前往后推，即可得到每一个 <code>f(n)</code> 拼接后的个数</p><h4 id="【-C-代码】-2"><a href="#【-C-代码】-2" class="headerlink" title="【 C++ 代码】"></a>【 C++ 代码】</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> NMAX <span class="token operator">=</span> <span class="token number">1005</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> tmp<span class="token punctuation">;</span>ll f<span class="token punctuation">[</span>NMAX<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//cin读入优化</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    f<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NMAX<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        f<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> i <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>            f<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> f<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="D：后缀表达式的值"><a href="#D：后缀表达式的值" class="headerlink" title="D：后缀表达式的值"></a>D：后缀表达式的值</h3><h4 id="【题目描述】-3"><a href="#【题目描述】-3" class="headerlink" title="【题目描述】"></a>【题目描述】</h4><p>从键盘读入一个后缀表达式（字符串），只含有 0-9 组成的运算数及加（+）、减（-）、乘（*）、除（/）四种运算符。</p><p>每个运算数之间用一个空格隔开，不需要判断给你的表达式是否合法。</p><h4 id="【输入】-3"><a href="#【输入】-3" class="headerlink" title="【输入】"></a>【输入】</h4><p>一个后缀表达式，以 @ 作为结束标志。</p><p>数据保证输入的运算数均是正整数，且每个数值在运算过程中均不会超过 int 所表示的范围。</p><p>除法当作整除即可。</p><h4 id="【输出】-3"><a href="#【输出】-3" class="headerlink" title="【输出】"></a>【输出】</h4><p>输出一个整数，表示后缀表达式的值。</p><h4 id="【输入样例】-3"><a href="#【输入样例】-3" class="headerlink" title="【输入样例】"></a>【输入样例】</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token number">16</span> <span class="token number">9</span> <span class="token number">4</span> <span class="token number">3</span> <span class="token operator">+</span><span class="token operator">*</span><span class="token operator">-</span>@<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="【输出样例】-3"><a href="#【输出样例】-3" class="headerlink" title="【输出样例】"></a>【输出样例】</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token operator">-</span><span class="token number">47</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h4 id="【题目分析】-3"><a href="#【题目分析】-3" class="headerlink" title="【题目分析】"></a>【题目分析】</h4><p>本题考查 STL 中的 <code>stack</code> ，需要在理解 后缀表达式 的基础上，利用 <code>stack</code> 书写相应代码</p><blockquote><p>后缀表达式 相关知识点博客：<a href="http://t.csdn.cn/vvkbP">http://t.csdn.cn/vvkbP</a></p></blockquote><p>🍉 PS：本题数据的读取推荐使用 <code>scanf</code>，<code>cin</code> 在读取单个字符时，会跳过空格，而 <code>scanf</code>不会</p><h4 id="【-C-代码】-3"><a href="#【-C-代码】-3" class="headerlink" title="【 C++ 代码】"></a>【 C++ 代码】</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> s<span class="token punctuation">;</span><span class="token keyword">char</span> c<span class="token punctuation">;</span><span class="token keyword">int</span> sum<span class="token punctuation">,</span> tmp<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment">//利用scanf，每次读取一个字符（包括空格）</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token char">'@'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token comment">//遇到数字，继续读入</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">&gt;=</span> <span class="token char">'0'</span> <span class="token operator">&amp;&amp;</span> c <span class="token operator">&lt;=</span> <span class="token char">'9'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             tmp <span class="token operator">=</span> tmp <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> c <span class="token operator">-</span> <span class="token char">'0'</span><span class="token punctuation">;</span>                  <span class="token comment">//遇到空格，将当前数字元素入栈</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token char">' '</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>            tmp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                  <span class="token comment">//遇到运算符，进行运算</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token char">'+'</span> <span class="token operator">||</span> c <span class="token operator">==</span> <span class="token char">'-'</span> <span class="token operator">||</span> c <span class="token operator">==</span> <span class="token char">'*'</span> <span class="token operator">||</span> c <span class="token operator">==</span> <span class="token char">'/'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">//弹出主栈顶元素num2（主栈顶元素放在操作符右边）和次栈顶元素num1</span>            <span class="token keyword">int</span> num2 <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            s<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> num1 <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            s<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token comment">//计算</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token char">'+'</span><span class="token punctuation">)</span> num2 <span class="token operator">=</span> num1 <span class="token operator">+</span> num2<span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token char">'-'</span><span class="token punctuation">)</span> num2 <span class="token operator">=</span> num1 <span class="token operator">-</span> num2<span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token char">'*'</span><span class="token punctuation">)</span> num2 <span class="token operator">=</span> num1 <span class="token operator">*</span> num2<span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token char">'/'</span><span class="token punctuation">)</span> num2 <span class="token operator">=</span> num1 <span class="token operator">/</span> num2<span class="token punctuation">;</span>                      <span class="token comment">//将计算后的元素再次入栈</span>            s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>      cout <span class="token operator">&lt;&lt;</span> s<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>  <span class="token comment">//当前栈顶元素即为运算结果</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="E：做蛋糕"><a href="#E：做蛋糕" class="headerlink" title="E：做蛋糕"></a>E：做蛋糕</h3><h4 id="【题目描述】-4"><a href="#【题目描述】-4" class="headerlink" title="【题目描述】"></a>【题目描述】</h4><p>你是一家蛋糕店的老板，这一天你接到了 $N$ 张蛋糕订单。</p><p>店内有充足的原材料（奶油、淀粉、鸡蛋）可以用于制作蛋糕，每种原材料按份存储，每份都有一个美味度。已知第 $i$ 份订单的蛋糕需要使用 $x_i$ 份奶油、$y_i$ 份淀粉以及 $z_i$ 份鸡蛋制作。</p><p>作为店长，你决定按顺序每次取目前最好的材料制作蛋糕。换句话说，你会按订单的给定顺序制作蛋糕，对于第一份蛋糕，会使用美味度最高的 $x_i$ 份奶油、$y_i$ 份淀粉以及 $z_i$ 份鸡蛋进行制作；对于第二份蛋糕，会使用剩下的美味度最高的 $x_2$ 份奶油、$y_2$ 份淀粉以及 $z_2$ 份鸡蛋进行制作；以此类推。</p><p>已知一份蛋糕的美味度等同于所有使用掉的原材料的美味度之和，问每份蛋糕的美味度分别是多少？</p><h4 id="【输入】-4"><a href="#【输入】-4" class="headerlink" title="【输入】"></a>【输入】</h4><p>第一行包含三个正整数 $X,Y,Z(1 \le X,Y,Z \le 10^5)$，分别表示店内一开始拥有的奶油、淀粉以及鸡蛋的份数。</p><p>第二行包含 $X$ 个正整数，表示每份奶油的美味度。</p><p>第三行包含 $Y$ 个正整数，表示每份淀粉的美味度。</p><p>第四行包含 $Z$ 个正整数，表示每份鸡蛋的美味度。</p><p>第五行包含一个正整数 $N(1≤ N ≤ min(X,Y, Z))$，表示订单的数量。</p><p>其后 $N$ 行，每行包含三个正整数 $x_i,y_i,z_i(1 \le x_i,y_i,z_i \le 10)$，分别表示制作每份订单的蛋糕所需要使用的奶油、淀粉及鸡蛋的份数。</p><ul><li>每份材料的美味度是一个不超过 $10000$ 的正整数。</li><li>数据保证 $\sum x_{i} \leq X, \sum y_{i} \leq Y, \sum z_{i} \leq Z$</li></ul><h4 id="【输出】-4"><a href="#【输出】-4" class="headerlink" title="【输出】"></a>【输出】</h4><p>输出 $N$ 行，每行包含一个正整数，表示每份订单的蛋糕的美味度。</p><h4 id="【输入样例】-4"><a href="#【输入样例】-4" class="headerlink" title="【输入样例】"></a>【输入样例】</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token number">3</span> <span class="token number">4</span> <span class="token number">5</span><span class="token number">3</span> <span class="token number">1</span> <span class="token number">4</span><span class="token number">1</span> <span class="token number">5</span> <span class="token number">9</span> <span class="token number">2</span><span class="token number">6</span> <span class="token number">5</span> <span class="token number">3</span> <span class="token number">5</span> <span class="token number">8</span><span class="token number">2</span><span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="【输出样例】-4"><a href="#【输出样例】-4" class="headerlink" title="【输出样例】"></a>【输出样例】</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token number">21</span><span class="token number">26</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr><h4 id="【题目分析】-4"><a href="#【题目分析】-4" class="headerlink" title="【题目分析】"></a>【题目分析】</h4><p>本题可以使用 STL 中的很多容器，若选择 <code>vector、deque</code> 等，只需读入数据后，用 <code>sort()</code> 对其降序排序即可；若选择 <code>priority_queue</code>，其默认形式为 <strong>大顶堆</strong>，符合题目要求，较为推荐。</p><h4 id="【-C-代码】-4"><a href="#【-C-代码】-4" class="headerlink" title="【 C++ 代码】"></a>【 C++ 代码】</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> X<span class="token punctuation">,</span> Y<span class="token punctuation">,</span> Z<span class="token punctuation">,</span> N<span class="token punctuation">,</span> tmp<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">;</span>priority_queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> qx<span class="token punctuation">;</span>  <span class="token comment">//定义3个优先队列，默认为大顶堆，美食度高的元素排在队首</span>priority_queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> qy<span class="token punctuation">;</span>priority_queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> qz<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//cin读入优化</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//读入店铺食材库存</span>    cin <span class="token operator">&gt;&gt;</span> X <span class="token operator">&gt;&gt;</span> Y <span class="token operator">&gt;&gt;</span> Z<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> X <span class="token operator">+</span> Y <span class="token operator">+</span> Z<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        cin <span class="token operator">&gt;&gt;</span> tmp<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> X<span class="token punctuation">)</span>            qx<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//食材根据美味度入队</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> X <span class="token operator">+</span> Y<span class="token punctuation">)</span>            qy<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            qz<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//读入订单</span>    cin <span class="token operator">&gt;&gt;</span> N<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token comment">//每个订单的美食度</span>        cin <span class="token operator">&gt;&gt;</span> x <span class="token operator">&gt;&gt;</span> y <span class="token operator">&gt;&gt;</span> z<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> x <span class="token operator">+</span> y <span class="token operator">+</span> z<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>                sum <span class="token operator">+=</span> qx<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//根据订单要求，选择食材（食材出队）</span>                qx<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> x <span class="token operator">+</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>                sum <span class="token operator">+=</span> qy<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                qy<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                sum <span class="token operator">+=</span> qz<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                qz<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        cout <span class="token operator">&lt;&lt;</span> sum <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="F：查资料"><a href="#F：查资料" class="headerlink" title="F：查资料"></a>F：查资料</h3><h4 id="【题目描述】-5"><a href="#【题目描述】-5" class="headerlink" title="【题目描述】"></a>【题目描述】</h4><p>你忽然被布置了一篇论文，并且时间已经所剩无几！众所周知，写论文需要引用较多的参考文献，因此你需要花费一定的时间去网上寻找资料。</p><p>你需要按顺序查找一些资料，每份资料都可以用一个正整数表示。每次上网查找完资料后，你 <strong>都会</strong> 把这份资料存进你的电脑。</p><p>此后，如果你需要再次查找这份资料，并且发现电脑上存着这份资料，就不需要再花更多的时间上网找了。</p><p>但现在有一个新的问题，你的电脑容量不大够了，只能够让你存最多 $m$ 份资料。你认为新查到的资料总是比以前查的资料更有价值，因此每次你会把 <strong>最早</strong> 存入电脑的那份资料删除，腾出空间来存新的资料。</p><p>给定你要查询的资料的顺序，问你总共需要 <strong>上网查找</strong> 多少次？</p><p>初始时电脑上没有任何资料。</p><h4 id="【输入】-5"><a href="#【输入】-5" class="headerlink" title="【输入】"></a>【输入】</h4><p>第一行包含两个正整数 $n,m(1≤n,m≤10^5)$，分别表示需要查找的次数以及电脑的最大容量。</p><p>第二行包含 $n$ 个正整数 $a_1,a_2,…,a_n(1 \le a_i \le5000)$，表示每次要查的资料。</p><h4 id="【输出】-5"><a href="#【输出】-5" class="headerlink" title="【输出】"></a>【输出】</h4><p>输出一个整数，表示需要上网查的次数。</p><h4 id="【输入样例】-5"><a href="#【输入样例】-5" class="headerlink" title="【输入样例】"></a>【输入样例】</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token number">7</span> <span class="token number">3</span><span class="token number">1</span> <span class="token number">9</span> <span class="token number">1</span> <span class="token number">9</span> <span class="token number">8</span> <span class="token number">10</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="【输出样例】-5"><a href="#【输出样例】-5" class="headerlink" title="【输出样例】"></a>【输出样例】</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token number">5</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h4 id="【题目分析】-5"><a href="#【题目分析】-5" class="headerlink" title="【题目分析】"></a>【题目分析】</h4><p>本题使用 STL 中的 <code>deque</code>，会比较方便。（本题涉及查询，而 容器适配器 <code>queue</code> 不支持查询，故推荐使用<code>deque</code> ）</p><h4 id="【-C-代码】-5"><a href="#【-C-代码】-5" class="headerlink" title="【 C++ 代码】"></a>【 C++ 代码】</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> tmp<span class="token punctuation">,</span> cnt<span class="token punctuation">;</span>deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> dq<span class="token punctuation">;</span>deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>iterator it<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//cin读入优化</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> m<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        cin <span class="token operator">&gt;&gt;</span> tmp<span class="token punctuation">;</span>        <span class="token comment">//查询当前资料是否在电脑中</span>        it <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>dq<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dq<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>it <span class="token operator">==</span> dq<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//当前电脑中未找到</span>            <span class="token comment">//查找次数+1</span>            cnt<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token comment">//将当前新资料放入电脑中</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>dq<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">//若电脑容量已满，弹出首资料</span>                dq<span class="token punctuation">.</span><span class="token function">pop_front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            dq<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> cnt <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="G：明明的随机数"><a href="#G：明明的随机数" class="headerlink" title="G：明明的随机数"></a>G：明明的随机数</h3><h4 id="【题目描述】-6"><a href="#【题目描述】-6" class="headerlink" title="【题目描述】"></a>【题目描述】</h4><p>先用计算机生成了 $N$ 个 1 到 1000 之间的随机整数 $N≤100$，对于其中重复的数字，只保留一个，把其余相同的数去掉，不同的数对应着不同的学生的学号。然后再把这些数从小到大排序，按照排好的顺序去找同学做调查。请你协助明明完成 “去重” 与 “排序” 的工作。</p><h4 id="【输入】-6"><a href="#【输入】-6" class="headerlink" title="【输入】"></a>【输入】</h4><p>有 2 行，第 1 行为 1 个正整数，表示所生成的随机数的个数：$N$</p><p>第 2 行有 $N$ 个用空格隔开的正整数，为所产生的随机数。</p><h4 id="【输出】-6"><a href="#【输出】-6" class="headerlink" title="【输出】"></a>【输出】</h4><p>2 行，第 1 行为 1 个正整数M，表示不相同的随机数的个数。第 2 行为 $M$ 个用空格隔开的正整数，为从小到大排好序的不相同的随机数。</p><h4 id="【输入样例】-6"><a href="#【输入样例】-6" class="headerlink" title="【输入样例】"></a>【输入样例】</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token number">10</span><span class="token number">20</span> <span class="token number">40</span> <span class="token number">32</span> <span class="token number">67</span> <span class="token number">40</span> <span class="token number">20</span> <span class="token number">89</span> <span class="token number">300</span> <span class="token number">400</span> <span class="token number">15</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="【输出样例】-6"><a href="#【输出样例】-6" class="headerlink" title="【输出样例】"></a>【输出样例】</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token number">8</span><span class="token number">15</span> <span class="token number">20</span> <span class="token number">32</span> <span class="token number">40</span> <span class="token number">67</span> <span class="token number">89</span> <span class="token number">300</span> <span class="token number">400</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr><h4 id="【题目分析】-6"><a href="#【题目分析】-6" class="headerlink" title="【题目分析】"></a>【题目分析】</h4><p>本题考查 STL 中的 <code>set</code> ，<code>set</code> 容器自带 ”去重“ 和 ”排序“ 的效果，非常适合本题。</p><h4 id="【-C-代码】-6"><a href="#【-C-代码】-6" class="headerlink" title="【 C++ 代码】"></a>【 C++ 代码】</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> N<span class="token punctuation">,</span> tmp<span class="token punctuation">;</span>set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> s<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> N<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        cin <span class="token operator">&gt;&gt;</span> tmp<span class="token punctuation">;</span>        s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//set容器默认升序</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> t<span class="token operator">:</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> t <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 信息奥赛题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 信息奥赛 </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu下安装Clang编译器</title>
      <link href="/2023/03/25/ubuntu/"/>
      <url>/2023/03/25/ubuntu/</url>
      
        <content type="html"><![CDATA[<h1 id="【Linux】Ubuntu-22-04-安装-Clang-编译器"><a href="#【Linux】Ubuntu-22-04-安装-Clang-编译器" class="headerlink" title="【Linux】Ubuntu 22.04 安装 Clang 编译器"></a>【Linux】Ubuntu 22.04 安装 Clang 编译器</h1><p><img src="https://ricky-typora-notes.oss-cn-hangzhou.aliyuncs.com/Ubuntu-22-04-LTSpng.png" alt="Ubuntu-22-04-LTS"></p><p>摊主将在本文中介绍如何在 Ubuntu 上安装 Clang 编译器。</p><hr><h2 id="Clang-介绍-☘️"><a href="#Clang-介绍-☘️" class="headerlink" title="Clang 介绍 ☘️"></a>Clang 介绍 ☘️</h2><p><strong>Clang</strong> 是一款由 LLVM 项目开发的 C、C++、Objective-C 和 Objective-C++ <strong>编译器</strong>。它被设计成可以替代 GCC（GNU Compiler Collection）编译器，并且在许多方面都比 GCC 更优秀，可以提供更好的编译速度、准确性和兼容性。</p><h2 id="系统版本-🖥"><a href="#系统版本-🖥" class="headerlink" title="系统版本 🖥"></a>系统版本 🖥</h2><p>系统版本：Ubuntu 22.04 LTS</p><h2 id="安装步骤-🚀"><a href="#安装步骤-🚀" class="headerlink" title="安装步骤 🚀"></a>安装步骤 🚀</h2><ol><li>打开终端并更新系统软件包：在终端中输入以下命令并执行。</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> update<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://ricky-typora-notes.oss-cn-hangzhou.aliyuncs.com/image-20230322232323046.png" alt="sudo apt-get update"></p><ol start="2"><li>安装 Clang 编译器：在终端中输入以下命令并执行。（安装过程请耐心等待）</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> clang<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://ricky-typora-notes.oss-cn-hangzhou.aliyuncs.com/image-20230322232633305.png" alt="sudo apt-get install clang"></p><ol start="3"><li>检查 Clang 版本：在终端中输入以下命令并执行。</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">clang <span class="token parameter variable">--version</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://ricky-typora-notes.oss-cn-hangzhou.aliyuncs.com/image-20230322232732832.png" alt="clang --version"></p><p>如果出现 Clang 版本信息，则表示 Clang 编译器已经安装成功。</p><hr><h2 id="C语言编译测试-🧑🏻‍💻"><a href="#C语言编译测试-🧑🏻‍💻" class="headerlink" title="C语言编译测试 🧑🏻‍💻"></a>C语言编译测试 🧑🏻‍💻</h2><ol><li>创建一个名为 <code>helloworld.c</code> 的文件，输入以下代码：</li></ol><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hello, World!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>打开终端，进入 <code>helloworld.c</code> 文件所在的目录。</li><li>输入以下命令来使用 Clang 编译程序：</li></ol><pre class="line-numbers language-c" data-language="c"><code class="language-c">clang <span class="token operator">-</span>o helloworld helloworld<span class="token punctuation">.</span>c<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中，<code>clang</code> 是 Clang 编译器的可执行文件，<code>-o</code> 选项表示输出文件名，<code>helloworld</code> 是输出的可执行文件的名称，<code>helloworld.c</code> 是源代码文件的名称。</p><ol start="4"><li>执行程序：</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./helloworld<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输出结果应该是：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Hello, World<span class="token operator">!</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>说明当前 C 语言程序已经成功编译并运行了。</p><hr><h2 id="C-编译测试-🧑🏻‍💻"><a href="#C-编译测试-🧑🏻‍💻" class="headerlink" title="C++编译测试 🧑🏻‍💻"></a>C++编译测试 🧑🏻‍💻</h2><ol><li>创建一个名为 <code>test.cpp</code> 的文件，输入以下代码：</li></ol><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Hello, World!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>打开终端，进入 <code>test.cpp</code> 文件所在的目录。</li><li>输入以下命令来使用 Clang 编译程序：</li></ol><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">clang<span class="token operator">++</span> <span class="token operator">-</span>o test test<span class="token punctuation">.</span>cpp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中，<code>clang++</code> 是 Clang 编译器的可执行文件，<code>-o</code> 选项表示输出文件名，<code>test</code> 是输出的可执行文件的名称，<code>test.cpp</code> 是源代码文件的名称。 </p><ol start="4"><li>执行程序：</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./test<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输出结果应该是：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Hello, World<span class="token operator">!</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>说明当前 C++ 语言程序已经成功编译并运行了。</p>]]></content>
      
      
      <categories>
          
          <category> Linux基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Ubuntu </tag>
            
            <tag> 软件安装教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的第一篇博客</title>
      <link href="/2023/03/24/wo-de-di-yi-pian-bo-ke/"/>
      <url>/2023/03/24/wo-de-di-yi-pian-bo-ke/</url>
      
        <content type="html"><![CDATA[<h1 id="我的第一篇博客"><a href="#我的第一篇博客" class="headerlink" title="我的第一篇博客"></a>我的第一篇博客</h1><p>Hi，大家好呀。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
