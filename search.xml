<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>信息奥赛题解｜踩方格</title>
      <link href="/2023/04/09/xin-xi-ao-sai-ti-jie-cai-fang-ge/"/>
      <url>/2023/04/09/xin-xi-ao-sai-ti-jie-cai-fang-ge/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 信息奥赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 信息奥赛 </tag>
            
            <tag> C++ </tag>
            
            <tag> 递推 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Acwing第87场周赛复盘</title>
      <link href="/2023/04/09/acwing-di-87-chang-zhou-sai-fu-pan/"/>
      <url>/2023/04/09/acwing-di-87-chang-zhou-sai-fu-pan/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Acwing周赛复盘 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 信息奥赛 </tag>
            
            <tag> Acwing </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Acwing第86场周赛复盘</title>
      <link href="/2023/04/08/acwing-di-86-chang-zhou-sai-fu-pan/"/>
      <url>/2023/04/08/acwing-di-86-chang-zhou-sai-fu-pan/</url>
      
        <content type="html"><![CDATA[<h1 id="【Acwing-周赛复盘】第86场周赛复盘（2023-1-14）"><a href="#【Acwing-周赛复盘】第86场周赛复盘（2023-1-14）" class="headerlink" title="【Acwing 周赛复盘】第86场周赛复盘（2023.1.14）"></a>【Acwing 周赛复盘】第86场周赛复盘（2023.1.14）</h1><h2 id="周赛复盘-✍️"><a href="#周赛复盘-✍️" class="headerlink" title="周赛复盘 ✍️"></a>周赛复盘 ✍️</h2><blockquote><p>本周个人排名：678/2358（28.7%）</p><p>AC情况：2/3</p><p>这是博主参加的第一次周赛，深刻体会到了世界的参差 😂</p><p>看到排名 TOP3 的大佬都是不到 5 分钟内就 AK 了，真是恐怖如斯（ORZ）</p><p>对比下来，自己做满 75 分钟并且只 AC 了 2 题真是弱爆了。。。</p><p>希望未来也能继续努力，紧跟大佬们的步伐，继续加油 💪</p></blockquote><p><img src="http://ricky-typora-notes.oss-cn-hangzhou.aliyuncs.com/2023-02-21-170401.jpg" alt="周赛rank图"></p><h2 id="周赛信息-📚"><a href="#周赛信息-📚" class="headerlink" title="周赛信息 📚"></a>周赛信息 📚</h2><p><strong>时间</strong>：2023年1月14日19：00-20：15</p><p><strong>竞赛链接</strong>：<a href="https://www.acwing.com/activity/content/2794/">https://www.acwing.com/activity/content/2794/</a></p><p><strong>y总直播间</strong>：<a href="http://live.bilibili.com/21871779">http://live.bilibili.com/21871779</a></p><p><strong>y总录播讲解视频</strong>：<a href="https://www.bilibili.com/video/BV1284y1h7ip/?share_source=copy_web&amp;vd_source=33934722b558a5cefa750c1a9be72249">【AcWing杯 - 第86场周赛讲解】</a></p><h2 id="题目列表-🧑🏻‍💻"><a href="#题目列表-🧑🏻‍💻" class="headerlink" title="题目列表 🧑🏻‍💻"></a>题目列表 🧑🏻‍💻</h2><table><thead><tr><th align="center">题目名称</th><th align="center">原题链接</th><th align="center">难度</th></tr></thead><tbody><tr><td align="center">4794. 健身</td><td align="center"><a href="https://www.acwing.com/problem/content/4797/">原题链接</a></td><td align="center">简单 🟢</td></tr><tr><td align="center">4795. 安全区域</td><td align="center"><a href="https://www.acwing.com/problem/content/4798/">原题链接</a></td><td align="center">中等 🟡</td></tr><tr><td align="center">4796. 删除序列</td><td align="center"><a href="https://www.acwing.com/problem/content/4799/">原题链接</a></td><td align="center">困难 🔴</td></tr></tbody></table><hr><h2 id="题解-🚀"><a href="#题解-🚀" class="headerlink" title="题解 🚀"></a>题解 🚀</h2><h3 id="【题目A】健身"><a href="#【题目A】健身" class="headerlink" title="【题目A】健身"></a>【题目A】健身</h3><h4 id="【题目描述】"><a href="#【题目描述】" class="headerlink" title="【题目描述】"></a>【题目描述】</h4><p>李华一共要进行 $n$ 组健身训练。</p><p>其中，第 $i$ 组训练的<strong>时长</strong>为 $a_i$。</p><p>李华只做三种运动：胸部（<code>chest</code>）运动、二头肌（<code>biceps</code>）运动、背部（<code>back</code>）运动。</p><p>而且，三种运动是循环训练的，也就是说他第一组训练是胸部运动，第二组训练是二头肌运动，第三组训练是背部运动，第四组训练是胸部运动，第五组训练是二头肌运动……以此类推直到做完第 $n$ 组训练。</p><p>请你计算，他做哪种运动的 <strong>时长</strong> 最长。</p><h4 id="【输入】"><a href="#【输入】" class="headerlink" title="【输入】"></a>【输入】</h4><p>第一行包含整数 $n$。</p><p>第二行包含 $n$ 个整数 $a_1,a_2,…,a_n$。</p><h4 id="【输出】"><a href="#【输出】" class="headerlink" title="【输出】"></a>【输出】</h4><p>共一行，如果训练时长最长的运动为：</p><ul><li>胸部运动，则输出 <code>chest</code>。</li><li>二头肌运动，则输出 <code>biceps</code>。</li><li>背部运动，则输出 <code>back</code>。</li></ul><p>数据保证训练时长最长的运动是唯一的。</p><h4 id="【数据范围】"><a href="#【数据范围】" class="headerlink" title="【数据范围】"></a>【数据范围】</h4><p>前 $3$ 个测试点满足 $1 \le n \le 7$。<br>所有测试点满足 $1 \le n \le 20$，$1 \le a_i \le 25$。</p><h4 id="【输入样例1】"><a href="#【输入样例1】" class="headerlink" title="【输入样例1】"></a>【输入样例1】</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token number">2</span><span class="token number">2</span> <span class="token number">8</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="【输出样例1】"><a href="#【输出样例1】" class="headerlink" title="【输出样例1】"></a>【输出样例1】</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">biceps<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="【输入样例2】"><a href="#【输入样例2】" class="headerlink" title="【输入样例2】"></a>【输入样例2】</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token number">3</span><span class="token number">5</span> <span class="token number">1</span> <span class="token number">10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="【输出样例2】"><a href="#【输出样例2】" class="headerlink" title="【输出样例2】"></a>【输出样例2】</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">back<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="【输入样例3】"><a href="#【输入样例3】" class="headerlink" title="【输入样例3】"></a>【输入样例3】</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token number">7</span><span class="token number">3</span> <span class="token number">3</span> <span class="token number">2</span> <span class="token number">7</span> <span class="token number">9</span> <span class="token number">6</span> <span class="token number">8</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="【输出样例3】"><a href="#【输出样例3】" class="headerlink" title="【输出样例3】"></a>【输出样例3】</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">chest<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="【原题链接】"><a href="#【原题链接】" class="headerlink" title="【原题链接】"></a>【原题链接】</h4><p><a href="https://www.acwing.com/problem/content/4797/">https://www.acwing.com/problem/content/4797/</a></p><hr><h4 id="【题目分析】"><a href="#【题目分析】" class="headerlink" title="【题目分析】"></a>【题目分析】</h4><p>签到题，简单模拟即可。（但是现场编写的代码有很多可以改进和优化的地方，见下面「<strong>代码对比总结</strong>」部分）</p><h4 id="【复盘后的优化代码】✅"><a href="#【复盘后的优化代码】✅" class="headerlink" title="【复盘后的优化代码】✅"></a>【复盘后的优化代码】✅</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> s<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//cin读入优化</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>    <span class="token keyword">int</span> x<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        cin <span class="token operator">&gt;&gt;</span> x<span class="token punctuation">;</span>        <span class="token comment">// 下面的写法避免了多个if</span>        s<span class="token punctuation">[</span>i <span class="token operator">%</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">+=</span> x<span class="token punctuation">;</span>  <span class="token comment">// s[1]存储chest、s[2]存储biceps、s[0]存储back</span>    <span class="token punctuation">}</span>    <span class="token comment">// 找到最大值下标</span>    <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> s<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span>            k <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>      <span class="token comment">// 输出结果</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"chest"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"biceps"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">else</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"back"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="【周赛现场-AC-代码】"><a href="#【周赛现场-AC-代码】" class="headerlink" title="【周赛现场 AC 代码】"></a>【周赛现场 AC 代码】</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> tmp<span class="token punctuation">;</span><span class="token keyword">int</span> chest<span class="token punctuation">,</span>biceps<span class="token punctuation">,</span>back<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//cin读入优化</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        cin <span class="token operator">&gt;&gt;</span> tmp<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            chest <span class="token operator">+=</span> tmp<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            biceps <span class="token operator">+=</span> tmp<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            back <span class="token operator">+=</span> tmp<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token comment">//    cout &lt;&lt; chest &lt;&lt; " " &lt;&lt; biceps &lt;&lt; " " &lt;&lt; back &lt;&lt; endl;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>chest <span class="token operator">&gt;</span> biceps<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>chest <span class="token operator">&gt;</span> back<span class="token punctuation">)</span> <span class="token punctuation">{</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"chest"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"back"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>biceps <span class="token operator">&gt;</span> back<span class="token punctuation">)</span> <span class="token punctuation">{</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"biceps"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"back"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="【代码总结分析】"><a href="#【代码总结分析】" class="headerlink" title="【代码总结分析】"></a>【代码总结分析】</h4><ul><li><code>s[i%3] += x</code> 的思路值得借鉴，省去了多个 <code>if</code> 判断</li><li>寻找最大值下标的方式值得借鉴，优化了直接比较的多 if 判断</li></ul><hr><h3 id="【题目B】安全区域"><a href="#【题目B】安全区域" class="headerlink" title="【题目B】安全区域"></a>【题目B】安全区域</h3><h4 id="【题目描述】-1"><a href="#【题目描述】-1" class="headerlink" title="【题目描述】"></a>【题目描述】</h4><p>给定一个 $n×n$ 的方格棋盘和 $m$ 个国际象棋中的车。</p><p>对于一个方格，如果该方格满足以下两个条件中的至少一个，则该方格会被车攻击到：</p><ul><li>该方格内有车。</li><li>至少有一个车与该方格位于同一行或同一列。</li></ul><p>现在，我们要将 $m$ 个车逐个放入到棋盘中，其中第 $i$ 个车放到棋盘的第 $x_i$ 行第 $y_i$ 列的方格中。</p><p>车的编号从 $1$ 到 $m$，行/列的编号从 $1$ 到 $n$。</p><p>保证任意两个车不会放到同一个方格中。</p><p>对于 $1 \le i \le m$，请你计算，将前 $i$ 个车放入到棋盘中后，有多少个方格不会被车攻击到。</p><h4 id="【输入】-1"><a href="#【输入】-1" class="headerlink" title="【输入】"></a>【输入】</h4><p>第一行包含两个整数 $n,m$。</p><p>接下来 $m$ 行，其中第 $i$ 行包含两个整数 $x_i,y_i$，表示第 $i$ 个车放到棋盘的第 $x_i$ 行第 $y_i$ 列的方格中。</p><h4 id="【输出】-1"><a href="#【输出】-1" class="headerlink" title="【输出】"></a>【输出】</h4><p>共 1 行，其中第 $i$ 行输出将前 $i$ 个车放入到棋盘中后，不会被车攻击到的方格数量。</p><h4 id="【数据范围】-1"><a href="#【数据范围】-1" class="headerlink" title="【数据范围】"></a>【数据范围】</h4><p>前 $3$ 个测试点满足 $1 \le m \le 3$。<br>所有测试点满足 $1 \le n \le 10^5$，$1 \le m \le min(10^5,n^2)$，$1 \le x_i,y_i \le n$。</p><h4 id="【输入样例1】-1"><a href="#【输入样例1】-1" class="headerlink" title="【输入样例1】"></a>【输入样例1】</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token number">3</span> <span class="token number">3</span><span class="token number">1</span> <span class="token number">1</span><span class="token number">3</span> <span class="token number">1</span><span class="token number">2</span> <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="【输出样例1】-1"><a href="#【输出样例1】-1" class="headerlink" title="【输出样例1】"></a>【输出样例1】</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token number">4</span> <span class="token number">2</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="【输入样例2】-1"><a href="#【输入样例2】-1" class="headerlink" title="【输入样例2】"></a>【输入样例2】</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token number">5</span> <span class="token number">2</span><span class="token number">1</span> <span class="token number">5</span><span class="token number">5</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="【输出样例2】-1"><a href="#【输出样例2】-1" class="headerlink" title="【输出样例2】"></a>【输出样例2】</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token number">16</span> <span class="token number">9</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="【输入样例3】-1"><a href="#【输入样例3】-1" class="headerlink" title="【输入样例3】"></a>【输入样例3】</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token number">100000</span> <span class="token number">1</span><span class="token number">300</span> <span class="token number">400</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="【输出样例3】-1"><a href="#【输出样例3】-1" class="headerlink" title="【输出样例3】"></a>【输出样例3】</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token number">9999800001</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="【原题链接】-1"><a href="#【原题链接】-1" class="headerlink" title="【原题链接】"></a>【原题链接】</h4><p><a href="https://www.acwing.com/problem/content/4798/">https://www.acwing.com/problem/content/4798/</a></p><hr><h4 id="【题目分析】-1"><a href="#【题目分析】-1" class="headerlink" title="【题目分析】"></a>【题目分析】</h4><p>思维题，需要通过 <strong>数学推导</strong> 的方式，得到未被攻击的方格数数量为：$(n-c)*(n-r)$，其中 $c,r$ 为被攻击的列数、行数</p><p>🍉 PS：本题数据范围较大，需要使用 <code>long long</code> 类型，不然会报错。（在公式前强制转换即可：<code>(ll)(n-c)*(n-r)</code>）</p><h4 id="【复盘后的优化代码】✅-1"><a href="#【复盘后的优化代码】✅-1" class="headerlink" title="【复盘后的优化代码】✅"></a>【复盘后的优化代码】✅</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e5</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//cin读入优化</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> m<span class="token punctuation">;</span>    <span class="token keyword">int</span> row <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> col <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        cin <span class="token operator">&gt;&gt;</span> x <span class="token operator">&gt;&gt;</span> y<span class="token punctuation">;</span>            <span class="token comment">// 统计当前被攻击的行数、列数</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>a<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span> a<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> row<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>b<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span> b<span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> col<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token comment">// 求剩余个数的公式，该形式容易推导和记忆</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>ll<span class="token punctuation">)</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> row<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> col<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="【周赛现场-AC-代码】-1"><a href="#【周赛现场-AC-代码】-1" class="headerlink" title="【周赛现场 AC 代码】"></a>【周赛现场 AC 代码】</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e5</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>ll ans<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//cin读入优化</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> m<span class="token punctuation">;</span>    ll sum <span class="token operator">=</span> <span class="token punctuation">(</span>ll<span class="token punctuation">)</span> n <span class="token operator">*</span> n<span class="token punctuation">;</span>    <span class="token keyword">int</span> row <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> col <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        cin <span class="token operator">&gt;&gt;</span> x <span class="token operator">&gt;&gt;</span> y<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>a<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span> a<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> row<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>b<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span> b<span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> col<span class="token operator">++</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>ll<span class="token punctuation">)</span> sum <span class="token operator">-</span> <span class="token punctuation">(</span>ll<span class="token punctuation">)</span> row <span class="token operator">*</span> n <span class="token operator">-</span> <span class="token punctuation">(</span>ll<span class="token punctuation">)</span> col <span class="token operator">*</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> row<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="【代码对比总结】"><a href="#【代码对比总结】" class="headerlink" title="【代码对比总结】"></a>【代码对比总结】</h4><ul><li>推导的公式，可以写成 $(n-c)*(n-r)$ 这样更加 <strong>简洁且容易记忆</strong> 的形式。</li><li>在使用 <code>(ll)</code> 的 <strong>强制转换</strong> 时，需要注意 <strong>哪些项会爆 int</strong>。（本次周赛敲代码时，由于没有考虑该问题，以为在最前面加上 <code>(ll)</code> 就能整体转换，导致 <code>(ll) sum - row * n - col * (n - row)</code> 这样 爆int 的错误没能被及时发现，极大的影响了 AC 时间和心态）</li></ul><hr><h3 id="【题目C】删除序列"><a href="#【题目C】删除序列" class="headerlink" title="【题目C】删除序列"></a>【题目C】删除序列</h3><h4 id="【题目描述】-2"><a href="#【题目描述】-2" class="headerlink" title="【题目描述】"></a>【题目描述】</h4><p>给定一个长度为 $n$ 的正整数序列 $a_1,a_2,…,a_n$。</p><p>你可以进行任意次删除操作。</p><p>每次删除操作分为两步：</p><ol><li>选择序列中的 <strong>一个</strong> 元素（不妨设其元素值为 $x$），并将这 <strong>一个</strong> 元素删除，这可以给你加 $x$ 分。</li><li>将 <strong>所有</strong> 的 <strong>元素值</strong> 为 $x−1$ 和 $x+1$ 的元素（如果有的话）从序列中删除，这不会给你带来任何分数。</li></ol><p>请计算，通过删除操作，你可以获得的最大得分。  </p><h4 id="【输入】-2"><a href="#【输入】-2" class="headerlink" title="【输入】"></a>【输入】</h4><p>第一行包含整数 $n$。</p><p>第二行包含 $n$ 个正整数 $a_1,a_2,…,a_n$。</p><h4 id="【输出】-2"><a href="#【输出】-2" class="headerlink" title="【输出】"></a>【输出】</h4><p>一个整数，表示可以获得的最大得分。</p><h4 id="【数据范围】-2"><a href="#【数据范围】-2" class="headerlink" title="【数据范围】"></a>【数据范围】</h4><p>前 $6$ 个测试点满足 $1 \le n \le 10$。</p><p>所有测试点满足 $1 \le n \le 10^5$，$1 \le a_i \le 10^5$。</p><h4 id="【输入样例1】-2"><a href="#【输入样例1】-2" class="headerlink" title="【输入样例1】"></a>【输入样例1】</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token number">2</span><span class="token number">1</span> <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="【输出样例1】-2"><a href="#【输出样例1】-2" class="headerlink" title="【输出样例1】"></a>【输出样例1】</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="【输入样例2】-2"><a href="#【输入样例2】-2" class="headerlink" title="【输入样例2】"></a>【输入样例2】</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token number">3</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="【输出样例2】-2"><a href="#【输出样例2】-2" class="headerlink" title="【输出样例2】"></a>【输出样例2】</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token number">4</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="【输入样例3】-2"><a href="#【输入样例3】-2" class="headerlink" title="【输入样例3】"></a>【输入样例3】</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token number">9</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">1</span> <span class="token number">3</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="【输出样例3】-2"><a href="#【输出样例3】-2" class="headerlink" title="【输出样例3】"></a>【输出样例3】</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token number">10</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="【原题链接】-2"><a href="#【原题链接】-2" class="headerlink" title="【原题链接】"></a>【原题链接】</h4><p><a href="https://www.acwing.com/problem/content/4799/">https://www.acwing.com/problem/content/4799/</a></p><hr><h4 id="【题目分析】-2"><a href="#【题目分析】-2" class="headerlink" title="【题目分析】"></a>【题目分析】</h4><p>动态规划题，需要平时积累，详细讲解见 y总讲解录像：<a href="https://www.bilibili.com/video/BV1284y1h7ip/?share_source=copy_web&amp;vd_source=33934722b558a5cefa750c1a9be72249&amp;t=1814">链接</a></p><p><img src="http://ricky-typora-notes.oss-cn-hangzhou.aliyuncs.com/2023-02-21-170405.png" alt="image-20230115160302183"></p><p><strong>【二刷经历】</strong></p><p>2023 年 4 月 8 日（考完蓝桥杯的晚上），摊主想要把这篇文章上传至自己的博客网站，于是再次阅读了这篇寒假写的复盘，打算检查文章可能存在的错误。</p><p>在检查的过程中，摊主突然发现 C 题又不会做了，说明当时还是没有理解透彻，需要回炉重造。😂</p><p>回顾一下自己晚上的做题流程：</p><ul><li>一开始打算用贪心去解，即优先删去最大值，但是样例3这样的序列显然无法这样简单的贪心。</li><li>然后发现可以把无序的序列，进行升序排列，更加直观。</li><li>想到使用 <strong>线性DP</strong> 求解，但是始终无法推出状态转移方程，或者说究竟如何表示状态？<ul><li>自己模拟的序列是这样的 <code>1 1 1 2 2 2 2 2 3 3 3</code></li><li>DP 考虑如下<ul><li><code>dp[i]</code> 表示删去第 i 个数字后（一定要删去第 <code>i</code> 个数字），能得到的最大值</li><li><code>dp[i]</code> 表示 <code>1~i</code> 序列能得到的最大值（不一定删去第 <code>i</code> 个数字）</li></ul></li><li>但是在考虑上面两种情况是，总是会遇到 <strong>无法往下思考的点</strong>（这种状态在题目难时经常出现），有时候情况有点杂，自己就开始理不清了。<ul><li>比如第 1 种情况，如果一定删去第 <code>i</code> 个数字，那这时候前面的状态怎么办，状态好像没办法转移过来，或者说需要记录一连串数字的左右下标，感觉有点麻烦。（其实这里就应当考虑到，如果把一连串数字进行合并，会不会简单些）</li><li>再如第 2 种情况，那就需要讨论是否删除第 <code>i</code> 个数字，但是这样也需要讨论 第 i 个数字和前面数字的差值等情况：比如 <code>1 1 1 2</code> ，执行到 2 时，如果删了2，<code>dp[4]</code> 就是 2，不删 <code>dp[4] = 3</code>，所以取 <code>dp[3] = 3</code>。但是假如在后面再添一个 <code>2</code>，这时候 <code>dp[5]</code> 应该为 4，这种情况下 <code>dp[3]</code> 就应该等于 2 才对，出现了前后矛盾。</li></ul></li></ul></li><li>最后只能遗憾告终</li></ul><p>于是又去温习了一遍 y总的讲解，发现一开始 y总直接把 <code>1 1 1 2 2 2 2 2 3 3 3</code> 这种合并成了 <code>1 2 3</code>，就直接对这样 3 个数进行讨论就可以了，省去了记录一连串数字的左右下标。</p><p>然后 <code>dp[i]</code> 的表示是选择了上面线性DP的第二种方案，思路如下：</p><ul><li>序列 <code>1 2 ... i</code>，这里 <code>i</code> 并非下标，而是原序列中出现的值<ul><li>如果不选数字 <code>i</code>，则 <code>dp[i] = dp[i-1]</code></li><li>如果选择数字 <code>i</code>，则 <code>dp[i] = dp[i-2] + s[i]</code></li><li>取两者最大值即可。</li></ul></li></ul><p>这里非常精妙的避开了上面用 <code>1 1 1 2 2 2 2 2 3 3 3</code> 出现的矛盾，而且利用了</p><p>只能说 DP 的题目思路都太精妙了，只有多看，多学，多练，才能让自己「顿悟」，继续加油。</p><h4 id="【复盘后的优化代码】✅-2"><a href="#【复盘后的优化代码】✅-2" class="headerlink" title="【复盘后的优化代码】✅"></a>【复盘后的优化代码】✅</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;bits/stdc++.h&gt;using namespace std;const int N = 1e5 + 10;typedef long long ll;ll s[N], dp[N];int n, x;int main() {    ios::sync_with_stdio(false);  //cin读入优化    cin.tie(0);    cin &gt;&gt; n;    for (int i = 1; i &lt;= n; ++i) {        cin &gt;&gt; x;        s[x] += x;  // s数组类似于"桶"，这里的"桶"直接存储总和    }    // 动态规划    for (int i = 1; i &lt;= N - 1; ++i) {        // 状态转移方程        dp[i] = max(dp[i - 1], dp[(max(0, i - 2))] + s[i]);    }    cout &lt;&lt; dp[N - 1] &lt;&lt; endl;    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="【周赛现场-AC-代码】-2"><a href="#【周赛现场-AC-代码】-2" class="headerlink" title="【周赛现场 AC 代码】"></a>【周赛现场 AC 代码】</h4><p>该题现场未AC 😂</p><h4 id="【代码对比总结】-1"><a href="#【代码对比总结】-1" class="headerlink" title="【代码对比总结】"></a>【代码对比总结】</h4><ul><li>周赛现场没能看出本题为动态规划题，导致蛮力模拟一直解不出来。说明需要 <strong>多做题，多积累</strong>。</li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> Acwing周赛复盘 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 信息奥赛 </tag>
            
            <tag> Acwing </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>信息奥赛题解｜位数问题</title>
      <link href="/2023/04/07/xin-xi-ao-sai-ti-jie-wei-shu-wen-ti/"/>
      <url>/2023/04/07/xin-xi-ao-sai-ti-jie-wei-shu-wen-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="信息奥赛题解｜位数问题"><a href="#信息奥赛题解｜位数问题" class="headerlink" title="信息奥赛题解｜位数问题"></a>信息奥赛题解｜位数问题</h1><hr><h2 id="🚀-题目浏览"><a href="#🚀-题目浏览" class="headerlink" title="🚀 题目浏览"></a>🚀 题目浏览</h2><h3 id="【题目描述】"><a href="#【题目描述】" class="headerlink" title="【题目描述】"></a>【题目描述】</h3><p>在所有的 $N$ 位数中，有多少个数中有偶数个数字 $3$ ? 由于结果可能很大，你只需要输出这个答案对 $12345$ 取余的值。</p><h3 id="【输入】"><a href="#【输入】" class="headerlink" title="【输入】"></a>【输入】</h3><p>读入一个数 $N(N \le 1000)$。</p><h3 id="【输出】"><a href="#【输出】" class="headerlink" title="【输出】"></a>【输出】</h3><p>输出有多少个数中有偶数个数字 $3$。</p><h3 id="【输入样例】"><a href="#【输入样例】" class="headerlink" title="【输入样例】"></a>【输入样例】</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="【输出样例】"><a href="#【输出样例】" class="headerlink" title="【输出样例】"></a>【输出样例】</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token number">73</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="【原题链接】"><a href="#【原题链接】" class="headerlink" title="【原题链接】"></a>【原题链接】</h3><p><a href="http://ybt.ssoier.cn:8088/problem_show.php?pid=1313">http://ybt.ssoier.cn:8088/problem_show.php?pid=1313</a></p><hr><h2 id="☘️-题解分析"><a href="#☘️-题解分析" class="headerlink" title="☘️ 题解分析"></a>☘️ 题解分析</h2><p>本题对于 <strong>算法初学者</strong> 来说有点难度，且网络上的题解都不是特别清晰，故摊主撰写了本篇详细的题解分析，希望能在未来帮助到更多的同学。</p><br><p>首先以 $N=1$，即 <strong>一位数</strong> 为例，统计一位数中 包含偶数个 3 的个数，记作 $f[1]_偶$ ；统计包含奇数个 3 的个数，记作 $f[1]_奇$ </p><ul><li>由于 0 也是偶数，所以 「<strong>0 个 3</strong>」 也满足偶数个 3 的条件，故 $f[1]_偶$ 为 1～2，4～9，共 8 个数（注意：0 不是一位数），$f[1]_偶 = 8$</li><li>奇数个3 的情况只有单独的 3，所以 $f[1]_奇 = 1$</li></ul><blockquote><p>🍉 PS：有的小伙伴可能会问，题目不是求偶数的情况就够了吗？为什么要还要统计奇数的情况？继续往下看，你就明白了）</p></blockquote><br><p>然后以 $N=2$，即 <strong>两位数</strong> 为例，统计两位数中 包含偶数个 3 的个数，记作 $f[2]_偶$ ；统计包含奇数个 3 的个数，记作 $f[2]_奇$ </p><p>对于 $f[2]_偶$，可以分两种情况进行统计：</p><ul><li><strong>十位为 3</strong>，则 个位必须为奇数个 3，数量为 $f[1]_奇$</li><li><strong>十位不为 3</strong>（十位可以为 1～2，4～9，<strong>共 8 个数</strong>），则 个位必须为偶数个 3 ，数量为 $f[1]_偶$</li></ul><p>所以 $f[2]_偶 = f[1]_奇 + 8 * f[1]_偶$ </p><p>然后我们带入 $f[1]_奇$、$f[1]_偶$ ，得 $f[2]_偶 = f[1]_奇 + 8 * f[1]_偶=1+8*8=64$ ，却发现与样例答案 73 不相等。❌</p><br><p>这是什么原因造成的呢 ?  🧐 　</p><p>实际上，当我们单独拿$f[1]_奇$、$f[1]_偶$ 讨论时，由于 <strong>0 不为一位数</strong>，所以 $f[1]_偶$ 为 1～2，4～9，共 8 个。</p><p>但是当 $N=2$ 时，由于十位上有了数字，所以此时个位上的数字是可以为 0 的，因此在计算 $f[2]_偶$ 时，$f[1]_偶$ 可以取到 0～2，4～9，共 9 个。（<strong>本质</strong>是 <strong>一位数</strong> 和 <strong>个位上的数字</strong> 的区别）</p><p>同理，$f[1]_奇$ 也要考虑 0 的情况，但是此时 0 并不满足 「奇数个3的条件」，所以 $f[1]_奇$ 仍然为 1（这里 $f[1]_奇$ 的值虽然没有变，但是后面的 $f[2]_奇、f[3]_奇$、…、$f[n]_奇$ 的值会在更新后发生改变）</p><p>把新的 $f[1]_偶$、$f[1]_奇$ 的值带入，得到  $f[2]_偶 = f[1]_奇 + 8 * f[1]_偶=1+8*9=73$ </p><p>即为样例答案 73。</p><p>同理，$f[2]_奇 = f[1]_偶 + 8 * f[1]_奇=9+8*1=17$</p><blockquote><p>上面这个 $f[1]_偶$、$f[1]_奇$ 为什么要更新的的原因，是本题的难点，也是本题的解题关键。现在不理解也没关系，继续往下阅读，再分析一个案例，也许你就理解了。</p></blockquote><br><p>然后以 $N=3$，即 <strong>三位数</strong> 为例，也是类似的过程。</p><p>对于 $f[3]_偶$，可以分两种情况：</p><ul><li><strong>百位为 3</strong>，则 十位和个位总体 必须为 奇数个 3，数量为 $f[2]_奇$</li><li><strong>百位不为 3</strong>，则 十位和个位总体 必须为 偶数个 3，数量为 $f[2]_偶$</li></ul><p>所以 $f[3]_偶 = f[2]_奇 + 8 * f[2]_偶$</p><p>同理，$f[3]_奇 = f[2]_偶 + 8 * f[2]_奇$</p><p>同样，由于在计算 $f[2]_奇$ 、$f[2]_偶$ 时，十位不能为0；而引入百位后，十位可以为 0，所以如果要输出的是三位数的结果，则在计算 $f[2]_奇$ 、$f[2]_偶$ 时，也需要考虑 0</p><br><p>现在我们 <strong>重新计算</strong> 求解 $f[3]_偶$ 、$f[3]_奇$ 情况下的 $f[2]_偶$ 、$f[2]_奇$ </p><p>我们在上一步中计算的 $f[2]_偶 = f[1]_奇 + 8 * f[1]_偶=1+8*9=73$ </p><p>其中 8 这个系数，是十位不为 3 ，取 1～2，4～9 得到的（当时十位不能为 0）。但是现在，由于十位可以为0 ，所以十位可以取 0～2，4～9 共 9 个数字，所以上面式子中的系数应该为 9，而不是 8。</p><p>所以新的 $f[2]_偶 = f[1]_奇 + 9 * f[1]_偶=1+9*9=82$ </p><p>同理，新的 $f[2]_奇 = f[1]_偶 + 9 * f[1]_奇=9+9*1=18$</p><p>在得到了新的 $f[2]_偶$、$f[2]_奇$ 后，再带入 $f[3]_偶 = f[2]_奇 + 8 * f[2]_偶$，就能得到正确的 $f[3]_偶$</p><p>🍉 PS：$f[3]_偶 = f[2]_奇 + 8 * f[2]_偶$，这里的系数 8 并不会变成 9，因为此时百位是最高位，不能为 0。</p><p>但是同理，当 $N=4$ 时，由于有千位的存在，百位就可以为 0 ，那么计算$f[3]_偶$ 时，其数值就应该更新为 $f[3]_偶 = f[2]_奇 + 9 * f[2]_偶$</p><blockquote><p>上面推导过程中， $f[2]_偶$、$f[2]_奇$ 为什么要更新，并且 「公式系数从 8 改为 9」的原因，以及计算 $f[3]_偶$、$f[3]_奇$ 时，「公式系数仍为 8 」的原因，是本题的难点，也是本题的解题关键。⭐️</p></blockquote><br><p>根据上面的推导，我们可以得到最终 <strong>n 位数的结果</strong>：</p><ul><li><p>$f[n]_偶 = f[n-1]_奇 + 8 * f[n-1]_偶$</p></li><li><p>$f[n]_奇 = f[n-1]_偶 + 8 * f[n-1]_奇$</p></li></ul><p>而在计算 $f[n-1]_奇$、$f[n-1]_偶$ 时，由于此时最高位可以为 0，上面递推式中表示 1～2，4～9的系数「8」就变成了0～2，4～9的系数「9」，递推公式为：</p><ul><li><p>$f[n-1]_偶 = f[n-1]_奇 + 9 * f[n-1]_偶$</p></li><li><p>$f[n-1]_奇 = f[n-1]_偶 + 9 * f[n-1]_奇$</p></li></ul><p>所以在书写代码时，也需要分为两个表达式来写。✅</p><p>🍉 PS1：在实际编程中，我们可以用 $f[N][0]$ 来表示 $f[N]_偶$ ，用 $f[N][1]$ 来表示 $f[N]_奇$</p><p>🍉 PS2：这种递推问题的答案可能很大，甚至超出 <code>long long</code> 的范围，所以不要忘记题干中的取模要求。</p><hr><h2 id="🧑🏻‍💻-C-代码"><a href="#🧑🏻‍💻-C-代码" class="headerlink" title="🧑🏻‍💻 C++ 代码"></a>🧑🏻‍💻 C++ 代码</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e3</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> K <span class="token operator">=</span> <span class="token number">12345</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">int</span> f<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">//f[n][0]表示 n位数 中包含偶数个3的情况</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//cin读入优化</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        f<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>  <span class="token comment">//1~2,4~9 共 8 个</span>        f<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">//3，共1个</span>        cout <span class="token operator">&lt;&lt;</span> f<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        f<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span>  <span class="token comment">//更高位上有数字，需要考虑0</span>        f<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>              <span class="token comment">//递推2～n-1位数</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">//K = 12345</span>            f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">%</span> K<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">9</span> <span class="token operator">*</span> <span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">%</span> K<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> K<span class="token punctuation">)</span> <span class="token operator">%</span> K<span class="token punctuation">;</span>            f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">%</span> K<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">9</span> <span class="token operator">*</span> <span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">%</span> K<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> K<span class="token punctuation">)</span> <span class="token operator">%</span> K<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//单独计算n位数</span>        f<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">%</span> K<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>f<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">%</span> K<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> K<span class="token punctuation">)</span> <span class="token operator">%</span> K<span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> f<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="😑-吐槽时间"><a href="#😑-吐槽时间" class="headerlink" title="😑 吐槽时间"></a>😑 吐槽时间</h3><p>摊主本人在阅读其他一些题解时，发现有的题解在分析时，认为 $f[1][0]=8$（ 1～2，4～9，因为 0 不算一位数），但是实际代码中，却出现 $f[1][0] = 9$ 的情况，并且没有交代原因。这样的前后矛盾，让不少看题解的小伙伴们感到困惑。</p><p>摊主还发现，有的题解就直接认为 $f[1][0]$ 就应该等于 9，把 0 也算成了一位数，这从 <strong>数学定义的角度</strong> 来看是错误的。❌ （有疑惑的小伙伴可以查阅以下问题：0 算不算一位数 ? 一位数和个位数有什么区别？）</p><p>从推导过程中，我们看到只有在 $N &gt; 1$ 时，<code>f[1][0]</code> 才因为进制的规则，变成了 9。</p><p>说明写其他题解的作者可能没有仔细考虑这其中的关系，这也是摊主撰写此篇题解的原因，希望本题解能真正解答一些小伙伴们的困难。</p><p>摊主也希望阅读此篇题解后，理解了本题的小伙伴，在未来自己写其他题目的题解时，多一份耐心与细致，不要让更多灌水、没有太多思考的题解，污染了这片土壤，浪费其他小伙伴搜索与阅读的时间。☘️</p>]]></content>
      
      
      <categories>
          
          <category> 信息奥赛题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 信息奥赛 </tag>
            
            <tag> C++ </tag>
            
            <tag> 递推 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python VS C</title>
      <link href="/2023/04/07/python-vs-c/"/>
      <url>/2023/04/07/python-vs-c/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Python基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> C </tag>
            
            <tag> CS50 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>信息奥赛题解｜四平方和</title>
      <link href="/2023/04/07/xin-xi-ao-sai-ti-jie-si-ping-fang-he/"/>
      <url>/2023/04/07/xin-xi-ao-sai-ti-jie-si-ping-fang-he/</url>
      
        <content type="html"><![CDATA[<h1 id="信息奥赛题解｜四平方和"><a href="#信息奥赛题解｜四平方和" class="headerlink" title="信息奥赛题解｜四平方和"></a>信息奥赛题解｜四平方和</h1><hr><h2 id="🚀-题目浏览"><a href="#🚀-题目浏览" class="headerlink" title="🚀 题目浏览"></a>🚀 题目浏览</h2><h3 id="【题目描述】"><a href="#【题目描述】" class="headerlink" title="【题目描述】"></a>【题目描述】</h3><p>四平方和定理，又称为拉格朗日定理：</p><p>每个正整数都可以表示为至多 $4$ 个正整数的平方和。</p><p>如果把 $0$ 包括进去，就正好可以表示为 $4$ 个数的平方和。</p><p>比如：</p><p>$5=0^2+0^2+1^2+2^2$<br>$7=1^2+1^2+1^2+2^2$</p><p>对于一个给定的正整数，可能存在多种平方和的表示法。</p><p>要求你对 $4$ 个数排序：</p><p>$0 \le a \le b \le c \le d$</p><p>并对所有的可能表示法按 $a,b,c,d$ 为联合主键升序排列，最后输出第一个表示法。</p><h3 id="【输入】"><a href="#【输入】" class="headerlink" title="【输入】"></a>【输入】</h3><p>输入一个正整数 $N$。</p><h3 id="【输出】"><a href="#【输出】" class="headerlink" title="【输出】"></a>【输出】</h3><p>输出 $4$ 个非负整数，按从小到大排序，中间用空格分开。</p><h3 id="【数据范围】"><a href="#【数据范围】" class="headerlink" title="【数据范围】"></a>【数据范围】</h3><p>$0 \lt N \lt 5∗10^6$</p><h3 id="【输入样例】"><a href="#【输入样例】" class="headerlink" title="【输入样例】"></a>【输入样例】</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token number">5</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="【输出样例】"><a href="#【输出样例】" class="headerlink" title="【输出样例】"></a>【输出样例】</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token number">0</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="【原题链接】"><a href="#【原题链接】" class="headerlink" title="【原题链接】"></a>【原题链接】</h3><p><a href="https://www.luogu.com.cn/problem/P8635">https://www.luogu.com.cn/problem/P8635</a></p><hr><h2 id="☘️-题解分析"><a href="#☘️-题解分析" class="headerlink" title="☘️ 题解分析"></a>☘️ 题解分析</h2><p>四重循环的暴力枚举做法，显然会 TLE，所以可以采用 <strong>哈希</strong> 的方法，来降低时间复杂度。</p><p><strong>正确思路</strong>：</p><ul><li>将 $c$ 和 $d$ 的平方和存储到自己模拟的哈希表中，该步复杂度为 $O(\sqrt n) * O(\sqrt n) = O(n)$</li><li>枚举 $a，b$，并且在哈希表中查找  $n - a * a - b * b$，该步复杂度为 $(O\sqrt n) * O(\sqrt n) * O(1) = O(n)$</li></ul><p>所以该思路的时间复杂度为 $O(n) + O(n) = O(n)$，满足该题的数据范围。</p><p>本题推荐使用自己 <strong>用数组模拟的哈希表</strong>（相较于 STL 会更加快）</p><hr><h2 id="🧑🏻‍💻-C-代码"><a href="#🧑🏻‍💻-C-代码" class="headerlink" title="🧑🏻‍💻 C++ 代码"></a>🧑🏻‍💻 C++ 代码</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">5e6</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">int</span> C<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> D<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 哈希表，C[k]存储平方和为k时，c的值；D[k]存储平方和为k时，d的值</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>    <span class="token comment">// 将c、d的平方和存入哈希表（复杂度为O(N))）</span>    <span class="token function">memset</span><span class="token punctuation">(</span>C<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>C<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 初始化为-1，因为0是有实际含义的</span>    <span class="token function">memset</span><span class="token punctuation">(</span>D<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>D<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> c <span class="token operator">*</span> c <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> c<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> d <span class="token operator">=</span> c<span class="token punctuation">;</span> c <span class="token operator">*</span> c <span class="token operator">+</span> d <span class="token operator">*</span> d <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> d<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> sum <span class="token operator">=</span> c <span class="token operator">*</span> c <span class="token operator">+</span> d <span class="token operator">*</span> d<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>C<span class="token punctuation">[</span>sum<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment">// 该总和第一次出现,记录此时c和d的值</span>                C<span class="token punctuation">[</span>sum<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">,</span> D<span class="token punctuation">[</span>sum<span class="token punctuation">]</span> <span class="token operator">=</span> d<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">// 枚举a，b，查找 n - a*a - b*b 的哈希值</span>    <span class="token comment">// 哈希值存在，说明此时a,b,c,d平方和为n</span>    <span class="token comment">// 复杂度是sqrt(n) * sqrt(n) * O(1)= O(n) 哈希表查找为O(1)</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> a <span class="token operator">*</span> a <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> a<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> b <span class="token operator">=</span> a<span class="token punctuation">;</span> a <span class="token operator">*</span> a <span class="token operator">+</span> b <span class="token operator">*</span> b <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> b<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> dis <span class="token operator">=</span> n <span class="token operator">-</span> a <span class="token operator">*</span> a <span class="token operator">-</span> b <span class="token operator">*</span> b<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>C<span class="token punctuation">[</span>dis<span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> b <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> C<span class="token punctuation">[</span>dis<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> D<span class="token punctuation">[</span>dis<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">// 下面没有更多需求的话，直接return 0结束即可，不用写goto</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 信息奥赛题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 信息奥赛 </tag>
            
            <tag> C++ </tag>
            
            <tag> 哈希表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git教程</title>
      <link href="/2023/04/06/git-jiao-cheng/"/>
      <url>/2023/04/06/git-jiao-cheng/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Git教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>嵌入式系统｜期末指北</title>
      <link href="/2023/04/05/qian-ru-shi-xi-tong-qi-mo-zhi-bei/"/>
      <url>/2023/04/05/qian-ru-shi-xi-tong-qi-mo-zhi-bei/</url>
      
        <content type="html"><![CDATA[<h1 id="期末指北——嵌入式系统（feat-ChatGPT）"><a href="#期末指北——嵌入式系统（feat-ChatGPT）" class="headerlink" title="期末指北——嵌入式系统（feat. ChatGPT）"></a>期末指北——嵌入式系统（feat. ChatGPT）</h1><p><img src="http://ricky-typora-notes.oss-cn-hangzhou.aliyuncs.com/2023-02-21-164338.png" alt="嵌入式系统｜期末指北"></p><h2 id="写在最前-✍️"><a href="#写在最前-✍️" class="headerlink" title="写在最前 ✍️"></a>写在最前 ✍️</h2><p>本文摘录了一些 《嵌入式系统》课程的 <strong>常见选择题</strong>，供有需求的同学们学习使用。</p><p>部分答案解析由 <strong>ChatGPT</strong> 生成，摊主进行审核。</p><p><strong>教材版本</strong>：《嵌入式系统设计与应用——基于 ARM Cortex-A8 和 Linux（第二版）》</p><hr><h2 id="题目概览-🧑🏻‍💻"><a href="#题目概览-🧑🏻‍💻" class="headerlink" title="题目概览 🧑🏻‍💻"></a>题目概览 🧑🏻‍💻</h2><p><strong>1、下面关于哈佛结构描述正确的是（ ）</strong> </p><p>A、程序存储空间与数据存储空间分离 </p><p>B、存储空间与 IO 空间分离 </p><p>C、程序存储空间与数据存储空间合并 </p><p>D、存储空间与 IO 空间合并</p><br><p><strong>2、关于ARM处理器的工作模式，以下说法错误的是（ ）</strong></p><p>A、用户模式是程序正常执行的工作模式 </p><p>B、管理模式负责处理存储器故障，实现虚拟存储器和存储器的保护 </p><p>C、系统模式运行特权级的操作系统任务 </p><p>D、当处理器处于用户模式时，如果没有异常发生是不能改变工作模式的 </p><br><p><strong>3、存储一个 32 位数 0x2168465 到 2000H~2003H 四个字节单元中，若以小端模式存储，则 2000H 存储单元内容为（ ）</strong></p><p>A、 0x21 B、 0x68 C、0x65 D、0x02 </p><br><p><strong>4、下面关于 ARM 处理器的体系结构描述哪一个是错误的（ ）</strong> </p><p>A、三地址指令格式 </p><p>B、所有的指令都是单周期执行 </p><p>C、指令长度固定 </p><p>D、Load-Store结构</p><br><p><strong>5、ARM 指令集和 Thumb 指令集分别是（ ）位的。</strong> </p><p>A、8 位，16 位 </p><p>B、16 位，32 位 </p><p>C、16 位，16 位 </p><p>D、32 位，16 位 </p><br><p><strong>6、ARM Cortex A8的工作状态包括（ ）。</strong></p><p>A、测试状态和运行状态 </p><p>B、挂起状态和就绪状态 </p><p>C、就绪状态和运行状态 </p><p>D、ARM状态和Thumb状态 </p><br><p><strong>7、对于 ARM7 三级流水线，当一条指令被译码时，下一条指令正被（ ）</strong></p><p>A、取指</p><p>B、译码</p><p>C、PC值递增</p><p>D、执行</p><br><p><strong>8、复位后，ARM处理器处于（ ）模式</strong></p><p>A. USER</p><p>B. SVC</p><p>C. SYSTEM</p><p>D. ARM</p><br><p><strong>9、寄存器 R13 除可做通用寄存器外，还可以做（ ）</strong> </p><p>A、程序计数器 B、链接寄存器 C、栈指针寄存器 D、基址寄存器</p><br><p><strong>10、在下列ARM处理器的各种模式中，只有（ ）模式不可以自由地改变处理器的工作模式</strong></p><p>A、用户模式</p><p>B、系统模式</p><p>C、终止模式</p><p>D、中断模式 </p><br><p><strong>11、0x17 &amp; 0x1A 的运算结果是（ ）</strong></p><p>A、<code>0x01</code></p><p>B、<code>0x11</code></p><p>C、<code>0x17</code></p><p>D、<code>0x12</code></p><br><p><strong>12、对寄存器 R1 的内容乘以 4 的正确指令是（）</strong></p><p>A. <code>LSR R1, #2</code></p><p>B. <code>LSL R1, #2</code></p><p>C. <code>MOV R1, R1, LSL #2</code></p><p>D. <code>MOV R1, R1, LSR #2</code></p><br><p><strong>13、MOV R1, #0x1000 LDR R0, [R1], #4 执行上述指令序列后，R1 寄存器的值是（ ）</strong></p><p>A. <code>0x1000</code></p><p>B. <code>0x1004</code></p><p>C. <code>0x0FFC</code></p><p>D. <code>0x4</code></p><br><p><strong>14、R0=0x05, 执行BIC R0,R0,#3的运算后，R0结果是（ ）</strong></p><p>A. <code>0x02</code></p><p>B. <code>0x03</code></p><p>C. <code>0x04</code></p><p>D. <code>0x05</code> </p><br><p><strong>15、GET伪指令的含义是（ ）</strong></p><p>A. 包含一个外部文件</p><p>B. 定义程序的入口</p><p>C. 定义一个宏</p><p>D. 声明一个变量</p><br><p><strong>16、若 R1 = 2000H，（2000H）= 0x86，（2008H）= 0x39 ，则执行指令 LDR R0，[R1,#8]! 后 R0 的值为（ ）</strong></p><p>A. <code>0x2000</code></p><p>B. <code>0x86</code></p><p>C. <code>0x2008</code></p><p>D. <code>0x39</code></p><br><p><strong>17、将 ARM 处理器 R0 中的一个字节的数据，存入由 R1+4 指示的内存区域,且地址自动更新,则使用的 ARM 指令是（ ）</strong></p><p>A. <code>STR R0,［R1,#4]</code></p><p>B. <code>STRH R0,［R1，＃4]!</code></p><p>C. <code>STRH R0，[R1,＃4]</code></p><p>D. <code>STRB R0,[R1，#4]!</code></p><br><hr><h2 id="答案解析-🚀"><a href="#答案解析-🚀" class="headerlink" title="答案解析 🚀"></a>答案解析 🚀</h2><p><strong>1、下面关于哈佛结构描述正确的是（ ）</strong> </p><p>A、程序存储空间与数据存储空间分离</p><p>B、存储空间与 IO 空间分离 </p><p>C、程序存储空间与数据存储空间合并 </p><p>D、存储空间与 IO 空间合并</p><p><strong>【参考答案】</strong> A</p><p><strong>【ChatGPT 解析】</strong></p><p><strong>哈佛结构</strong> 是指在计算机体系结构中，将 <strong>「指令存储器（程序存储空间）与数据存储器」</strong> 分离的结构。在哈佛结构中，指令和数据存储器使用不同的总线和不同的物理存储器，这种结构可以提高数据存取的效率，因为指令和数据可以并行地访问。</p><p>而存储空间与IO空间分离，是指在计算机体系结构中，将存储器和IO接口分离的结构。在这种结构中，存储器和IO设备使用不同的总线和不同的物理接口，以实现相互独立的访问。这种结构可以提高计算机系统的稳定性和可靠性，同时也方便了硬件和软件的设计和维护。</p><p>和哈佛结构类似，存储空间与IO空间分离的结构也可以提高访问效率，因为存储器和IO设备可以并行地访问。但是这两者的分离方式不同，哈佛结构分离的是指令存储器和数据存储器，而存储空间与IO空间分离的结构分离的是存储器和IO接口。</p><p>因此，选项A描述的是哈佛结构的特点，程序存储空间和数据存储空间是分离的，选项B、C、D均不符合哈佛结构的定义。</p><br><p><strong>2、关于ARM处理器的工作模式，以下说法错误的是（ ）</strong></p><p>A、用户模式是程序正常执行的工作模式 </p><p>B、管理模式负责处理存储器故障，实现虚拟存储器和存储器的保护 </p><p>C、系统模式运行特权级的操作系统任务 </p><p>D、当处理器处于用户模式时，如果没有异常发生是不能改变工作模式的 </p><p><strong>【参考答案】</strong> B</p><p><strong>【ChatGPT 解析】</strong></p><p>B、<strong>管理模式</strong> 也称为特权模式，用于处理特殊的系统操作，如中断、异常、操作系统的内核代码等。</p><p>但是 <strong>管理模式并不负责处理存储器故障</strong> ，这是由 <strong>数据访问中止模式</strong> 负责的。</p><p>A、<strong>用户模式是程序正常执行的工作模式</strong>，ARM处理器在用户模式下执行应用程序，访问受限的系统资源和寄存器，并且无法直接执行特权指令。如果应用程序试图执行特权指令或访问受限的资源，会导致异常发生，处理器会切换到异常模式。</p><p>C、<strong>系统模式也是一种特权模式</strong>，用于运行特权级别的操作系统任务。在系统模式下，操作系统可以执行特权指令，访问所有资源和寄存器，并且可以进行特权级别的操作，如任务切换、内存管理等。</p><p>D、该选项略有争议，但是按照教材P27、P28的内容，并且对比 B 选项，该选项也算正确。</p><br><p><strong>3、存储一个 32 位数 0x2168465 到 2000H~2003H 四个字节单元中，若以小端模式存储，则 2000H 存储单元内容为（ ）</strong></p><p>A、 0x21 B、 0x68 C、0x65 D、0x02</p><p><strong>【参考答案】</strong> C</p><p><strong>【摊主解析】</strong></p><p>大端/小端模式是重点知识，可以把小端模式按照下图中「<strong>倒车入库</strong>」的方式理解，就会容易很多了。</p><p><img src="https://ricky-typora-notes.oss-cn-hangzhou.aliyuncs.com/2023-02-21-164350.png" alt="大端/小端记忆方式"></p><br><p><strong>4、下面关于 ARM 处理器的体系结构描述哪一个是错误的（ ）</strong> </p><p>A、三地址指令格式 </p><p>B、所有的指令都是单周期执行 </p><p>C、指令长度固定 </p><p>D、Load-Store结构</p><p><strong>【参考答案】</strong> B</p><p><strong>【ChatGPT 解析】</strong></p><p>ARM处理器的指令集体系结构（ISA）采用的是 RISC（Reduced Instruction Set Computing）架构，以精简的指令集为基础，支持高效的指令流水线执行。</p><p>B、<strong>并非所有的ARM指令都是单周期执行的</strong>。由于指令的复杂度不同，一些指令需要多个时钟周期才能完成执行。ARM处理器为了保持高效性，采用了流水线执行的方式，可以在一个时钟周期内执行多个指令的不同阶段。但是，在某些情况下，由于数据相关性或控制相关性等因素，可能需要中断流水线执行，从而导致指令执行的延迟。</p><p>A、ARM 指令集采用三地址指令格式，即一个指令可以同时操作三个操作数（源操作数1、源操作数2 和 目的操作数）。</p><p>C、该选项略有争议，指令长度方面，ARM处理器采用变长指令长度的方式，指令长度可以是 2 字节或 4 字节，以满足不同的应用需求。这里的固定可能是指 指令长度要么是 2 字节或 4 字节。（本题在一些搜题软件上的答案也是B）</p><p>D、Load-Store 结构则是 ARM 处理器的一种常见的指令执行方式，即只有 Load 和 Store 指令才能访问存储器中的数据，其他指令只能通过寄存器来操作数据，这样可以提高存储器的访问效率。</p><br><p><strong>5、ARM 指令集和 Thumb 指令集分别是（ ）位的。</strong> </p><p>A、8 位，16 位 </p><p>B、16 位，32 位 </p><p>C、16 位，16 位 </p><p>D、32 位，16 位 </p><p><strong>【参考答案】</strong> D</p><p><strong>【ChatGPT解析】</strong></p><p>ARM 指令集和 Thumb 指令集分别是 32 位和 16 位的。</p><p>ARM指令集具有更强的功能和灵活性，而Thumb指令集则具有更小的指令长度和更高的代码密度，可以在节省存储空间和提高执行速度之间做出平衡。</p><p>在 ARMv7 指令集中，还有一种指令集，称为 Thumb-2，它既支持 16 位指令，又支持 32 位指令，可以在需要时灵活地切换使用。</p><br><p><strong>6、ARM Cortex A8的工作状态包括（ ）。</strong></p><p>A、测试状态和运行状态 </p><p>B、挂起状态和就绪状态 </p><p>C、就绪状态和运行状态 </p><p>D、ARM状态和Thumb状态</p><p><strong>【参考答案】</strong> D</p><p><strong>【ChatGPT解析】</strong></p><p>ARM Cortex A8是一款基于 ARMv7 架构的处理器，<strong>支持 ARM 状态和 Thumb 状态两种工作状态</strong>。</p><p>在 ARM 状态下，处理器执行 32 位的 ARM 指令，提供较高的性能和复杂度；在 Thumb 状态下，处理器执行 16 位的Thumb指令，提供较高的代码密度和低功耗。处理器可以在 ARM 状态和 Thumb 状态之间切换，以根据应用程序的需求来平衡性能和功耗。</p><p>除了ARM状态和Thumb状态，处理器还支持一些特殊状态，如 Jazelle 状态和 ThumbEE 状态。在 Jazelle 状态下，处理器执行 Java 字节码，用于支持 Java 虚拟机（JVM）和Just-In-Time（JIT）编译器。在 ThumbEE 状态下，处理器执行基于Thumb指令的执行环境（TEE），用于安全应用程序的运行。</p><br><p><strong>7、对于 ARM7 三级流水线，当一条指令被译码时，下一条指令正被（ ）</strong></p><p>A、取指</p><p>B、译码</p><p>C、PC值递增</p><p>D、执行</p><p><strong>【参考答案】</strong> A</p><p><strong>【摊主解析】</strong></p><p>理想的 ARM7 的流水线由三个阶段组成，分别是取指、译码和执行。如下图所示：</p><p><img src="https://ricky-typora-notes.oss-cn-hangzhou.aliyuncs.com/2023-02-21-164351.png" alt="三级流水指令"></p><p>可以看到，当前指令正在被译码时，下一条指令已经被取指，等待进入译码阶段。这样可以充分利用处理器的性能，提高指令的执行效率。</p><br><p><strong>8、复位后，ARM处理器处于（ ）模式</strong></p><p>A. USER</p><p>B. SVC</p><p>C. SYSTEM</p><p>D. ARM</p><p><strong>【参考答案】</strong> B</p><p><strong>【摊主解析】</strong></p><p>根据教材 P27 页表格，复位后，ARM 处理器位于 <strong>管理模式</strong>（Supervisor，SVC）</p><br><p><strong>9、寄存器 R13 除可做通用寄存器外，还可以做（ ）</strong> </p><p>A、程序计数器 B、链接寄存器 C、栈指针寄存器 D、基址寄存器</p><p><strong>【参考答案】</strong> C</p><p><strong>【ChatGPT解析】</strong></p><p>在ARM体系结构中，R13 是栈指针寄存器（Stack Pointer），通常简称 SP。它的作用是存储当前栈的地址，以及在函数调用时分配和回收栈空间。</p><br><p><strong>10、在下列ARM处理器的各种模式中，只有（ ）模式不可以自由地改变处理器的工作模式</strong></p><p>A、用户模式</p><p>B、系统模式</p><p>C、终止模式</p><p>D、中断模式</p><p><strong>【参考答案】</strong> A</p><p><strong>【摊主解析】</strong></p><p>根据教材 P27、28 页内容，只有用户模式（User）模式不可以自由地改变处理器的工作模式。</p><p>用户模式是 ARM 处理器最基本的工作模式，用于一般的应用程序的执行。在用户模式下，处理器只能访问受保护的寄存器和内存区域，不能执行特权指令，也不能改变处理器的工作模式。</p><p>其他模式，如系统模式、中断模式和终止模式，都具有更高的特权级别，可以执行更多的指令和操作，并且可以改变处理器的工作模式。例如，系统模式用于操作系统内核的执行，中断模式用于响应外部中断事件，终止模式用于处理严重的错误情况。</p><p>因此，只有用户模式不可以自由地改变处理器的工作模式。</p><br><p><strong>11、0x17 &amp; 0x1A 的运算结果是（ ）</strong></p><p>A、<code>0x01</code></p><p>B、<code>0x11</code></p><p>C、<code>0x17</code></p><p>D、<code>0x12</code></p><p><strong>【参考答案】</strong> D</p><p><strong>【ChatGPT解析】</strong></p><p>进行位运算时，按位与运算符（&amp;）会将两个操作数的对应位上的值进行「与」运算，只有当两个操作数的对应位上的值都为1时，结果位上的值才为1，否则为0。</p><p>对于 <code>0x17 &amp; 0x1A</code>，按位进行与运算：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">  <span class="token number">0001</span> <span class="token number">0111</span><span class="token operator">&amp;</span> <span class="token number">0001</span> <span class="token number">1010</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>  <span class="token number">0001</span> <span class="token number">0010</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>因此，<code>0x17 &amp; 0x1A</code> 的运算结果是 <code>0x12</code>（十六进制），或者 <code>18</code>（十进制），所以选项 D 是正确的答案。</p><br><p><strong>12、对寄存器 R1 的内容乘以 4 的正确指令是（）</strong></p><p>A. <code>LSR R1, #2</code></p><p>B. <code>LSL R1, #2</code></p><p>C. <code>MOV R1, R1, LSL #2</code></p><p>D. <code>MOV R1, R1, LSR #2</code></p><p><strong>【参考答案】</strong> D</p><p><strong>【ChatGPT解析】</strong></p><p>要将寄存器 R1 中的内容乘以 4，可以使用逻辑左移指令（LSL）或移位后的移动指令（MOV）。</p><p>逻辑左移指令将操作数的二进制位向左移动指定的位数，并在右侧插入 0。移位后的移动指令将操作数左移指定的位数，并将结果移回到目标寄存器。</p><p>在选项A和D中，都使用了移位指令，但是是逻辑右移（LSR），而不是逻辑左移（LSL），这样不会得到正确的乘法结果。因此，选项A和D都是错误的。</p><p>在选项B中，使用了逻辑左移指令，但是没有将结果移回到目标寄存器，因此也是错误的。</p><p>正确的选项是C，使用移位后的移动指令将 R1 左移两位，然后将结果移回到 R1 中，从而得到 R1 的内容乘以4 的结果。</p><p>因此，正确的指令是：</p><pre class="line-numbers language-arm" data-language="arm"><code class="language-arm">MOV R1, R1, LSL #2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br><p><strong>13、执行下面指令序列后，R1 寄存器的值是（ ）</strong></p><pre class="line-numbers language-arm" data-language="arm"><code class="language-arm">MOV R1,#0x1000LDR R0,[R1],#4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>A. <code>0x1000</code></p><p>B. <code>0x1004</code></p><p>C. <code>0x0FFC</code></p><p>D. <code>0x4</code></p><p><strong>【参考答案】</strong> B</p><p><strong>【ChatGPT解析】</strong></p><p>执行上述指令序列后，R1寄存器的值是 <code>0x1004</code>。</p><p>该指令首先将 <code>0x1000</code> 赋值给 R1，然后从地址 R1 开始，读取 4 个字节的数据到 R0，同时 R1 值加上 4。</p><p>因此，执行完指令序列后，R1 的值应该是 <code>0x1004</code>。</p><br><p><strong>14、R0=0x05, 执行BIC R0,R0,#3的运算后，R0结果是（ ）</strong></p><p>A. <code>0x02</code></p><p>B. <code>0x03</code></p><p>C. <code>0x04</code></p><p>D. <code>0x05</code> </p><p><strong>【参考答案】</strong> C</p><p><strong>【ChatGPT解析1】</strong></p><p><code>BIC R0, R0, #3</code></p><p>其中，「BIC」是指位清零指令（Bit Clear），将目标寄存器的指定位清零。</p><p>R0 是 ARM 处理器的寄存器名，这里表示目标寄存器。</p><p><code>#3</code> 是一个立即数，表示要清零的位所在的位偏移量。因为 3 的二进制是 00000011，所以这个指令会将R0的二进制表示的低两位清零。</p><p><strong>【ChatGPT解析2】</strong></p><p><img src="https://ricky-typora-notes.oss-cn-hangzhou.aliyuncs.com/2023-02-21-164352-20230406000739987.png" alt="ChatGPT解析2"></p><br><p><strong>15、GET伪指令的含义是（ ）</strong></p><p>A. 包含一个外部文件</p><p>B. 定义程序的入口</p><p>C. 定义一个宏</p><p>D. 声明一个变量</p><p><strong>【参考答案】</strong> A</p><p><strong>【ChatGPT解析】</strong></p><p><strong>GET</strong> 是 ARM 汇编语言中的一个伪指令，<strong>用于将一个外部文件的内容包含到当前汇编文件中</strong>。可以将 GET 指令看作是「复制粘贴」操作，它会将外部文件的内容复制到指令所在的位置，从而使程序能够使用外部文件中的变量、常量、函数等信息。</p><br><p><strong>16、若 R1 = 2000H，（2000H）= 0x86，（2008H）= 0x39 ，则执行指令 LDR R0，[R1,#8]! 后 R0 的值为（ ）</strong></p><p>A. <code>0x2000</code></p><p>B. <code>0x86</code></p><p>C. <code>0x2008</code></p><p>D. <code>0x39</code></p><p><strong>【参考答案】</strong> D</p><p><strong>【摊主解析】</strong></p><p>该指令的含义是：将地址为 <code>R1+8</code> 的内存数据读取到 R0 寄存器中，并将R1的值加上 8（! 表示自动修改基地址R1的值）。</p><p>在本题中，R1 = 2000H，（2008H）= 0x39，所以将 0x39 读入 R0 中，同时 R1 的值变为 <code>2008H</code>。因此，R0 的值为 <code>0x39</code>。</p><br><p><strong>17、将 ARM 处理器 R0 中的一个字节的数据，存入由 R1+4 指示的内存区域,且地址自动更新,则使用的 ARM 指令是（ ）</strong></p><p>A. <code>STR R0,［R1,#4]</code></p><p>B. <code>STRH R0,［R1，＃4]!</code></p><p>C. <code>STRH R0，[R1,＃4]</code></p><p>D. <code>STRB R0,[R1，#4]!</code></p><p><strong>【参考答案】</strong> D</p><p><strong>【ChatGPT解析】</strong></p><ul><li><p><code>STRB</code> 指令是将 R0 寄存器中的 <strong>一个字节的数据</strong> 存储到存储器中，存储器的地址为 R1+4，即 [ R1, #4]。而且在存储数据后，R1自动加上1，指向下一个字节。因此，STRB指令是将一个字节的数据从寄存器存储到内存中，并且自动更新目标地址。</p></li><li><p><code>STR</code>指令是将 R0 寄存器中的 <strong>一个字的数据</strong> 存储到存储器中，存储器的地址为R1+4，即[ R1, #4]。和STRB指令不同，STR 指令存储的是一个字的数据，而不是一个字节，因此存储后 R1 自动加上 4，指向下一个字的地址。</p></li><li><p><code>STRH</code> 指令是将R0寄存器中的 <strong>一个半字的数据</strong> 存储到存储器中，存储器的地址为 R1+4，即[ R1, #4]。和STRB指令类似，STRH指令存储的是一个半字的数据，存储后 R1 自动加上 2，指向下一个半字的地址。</p></li></ul><p><strong>字</strong> 与 <strong>字节</strong> 换算公式：1 个字 = 2 个半字 = 4 个字节</p><p>本题需要存储一个字节的数据，所以选择 D</p><br>]]></content>
      
      
      <categories>
          
          <category> 嵌入式系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 嵌入式系统 </tag>
            
            <tag> 期末指北 </tag>
            
            <tag> ChatGPT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>信息奥赛题解｜昆虫繁殖</title>
      <link href="/2023/04/04/xin-xi-ao-sai-ti-jie-kun-chong-fan-zhi/"/>
      <url>/2023/04/04/xin-xi-ao-sai-ti-jie-kun-chong-fan-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="信息奥赛题解｜昆虫繁殖"><a href="#信息奥赛题解｜昆虫繁殖" class="headerlink" title="信息奥赛题解｜昆虫繁殖"></a>信息奥赛题解｜昆虫繁殖</h1><hr><h2 id="🚀-题目浏览"><a href="#🚀-题目浏览" class="headerlink" title="🚀 题目浏览"></a>🚀 题目浏览</h2><h3 id="【题目描述】"><a href="#【题目描述】" class="headerlink" title="【题目描述】"></a>【题目描述】</h3><p>科学家在热带森林中发现了一种特殊的昆虫，这种昆虫的繁殖能力很强。每对成虫过 $X$ 个月后开始产卵，每月产 $Y$ 对卵，每对卵要过两个月长成成虫。</p><p>假设每个成虫不死，第一个月只有一对成虫，且卵长成成虫后的第一个月不产卵( 过 $X$ 个月产卵)，问过 $Z$ 个月以后，共有成虫多少对？</p><p>$0 \le X \le 20,1 \le Y \le 20,X \le Z \le 50$</p><h3 id="【输入】"><a href="#【输入】" class="headerlink" title="【输入】"></a>【输入】</h3><p>$X,Y,Z$ 的数值。</p><h3 id="【输出】"><a href="#【输出】" class="headerlink" title="【输出】"></a>【输出】</h3><p>过 $Z$ 个月以后，共有成虫对数。</p><h3 id="【输入样例】"><a href="#【输入样例】" class="headerlink" title="【输入样例】"></a>【输入样例】</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token number">1</span> <span class="token number">2</span> <span class="token number">8</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="【输出样例】"><a href="#【输出样例】" class="headerlink" title="【输出样例】"></a>【输出样例】</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token number">37</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="【原题链接】"><a href="#【原题链接】" class="headerlink" title="【原题链接】"></a>【原题链接】</h3><p><a href="http://ybt.ssoier.cn:8088/problem_show.php?pid=1204">http://ybt.ssoier.cn:8088/problem_show.php?pid=1204</a></p><hr><h2 id="☘️-题解分析"><a href="#☘️-题解分析" class="headerlink" title="☘️ 题解分析"></a>☘️ 题解分析</h2><p><strong>昆虫繁殖</strong> 问题是 算法初学者 在学习 <strong>递推专题</strong> 时，必定遇到的问题之一。此题对于初学者来说 <strong>难度较高</strong>，很容易出现题目推着推着，就把各种变量、下标搞混的情况。😵‍💫</p><p>博主在阅读其他人写的题解时，要么解释的非常潦草，难以理解；要么干脆只有代码，没有解释。💦</p><p>所以在对本题进行了一定的研究后，博主撰写了此篇题解，希望能在未来帮助更多的小伙伴弄懂本题的递推关系，最后能够手撕本题代码。🧑🏻‍💻</p><p>在博主看来本题的难点主要有 3 个：</p><ul><li>第一，不知道如何表示「过了 z 个月」</li><li>第二，不知道如何得到递推方程</li><li>第三，推出来部分递推方程，却不知道如何设定边界条件，书写代码</li></ul><p>首先解决 <strong>第一个问题</strong>，该如何表示「<strong>过了 z 个月</strong>」？能否用列表的方式，来清晰的表式每一个月的数据 ？</p><p>该问题的关键在于，我们如何表示刚开始的第一个月？是从 0 开始，还是 1 开始 ? 实际上，两种方式都可以的，列表的方式如下：</p><ul><li>从 0 开始的月份下标，此时「过了 z 个月」，就对应 z 月（如过了 1 个月，就是从 0月 → 1 月）</li></ul><table><thead><tr><th align="center">月份</th><th align="center">0月</th><th align="center">1月</th><th align="center">2月</th><th align="center">3月</th><th align="center">4月</th><th align="center">…</th><th align="center">z 月</th></tr></thead><tbody><tr><td align="center"></td><td align="center">初始数据</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><ul><li>从 1 开始的月份下标，此时「过了 z 个月」，对应的是 z + 1 月（如过了 1 个月，就是从 1月 → 2 月）</li></ul><table><thead><tr><th align="center">月份</th><th align="center">1月</th><th align="center">2月</th><th align="center">3月</th><th align="center">4月</th><th align="center">5月</th><th align="center">…</th><th align="center">z + 1月</th></tr></thead><tbody><tr><td align="center"></td><td align="center">初始数据</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><p>在本文中，博主选择从第一种方式，即月份下标从 0 开始（原因会在下文分析完问题二、三后阐述）</p><br><p>对于 <strong>第二个问题</strong>，我们需要通过 <strong>模拟</strong> 的方式来推出递推方程。</p><p>首先，以 $x = 1, y = 2, z = 4$ 的情况进行模拟，此条件表示的是：</p><ul><li>过 $x = 1$ 个月，成虫开始产卵</li><li>每对成虫每次产 $y = 2$ 对卵</li><li>要求过 $z = 4$ 个月后，成虫的数量</li></ul><p>因为要求解成虫数量，所以比较容易想到的方式是 <strong>创建两个数组</strong>，一个存储每个月的成虫总数量（数组 <code>c</code> 表示），另一个存储每个月卵的总数量（数组 <code>r</code> 表示）。</p><p><strong>在第 0 个月</strong> 时，有 1 对成虫，0 对卵，所以 $c[0] = 1，r[0] = 0$</p><table><thead><tr><th align="center">月份</th><th align="center">0月</th><th align="center">1月</th><th align="center">2月</th><th align="center">3月</th><th align="center">4月</th></tr></thead><tbody><tr><td align="center">每月成虫总数量 c[i]</td><td align="center">1</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">每月卵总数量 r[i]</td><td align="center">0</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><p><strong>过了 1 个月后</strong>（1月），成虫开始产卵，所以在 1 月份时，卵的数量为 2，成虫数量仍为 1，$c[1] = 1，r[1] = 2$</p><table><thead><tr><th align="center">月份</th><th align="center">0月</th><th align="center">1月</th><th align="center">2月</th><th align="center">3月</th><th align="center">4月</th></tr></thead><tbody><tr><td align="center">每月成虫总数量 c[i]</td><td align="center">1</td><td align="center">1</td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">每月卵总数量 r[i]</td><td align="center">0</td><td align="center">2</td><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><p><strong>过了 2 个月后</strong>（2月），此时 1 月产的卵没有长大为成虫，所以成虫数量仍为 1，并且在这个月，成虫又产生了 y = 2 对卵，则此时共有 4 对卵（2 对新产生的卵，2 对为 1 月份仅成长了 1 个月的卵），$c[2] = 1,r[2] = 4$</p><table><thead><tr><th align="center">月份</th><th align="center">0月</th><th align="center">1月</th><th align="center">2月</th><th align="center">3月</th><th align="center">4月</th></tr></thead><tbody><tr><td align="center">每月成虫总数量 c[i]</td><td align="center">1</td><td align="center">1</td><td align="center">1</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">每月卵总数量 r[i]</td><td align="center">0</td><td align="center">2</td><td align="center">4</td><td align="center"></td><td align="center"></td></tr></tbody></table><p><strong>过了 3 个月后</strong>（3月），此时 1 月的卵成长为了成虫，<strong>成虫数量增加</strong>，所以 $c[3] = c[2] + r[3 - 2] = 3$；对于卵来说，此时有 2 只卵变成成虫，但是原先的 1 对成虫又产生了 2 只卵，所以 $r[3] = r[2] - 2 + 2 = 4$</p><div align="center">|        月份         | 0月  | 1月  | 2月  | 3月  | 4月  || :-----------------: | :--: | :--: | :--: | :--: | :--: || 每月成虫总数量 c[i] |  1   |  1   |  1   |  3   |      ||  每月卵总数量 r[i]  |  0   |  2   |  4   |  4   |      |</div><p>于是我们容易总结得到，成虫数量 $c[i] = c[i - 1] + r[i -2]$ （但是这其实是有问题的 ❌）</p><p>我们继续来看 <strong>4 月份</strong>，如果按照上面这种方式，那么 $c[4] = c[3] + r[4-2] = 8$。</p><p>但是仔细思考，2 月份的 4 对卵，已经有 2 对在 3 月份变成了成虫，实际上只有 2 对卵在 4 月份变成了成虫，正确的 $c[4] = c[3] + 2 = 6$ 才对。🤔</p><p>经过思考，我们发现上面公式里的 <code>r[i-2]</code>，<strong>不应该设成 2 个月前卵的总数量</strong>，因为如果是总数量，那么这些卵中有一部分来自于上个月，这部分卵在下一个月就会变成成虫，而不是等 2 个月后才变成成虫。💡</p><p>所以，更加合理的表示方式，应该是将「<strong>r 数组设置为每个月新增的卵的数量</strong>」。即每个月的成虫总数量 <code>c[i]</code>，应该等于 上个月成虫的总数量 <code>c[i-1]</code> + 上 2 个月新增的卵的数量 <code>r[i-2]</code>（其他时间产生的卵和 <code>c[i]</code> 的计算并没有关系）✅ </p><p>这也是为什么很多题解中，选择设置 **c 为每月成虫<u><em>总数量</em></u>**，但是 <strong>r 为每月<u><em>新增</em></u> 的卵的数量</strong>的原因。</p><p>这样设定变量含义，就能够得到正确的递推方程：<br>$$<br>c[i] = c[i - 1] + r[i - 2]\r[i] = c[i -x] * y<br>$$<br>递推方程含义为（在 x 个月之后）：</p><p>每月成虫总数量 $c[i]$ = 上一个月成虫总数量 $c[i -1]$ + 上 2 个月新增的卵的数量 $r[i - 2]$</p><p>每月新增的卵的数量 $r[i]$ = 上 x 个月的成虫总数量 $c[i-x] * y$</p><p>在理解了这一步后，我们再重新来推一下这个表格：</p><p>在 <code>0 - x-1</code> 月，第一对成虫不产卵，$c[i] \equiv  1,r[i] \equiv 0$，即：</p><ul><li>在第 0 月时，$c[0] = 1,r[0] = 0$</li></ul><table><thead><tr><th align="center">月份</th><th align="center">0月</th><th align="center">1月</th><th align="center">2月</th><th align="center">3月</th><th align="center">4月</th></tr></thead><tbody><tr><td align="center">每月成虫总数量 c[i]</td><td align="center">1</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">每月卵新增数量 r[i]</td><td align="center">0</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><p>在 <code>x</code> 月，第一对成虫开始产卵，且产了 y 对卵，$c[x] =  1,r[x] = y$，即：</p><ul><li>在第 1 月时，$c[1] = 1,r[1] = 2$</li></ul><table><thead><tr><th align="center">月份</th><th align="center">0月</th><th align="center">1月</th><th align="center">2月</th><th align="center">3月</th><th align="center">4月</th></tr></thead><tbody><tr><td align="center">每月成虫总数量 c[i]</td><td align="center">1</td><td align="center">1</td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">每月卵新增数量 r[i]</td><td align="center">0</td><td align="center">2</td><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><p>在 <code>x+1 - z</code> 月，递推关系满足上述递推方程，有：</p><ul><li>在第 2 月时，$c[2] = c[1] + r[0] = 1,r[2] = c[2 - 1] * 2 = 2$</li><li>在第 3 月时，$c[3] = c[2] + r[1] = 3,r[3] = c[3 - 1] * 2 = 2$</li><li>在第 4 月时，$c[4] = c[3] + r[2] = 5,r[4] = c[4 - 1] * 2 = 6$</li></ul><table><thead><tr><th align="center">月份</th><th align="center">0月</th><th align="center">1月</th><th align="center">2月</th><th align="center">3月</th><th align="center">4月</th></tr></thead><tbody><tr><td align="center">每月成虫总数量 c[i]</td><td align="center">1</td><td align="center">1</td><td align="center">1</td><td align="center">3</td><td align="center">5</td></tr><tr><td align="center">每月卵新增数量 r[i]</td><td align="center">0</td><td align="center">2</td><td align="center">2</td><td align="center">2</td><td align="center">6</td></tr></tbody></table><p>按照样例中 $z=8$，我们也可以得到下表，样例答案 c[8] = 37 就是这样来的。</p><table><thead><tr><th align="center">月份</th><th align="center">0月</th><th align="center">1月</th><th align="center">2月</th><th align="center">3月</th><th align="center">4月</th><th align="center">5月</th><th align="center">6月</th><th align="center">7月</th><th align="center">8月</th></tr></thead><tbody><tr><td align="center">每月成虫总数量 c[i]</td><td align="center">1</td><td align="center">1</td><td align="center">1</td><td align="center">3</td><td align="center">5</td><td align="center">7</td><td align="center">13</td><td align="center">23</td><td align="center">37</td></tr><tr><td align="center">每月卵新增数量 r[i]</td><td align="center">0</td><td align="center">2</td><td align="center">2</td><td align="center">2</td><td align="center">6</td><td align="center">10</td><td align="center">14</td><td align="center">26</td><td align="center">46</td></tr></tbody></table><p>下面，我们以 $x = 2,y=3,z = 4$ 为例，再次模拟。</p><p>首先，在 <code>0 - x-1</code> 月，第一对成虫是不产卵的，所以 $c[i] \equiv  1,r[i] \equiv 0$，即：</p><ul><li>在第 0 月时，$c[0] = 1,r[0] = 0$</li><li>在第 1 月时，$c[1] = 1,r[1] = 0$</li></ul><table><thead><tr><th align="center">月份</th><th align="center">0月</th><th align="center">1月</th><th align="center">2月</th><th align="center">3月</th><th align="center">4月</th></tr></thead><tbody><tr><td align="center">每月成虫总数量 c[i]</td><td align="center">1</td><td align="center">1</td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">每月卵新增数量 r[i]</td><td align="center">0</td><td align="center">0</td><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><p>在 <code>x</code> 月，第一对成虫开始产卵，且产了 y 对卵，$c[x] =  1,r[x] = y$，即：</p><ul><li>在第 2 月时，$c[2] = 1,r[2] = 3$</li></ul><table><thead><tr><th align="center">月份</th><th align="center">0月</th><th align="center">1月</th><th align="center">2月</th><th align="center">3月</th><th align="center">4月</th></tr></thead><tbody><tr><td align="center">每月成虫总数量 c[i]</td><td align="center">1</td><td align="center">1</td><td align="center">1</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">每月卵新增数量 r[i]</td><td align="center">0</td><td align="center">0</td><td align="center">3</td><td align="center"></td><td align="center"></td></tr></tbody></table><p>在 <code>x+1 - z</code> 月，递推关系满足上述递推方程，有：</p><ul><li>在第 3 月时，$c[3] = c[2] + r[1] = 1,r[3] = c[3 - 2] * 3 = 3$</li><li>在第 4 月时，$c[4] = c[3] + r[2] = 4,r[4] = c[4 - 2] * 3 = 3$</li></ul><table><thead><tr><th align="center">月份</th><th align="center">0月</th><th align="center">1月</th><th align="center">2月</th><th align="center">3月</th><th align="center">4月</th></tr></thead><tbody><tr><td align="center">每月成虫总数量 c[i]</td><td align="center">1</td><td align="center">1</td><td align="center">1</td><td align="center">1</td><td align="center">4</td></tr><tr><td align="center">每月卵新增数量 r[i]</td><td align="center">0</td><td align="center">0</td><td align="center">3</td><td align="center">3</td><td align="center">3</td></tr></tbody></table><p>至此，整道题目的逻辑关系基本理清。✅ </p><br><p>在梳理完了递推关系后，我们尝试书写代码（这题对于初学者来说确实麻烦，但是 <strong>对逻辑思维是很好的锻炼</strong>）</p><p>我们从上面的过程入手，<strong>边界条件</strong> 就比较容易确定。显然，总过程分为 3 段，分别是 <code>0-x-1</code>月, <code>x</code>月, <code>x+1-z</code> 月，所以我们的程序也可以分为 3 段来写：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//模拟 0 - x - 1 月</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>r<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//模拟 x 月</span>c<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>r<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> y<span class="token punctuation">;</span><span class="token comment">//模拟 x + 1 - z 月</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> z<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  c<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> r<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  r<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> r<span class="token punctuation">[</span>i <span class="token operator">-</span> x<span class="token punctuation">]</span> <span class="token operator">*</span> y<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样，我们就完成了本题的核心代码（恭喜 🎉🎉🎉）</p><p>其实，在对 $x$ 月的赋值时，也可以将其合并到第 3 段，但是这个合并操作要求 x &gt; 1（因为第 3 段的 递推方程中包含 <code>r[i - 2]</code>，所以需要保证 <code>i - 2 &gt; 0</code>）。为了代码逻辑更加清晰，博主采用了 3 段式。</p><p>当然，博主也看到有代码是月份从 1 开始的，这样的话，「过了 z 个月」就是 z + 1 月，最终输出的答案是 c[z + 1]，这样从 1 开始的下标就可以保证 2、3 段合并时 $i - 2 &gt; 0$ 了，也是可以的。</p><p>在本文中，博主选择月份下标从 0 开始，这样「过了 z 个月」就是 z 月，比较容易记忆，大伙可以根据喜好自行选择。</p><p>🍉 PS：本题需要使用 <code>long long</code> 类型，<code>int</code> 类型不够用。</p><hr><h2 id="🧑🏻‍💻-C-代码"><a href="#🧑🏻‍💻-C-代码" class="headerlink" title="🧑🏻‍💻 C++ 代码"></a>🧑🏻‍💻 C++ 代码</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e2</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span>ll c<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">//c数组存储每个月成虫的总数量</span>ll r<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">//r数组存储每个月新增的昆虫数量</span>ll x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    cin <span class="token operator">&gt;&gt;</span> x <span class="token operator">&gt;&gt;</span> y <span class="token operator">&gt;&gt;</span> z<span class="token punctuation">;</span>      <span class="token comment">//模拟 0 - x - 1 月</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        c<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        r<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//模拟 x 月</span>    c<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    r<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> y<span class="token punctuation">;</span>      <span class="token comment">//模拟 x + 1 - z 月</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> z <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        r<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">[</span>i <span class="token operator">-</span> x<span class="token punctuation">]</span> <span class="token operator">*</span> y<span class="token punctuation">;</span>        c<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> r<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> c<span class="token punctuation">[</span>z<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 信息奥赛题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 信息奥赛 </tag>
            
            <tag> C++ </tag>
            
            <tag> 递推 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python学习笔记｜List</title>
      <link href="/2023/04/02/python-xue-xi-bi-ji-list/"/>
      <url>/2023/04/02/python-xue-xi-bi-ji-list/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Python基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>信息奥赛题解｜爬楼梯</title>
      <link href="/2023/04/01/xin-xi-ao-sai-ti-jie-pa-lou-ti/"/>
      <url>/2023/04/01/xin-xi-ao-sai-ti-jie-pa-lou-ti/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="信息奥赛题解｜爬楼梯"><a href="#信息奥赛题解｜爬楼梯" class="headerlink" title="信息奥赛题解｜爬楼梯"></a>信息奥赛题解｜爬楼梯</h1><hr><h2 id="🚀-题目浏览"><a href="#🚀-题目浏览" class="headerlink" title="🚀 题目浏览"></a>🚀 题目浏览</h2><h3 id="【题目描述】"><a href="#【题目描述】" class="headerlink" title="【题目描述】"></a>【题目描述】</h3><p>树老师爬楼梯，他可以每次走 $1$ 级或者 $2$ 级，输入楼梯的级数，求不同的走法数。</p><p>例如：楼梯一共有 $3$ 级，他可以每次都走一级，或者第一次走一级，第二次走两级，也可以第一次走两级，第二次走一级，一共 $3$ 种方法。</p><h3 id="【输入】"><a href="#【输入】" class="headerlink" title="【输入】"></a>【输入】</h3><p>输入包含若干行，每行包含一个正整数 $N$，代表楼梯级数，$1≤N≤30$。</p><h3 id="【输出】"><a href="#【输出】" class="headerlink" title="【输出】"></a>【输出】</h3><p>不同的走法数，每一行输入对应一行输出。</p><h3 id="【输入样例】"><a href="#【输入样例】" class="headerlink" title="【输入样例】"></a>【输入样例】</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token number">5</span><span class="token number">8</span><span class="token number">10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="【输出样例】"><a href="#【输出样例】" class="headerlink" title="【输出样例】"></a>【输出样例】</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token number">8</span><span class="token number">34</span><span class="token number">89</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="【原题链接】"><a href="#【原题链接】" class="headerlink" title="【原题链接】"></a>【原题链接】</h3><p><a href="http://ybt.ssoier.cn:8088/problem_show.php?pid=1204">http://ybt.ssoier.cn:8088/problem_show.php?pid=1204</a></p><hr><h2 id="☘️-题解分析"><a href="#☘️-题解分析" class="headerlink" title="☘️ 题解分析"></a>☘️ 题解分析</h2><p>爬楼梯问题也是 <strong>递推思想</strong> 的典型体现。</p><p>我们可以把走到第 <code>i</code> 级楼梯的方案数 <code>f[i]</code>  看成 <strong>一个集合</strong>，由「最后一步走 1 级楼梯的方案数 <code>f[i-1]</code> 」和 「最后一步走 2 级楼梯的方案数 <code>f[i-2]</code> 」这 <strong>两个子集</strong> 构成。</p><p>比如走到第 <code>5</code> 级楼梯的方案数 <code>f[5]</code> ，按照最后一步走的级数可以分为以下两个子集：</p><ul><li>最后一步走 1 级，那么走最后一步之前，我们处在第 4 级台阶，所以这个子集的大小为 <code>f[4]</code></li><li>最后一步走 2 级，那么走最后一步之前，我们处在第 3 级台阶，所以这个子集的大小为 <code>f[3]</code></li></ul><p>这样的分割方法做到了 <strong>不重复、不遗漏</strong>，因此只需按照方程 <code>f[i] = f[i-1] + f[i-2]</code> 去递推即可。</p><h2 id="❗️-误区提示"><a href="#❗️-误区提示" class="headerlink" title="❗️ 误区提示"></a>❗️ 误区提示</h2><p>此题的一个 <strong>常见错误</strong>，就是把递推方程书写成 <code>f[i] = f[i-1] + 2*f[i-2]</code>。</p><p>这是因为在划分子集时，把第二个子集「<strong>最后一步走 2 级</strong>」✅ 误解成了「<strong>最后一步走 2 级有多少种方案</strong>」❌</p><p>这就导致在考虑 <code>f[i-2]</code> 时，认为 <strong>最后一步走 2 级有 2 种方案</strong>：即一次走 2 级，或先走 1 级，再走 1 级。把 <code>f[i-2]</code> 与 <code>f[2]</code> 产生了联系，所以在 <code>f[i-2]</code> 前乘了 2。❌ </p><p>但是仔细思考，我们会发现上面这种错误的想法，<strong>本质上是因为两个子集出现了重复</strong>。</p><p> 「最后一步走 2 级，但是每次走 1 级」的方案，其实是包含在第一个子集 「最后一步走 1 级」中的。因为如果先走 1 级，再走 1 级，那最后一步就是 1 级，根本不能划分在「最后一步走 2 级」这个子集中，从而产生了错误。</p><p>也就是说，<code>f[i-2]</code> 与 <code>f[2]</code> 是没有关系的❗️</p><p>初学者在初学时犯了这种错误后，需要仔细思考原因，避免下次再走入这个误区。🍀</p><hr><h2 id="🧑🏻‍💻-C-代码"><a href="#🧑🏻‍💻-C-代码" class="headerlink" title="🧑🏻‍💻 C++ 代码"></a>🧑🏻‍💻 C++ 代码</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">35</span><span class="token punctuation">;</span><span class="token keyword">int</span> tmp<span class="token punctuation">;</span><span class="token keyword">int</span> f<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//cin读入优化</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    f<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    f<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        f<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> f<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> f<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">//最后一步走1级的方案 + 最后一步走2级的方案</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">&gt;&gt;</span> tmp<span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> f<span class="token punctuation">[</span>tmp<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 信息奥赛题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 信息奥赛 </tag>
            
            <tag> C++ </tag>
            
            <tag> 递推 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux命令行大全｜读书笔记</title>
      <link href="/2023/03/31/linux-ming-ling-xing-da-quan-du-shu-bi-ji/"/>
      <url>/2023/03/31/linux-ming-ling-xing-da-quan-du-shu-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="Book-Notes-The-Linux-Command-Line-Chapter-5"><a href="#Book-Notes-The-Linux-Command-Line-Chapter-5" class="headerlink" title="Book Notes: The Linux Command Line - Chapter 5"></a>Book Notes: The Linux Command Line - Chapter 5</h1><hr><h2 id="About-this-Book-📚"><a href="#About-this-Book-📚" class="headerlink" title="About this Book 📚"></a>About this Book 📚</h2><p><strong>Name</strong>: <em>The Linux Command Line</em></p><p><strong>Author</strong>: William E. Shotts</p><p><strong>Publisher</strong>: No Starch Press</p><p><strong>Cover</strong>:</p><p><img src="https://ricky-typora-notes.oss-cn-hangzhou.aliyuncs.com/51kjjarKXBL._SX376_BO1,204,203,200_.jpg" alt="The Linux Command Line"></p><p><strong>Translation Version:</strong></p><p><img src="https://img2.doubanio.com/view/subject/l/public/s27318531.jpg" alt="Linux命令行大全"></p><hr><h2 id="Notes-✍️"><a href="#Notes-✍️" class="headerlink" title="Notes ✍️"></a>Notes ✍️</h2><h3 id="4-Types-of-Commands"><a href="#4-Types-of-Commands" class="headerlink" title="4 Types of Commands"></a>4 Types of Commands</h3><ul><li><strong>An executable program</strong><ul><li>All files we saw in <code>/usr/bin</code> are executable programs. Within this category, programs can be <em><strong>compiled binaries</strong></em> such as programs written in C and C++, or programs written in scripting languages such as the shell, Perl, Python, Ruby, and so on.</li></ul></li><li><strong>A built-in command</strong><ul><li>A command <em><strong>built into the shell itself</strong></em>. <code>bash</code> supports a number of commands internally called <em>shell builtins</em>. The <code>cd</code> command, for example, is a shell builtin.</li></ul></li><li><strong>A shell function</strong><ul><li>Shell functions are miniature shell scripts incorporated into the environment.</li></ul></li><li><strong>An alias</strong><ul><li>Aliases are commands that we can <em><strong>define by ourselves</strong></em>, built from other commands.</li></ul></li></ul><h3 id="Commands-of-Chapter-5"><a href="#Commands-of-Chapter-5" class="headerlink" title="Commands of Chapter 5"></a>Commands of Chapter 5</h3><ul><li><p><code>type</code></p><ul><li>Display information about command type</li><li>Examples<ul><li><code>type ls</code></li><li><code>type cd</code></li><li><code>type mv</code></li></ul></li></ul></li><li><p><code>which</code></p><ul><li>Display an Executeable’s Location</li><li>Examples<ul><li><code>which ls</code></li><li><code>which cp</code></li></ul></li></ul></li><li><p><code>help</code></p><ul><li>Display information about built-in commands</li><li>Examples<ul><li><code>help cd</code></li></ul></li></ul></li><li><p><code>--help</code></p><ul><li>Display a description of the command’s supported syntax and options</li><li>Examples<ul><li><code>mkdir --help</code></li><li><code>mv --help</code></li></ul></li></ul></li><li><p><code>man</code> </p><ul><li>Display a program’s mannual page</li><li>Examples<ul><li><code>man mv</code></li></ul></li></ul></li><li><p><code>whatis</code></p><ul><li>Display one-line manual page descriptions<ul><li><code>whatis mv</code></li><li><code>whatis cp</code></li></ul></li></ul></li><li><p><code>alias</code></p><ul><li>Create an alias for a command</li><li>🍉 PS: The <code>alias</code> commands disappear when shell session ends, but we will learn how to store them for future use in later chapters.</li></ul></li></ul><hr><h2 id="Lab-🧑🏻‍💻"><a href="#Lab-🧑🏻‍💻" class="headerlink" title="Lab 🧑🏻‍💻"></a>Lab 🧑🏻‍💻</h2><h3 id="Why-Labs"><a href="#Why-Labs" class="headerlink" title="Why Labs ?"></a>Why Labs ?</h3><p>Lab provides <strong>a hands-on learning experience</strong> that allows us <strong>to apply theoretical knowledge to practical situations</strong>. This helps us to better understand concepts and retain information more effectively.</p><h3 id="Lab1"><a href="#Lab1" class="headerlink" title="Lab1"></a>Lab1</h3><blockquote><p>use <code>type</code> , <code>which</code>, <code>help</code>, <code>whatis</code>, <code>man</code> to check fundamental commands</p></blockquote><ul><li><code>pwd</code></li><li><code>cd</code></li><li><code>ls</code></li><li><code>mkdir</code></li><li><code>cp</code></li><li><code>mv</code></li><li><code>rm</code></li><li><code>less</code></li><li><code>file</code></li></ul><hr><h3 id="Lab2"><a href="#Lab2" class="headerlink" title="Lab2"></a>Lab2</h3><p><strong>Prerequisites</strong></p><blockquote><p> Try using <code>;</code> to write commands in 1 line</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span><span class="token punctuation">;</span> <span class="token builtin class-name">cd</span> Desktop<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>Task</strong></p><blockquote><p>Use <code>alias</code> to change current directory to <code>Desktop</code></p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">type</span> cdd <span class="token comment"># check if 'cdd' is used</span><span class="token builtin class-name">alias</span> <span class="token assign-left variable">cdd</span><span class="token operator">=</span><span class="token string">'cd; cd Desktop;'</span> <span class="token comment"># if not, assgin these command lines to 'cdd'</span>cdd <span class="token comment"># use this command</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英文读书笔记 </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>信息奥赛实训报告｜STL</title>
      <link href="/2023/03/26/xin-xi-ao-sai-shi-xun-bao-gao-stl/"/>
      <url>/2023/03/26/xin-xi-ao-sai-shi-xun-bao-gao-stl/</url>
      
        <content type="html"><![CDATA[<h1 id="【信息奥赛实训报告】STL"><a href="#【信息奥赛实训报告】STL" class="headerlink" title="【信息奥赛实训报告】STL"></a>【信息奥赛实训报告】STL</h1><p><img src="http://ricky-typora-notes.oss-cn-hangzhou.aliyuncs.com/2023-02-21-170357.jpg" alt="信息奥赛实训报告"></p><h2 id="实训概要-📙"><a href="#实训概要-📙" class="headerlink" title="实训概要 📙"></a>实训概要 📙</h2><hr><h3 id="实训专题"><a href="#实训专题" class="headerlink" title="实训专题"></a>实训专题</h3><p>STL 与基础数据结构专题训练</p><h3 id="实训目的"><a href="#实训目的" class="headerlink" title="实训目的"></a>实训目的</h3><ul><li>掌握STL常用的算法、容器、容器适配器的使用方法。</li><li>能够利用STL的算法、容器、容器适配器求解问题。</li></ul><h3 id="题目列表"><a href="#题目列表" class="headerlink" title="题目列表"></a>题目列表</h3><ul><li>A：摘苹果</li><li>B：立方和</li><li>C：计算个数</li><li>D：后缀表达式的值</li><li>E：做蛋糕</li><li>F：查资料</li><li>G：明明的随机数</li></ul><h2 id="题解-🧑🏻‍💻"><a href="#题解-🧑🏻‍💻" class="headerlink" title="题解 🧑🏻‍💻"></a>题解 🧑🏻‍💻</h2><hr><h3 id="A：摘苹果"><a href="#A：摘苹果" class="headerlink" title="A：摘苹果"></a>A：摘苹果</h3><h4 id="【题目描述】"><a href="#【题目描述】" class="headerlink" title="【题目描述】"></a>【题目描述】</h4><p>苹果树上有 $n$ 个苹果，每个苹果的高度分別为 $h_{1},h_{2},\dots,h_{n}$。</p><p>你拥有一个非常方便的摘苹果工具，每次可以把指定高度上的所有苹果全部摘下来。</p><p>你打算摘 $q$ 次，第 $i$ 次摘高度为 $a_{i}$ 的所有苹果。</p><p>问每次可以摘到多少个苹果？</p><h4 id="【输入】"><a href="#【输入】" class="headerlink" title="【输入】"></a>【输入】</h4><p>第一行包含两个正整数 $n,q(1≤n≤10^{6},1≤q≤2*10^{5})$，分别表示苹果的数量和摘苹果的次数。</p><p>第二行包含 $n$ 个正整数 $h_{1},h_{2},\dots,h_{n}(1\le h_{i} \le 10^{9})$，分别表示每个苹果的高度。</p><p>其后 $q$ 行，第 $i$ 行包含一个正整数 $a(1≤ a_i ≤ 10^9)$，表示当次要摘的苹果的高度。</p><h4 id="【输出】"><a href="#【输出】" class="headerlink" title="【输出】"></a>【输出】</h4><p>对于每次摘苹果的操作，在一行内输出一个整数，表示这一次摘到的苹果的数量。</p><h4 id="【输入样例】"><a href="#【输入样例】" class="headerlink" title="【输入样例】"></a>【输入样例】</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token number">6</span> <span class="token number">4</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">2</span> <span class="token number">4</span><span class="token number">1</span><span class="token number">2</span><span class="token number">1</span><span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="【输出样例】"><a href="#【输出样例】" class="headerlink" title="【输出样例】"></a>【输出样例】</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token number">3</span><span class="token number">2</span><span class="token number">0</span><span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="【题目分析】"><a href="#【题目分析】" class="headerlink" title="【题目分析】"></a>【题目分析】</h4><p>本题考查 STL 中的 <code>map</code> ，只需统计每个高度的苹果数，然后采摘时输出即可，难度较低。</p><p>另外题目输入量较大，使用 <code>cin读入优化</code> 可以有效减少时间。</p><h4 id="【-C-代码】"><a href="#【-C-代码】" class="headerlink" title="【 C++ 代码】"></a>【 C++ 代码】</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> q<span class="token punctuation">,</span> tmp<span class="token punctuation">;</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> mp<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//cin读入优化</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> q<span class="token punctuation">;</span>    mp<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        cin <span class="token operator">&gt;&gt;</span> tmp<span class="token punctuation">;</span>        mp<span class="token punctuation">[</span>tmp<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>   <span class="token comment">//该高度苹果数量累加</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> q<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        cin <span class="token operator">&gt;&gt;</span> tmp<span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> mp<span class="token punctuation">[</span>tmp<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>  <span class="token comment">//输出该高度苹果总数</span>        mp<span class="token punctuation">[</span>tmp<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">//清零当前高度苹果数</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="B：立方和"><a href="#B：立方和" class="headerlink" title="B：立方和"></a>B：立方和</h3><h4 id="【题目描述】-1"><a href="#【题目描述】-1" class="headerlink" title="【题目描述】"></a>【题目描述】</h4><p>给你一个正整数 $x$，问是否存在至少一对正整数对 $(a,b)$ 满足 $a^3+b^3=x$?</p><h4 id="【输入】-1"><a href="#【输入】-1" class="headerlink" title="【输入】"></a>【输入】</h4><p>第一行包含一个正整数 $T(1≤ T≤100)$，表示测试数据组数。</p><p>每组数据占一行，包含一个正整数 $x(1≤ x ≤10^{12})$。</p><h4 id="【输出】-1"><a href="#【输出】-1" class="headerlink" title="【输出】"></a>【输出】</h4><p>对于每组数据，如果存在至少一对 $(a,b)$ 满足题意，输出 <code>YES</code>，否则输出 <code>NO</code></p><h4 id="【输入样例】-1"><a href="#【输入样例】-1" class="headerlink" title="【输入样例】"></a>【输入样例】</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token number">6</span><span class="token number">1</span><span class="token number">2</span><span class="token number">3</span><span class="token number">8</span><span class="token number">9</span><span class="token number">8567958184</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="【输出样例】-1"><a href="#【输出样例】-1" class="headerlink" title="【输出样例】"></a>【输出样例】</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">NOYESNONOYESYES<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="【题目分析】-1"><a href="#【题目分析】-1" class="headerlink" title="【题目分析】"></a>【题目分析】</h4><p>本题有两种思路：</p><ol><li>由于 x 最大不超过 $10^{12}$，故 $a,b$ 的范围在 $[1,10^{4}]$，因此可以对 $a$ 枚举，对 $b$ 用二分，实测可以 AC。（但是不能 $a,b$ 均枚举，会超时）</li><li>可以先将所有 $a^3$ 存入容器中，然后枚举 $b$ ，看 $x-b^3$ 是否在容器中，若有，则有解。</li></ol><p>🍉 PS1：使用 <code>vector</code> 会超时，因为在 <code>vector</code> 中查找元素，时间复杂度为 $O(N)$；而在 <code>set、map</code> 中，查找的时间复杂度为 $O(logN)$，时间会大大降低。</p><p>🍉 PS2：本题数据上限很大，已经超出了 <code>int</code> 类型的范围，需要使用 <code>long long</code> 类型。（ <code>1ll</code> 是 1 的 <code>long long</code> 形式，<code>任何 int 类型数据 * 1ll</code> 后均能转换为 <code>long long</code> 类型）</p><h4 id="【-C-代码】-1"><a href="#【-C-代码】-1" class="headerlink" title="【 C++ 代码】"></a>【 C++ 代码】</h4><p>思路1：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span>ll T<span class="token punctuation">,</span> tmp<span class="token punctuation">,</span> flag<span class="token punctuation">;</span>ll <span class="token function">f</span><span class="token punctuation">(</span>ll a<span class="token punctuation">,</span> ll b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//cin读入优化</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> T<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>T<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cin <span class="token operator">&gt;&gt;</span> tmp<span class="token punctuation">;</span>        flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>ll a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> a <span class="token operator">&lt;=</span> <span class="token number">10001</span><span class="token punctuation">;</span> <span class="token operator">++</span>a<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">//对a枚举</span>            ll b<span class="token punctuation">,</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> mid<span class="token punctuation">;</span>            ll l <span class="token operator">=</span> a<span class="token punctuation">;</span>            ll r <span class="token operator">=</span> <span class="token number">10001</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">//对b二分</span>                mid <span class="token operator">=</span> l <span class="token operator">+</span> <span class="token punctuation">(</span>r <span class="token operator">-</span> l<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>                res <span class="token operator">=</span> <span class="token function">f</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>res <span class="token operator">==</span> tmp<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    b <span class="token operator">=</span> mid<span class="token punctuation">;</span>                    flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>res <span class="token operator">&lt;</span> tmp<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    l <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    r <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>                      <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token comment">//已找到，退出a的枚举</span>        <span class="token punctuation">}</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"YES"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>  <span class="token comment">//输出结果</span>        <span class="token keyword">else</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"NO"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span>ll <span class="token function">f</span><span class="token punctuation">(</span>ll a<span class="token punctuation">,</span> ll b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> a <span class="token operator">*</span> a <span class="token operator">*</span> a <span class="token operator">+</span> b <span class="token operator">*</span> b <span class="token operator">*</span> b<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>思路2：</p><p>AC 版 ✅</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">int</span> T<span class="token punctuation">,</span> flag<span class="token punctuation">;</span>ll x<span class="token punctuation">;</span>set<span class="token operator">&lt;</span>ll<span class="token operator">&gt;</span> s<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//cin读入优化</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">10001</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">1ll</span> <span class="token operator">*</span> i <span class="token operator">*</span> i <span class="token operator">*</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//向s中存入所有可能的a^3</span>    <span class="token punctuation">}</span>    cin <span class="token operator">&gt;&gt;</span> T<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>T<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        cin <span class="token operator">&gt;&gt;</span> x<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>ll b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> b <span class="token operator">*</span> b <span class="token operator">*</span> b <span class="token operator">&lt;</span> x<span class="token punctuation">;</span> b<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment">//枚举b</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>x <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">*</span> b <span class="token operator">*</span> b <span class="token operator">*</span> b<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">//查看(x-b^3)是否在set中</span>                flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"YES"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">else</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"NO"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>vector</code> 超时版 ❌  </p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">int</span> T<span class="token punctuation">,</span> flag<span class="token punctuation">;</span>ll x<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>ll<span class="token operator">&gt;</span> v<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>ll<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>iterator it<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//cin读入优化</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">10001</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">1ll</span> <span class="token operator">*</span> i <span class="token operator">*</span> i <span class="token operator">*</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//1ll是1的long long 形式</span>    <span class="token punctuation">}</span>    cin <span class="token operator">&gt;&gt;</span> T<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>T<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        cin <span class="token operator">&gt;&gt;</span> x<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>ll b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token number">1ll</span> <span class="token operator">*</span> b <span class="token operator">*</span> b <span class="token operator">*</span> b <span class="token operator">&lt;</span> x<span class="token punctuation">;</span> b<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">//使用vector查找时会超时</span>            it <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> x <span class="token operator">-</span> <span class="token number">1ll</span> <span class="token operator">*</span> b <span class="token operator">*</span> b <span class="token operator">*</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>it <span class="token operator">!=</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"YES"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">else</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"NO"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="C：计算个数"><a href="#C：计算个数" class="headerlink" title="C：计算个数"></a>C：计算个数</h3><h4 id="【题目描述】-2"><a href="#【题目描述】-2" class="headerlink" title="【题目描述】"></a>【题目描述】</h4><p>给定一个正整数 $n$，你可以执行以下操作： </p><ul><li>不做处理</li><li>在当前数的左侧拼接一个正整数。如果此前尚未拼接过，则拼接的正整数不能超过原数 $n$ 的一半，否则不能超过上一次被拼接的数的一半。拼接完成后，可以继续按照此规则继续处理，直到不能再加正整数为止，或者不做处理。</li></ul><p>问总共能处理出多少种正整数？</p><h4 id="【输入】-2"><a href="#【输入】-2" class="headerlink" title="【输入】"></a>【输入】</h4><p>输入仅一个正整数 $n(1 ≤ n ≤ 1000)$。</p><h4 id="【输出】-2"><a href="#【输出】-2" class="headerlink" title="【输出】"></a>【输出】</h4><p>输出一个整数，表示能被处理出来的数字的种类数。</p><h4 id="【输入样例】-2"><a href="#【输入样例】-2" class="headerlink" title="【输入样例】"></a>【输入样例】</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token number">4</span><span class="token number">6</span><span class="token number">8</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="【输出样例】-2"><a href="#【输出样例】-2" class="headerlink" title="【输出样例】"></a>【输出样例】</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token number">4</span><span class="token number">6</span><span class="token number">10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><hr><h4 id="【题目分析】-2"><a href="#【题目分析】-2" class="headerlink" title="【题目分析】"></a>【题目分析】</h4><p>本题考查 <strong>递推</strong> 思想。</p><p>以题目中的 8 为例，<code>f(8)</code> 代表 8 拼接后的总个数。</p><p><code>f(8)</code> = <code>f(4)</code> 的个数与 8 拼 + <code>f(3)</code> 的个数与 8 拼 + <code>f(2)</code> 的个数与8拼 + <code>f(1)</code> 的个数与8拼，即  <code>f(8) = f(4) + f(3) + f(2) + f(1)</code>。</p><p>因此从 递推 角度，从前往后推，即可得到每一个 <code>f(n)</code> 拼接后的个数</p><h4 id="【-C-代码】-2"><a href="#【-C-代码】-2" class="headerlink" title="【 C++ 代码】"></a>【 C++ 代码】</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> NMAX <span class="token operator">=</span> <span class="token number">1005</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> tmp<span class="token punctuation">;</span>ll f<span class="token punctuation">[</span>NMAX<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//cin读入优化</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    f<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NMAX<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        f<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> i <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>            f<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> f<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="D：后缀表达式的值"><a href="#D：后缀表达式的值" class="headerlink" title="D：后缀表达式的值"></a>D：后缀表达式的值</h3><h4 id="【题目描述】-3"><a href="#【题目描述】-3" class="headerlink" title="【题目描述】"></a>【题目描述】</h4><p>从键盘读入一个后缀表达式（字符串），只含有 0-9 组成的运算数及加（+）、减（-）、乘（*）、除（/）四种运算符。</p><p>每个运算数之间用一个空格隔开，不需要判断给你的表达式是否合法。</p><h4 id="【输入】-3"><a href="#【输入】-3" class="headerlink" title="【输入】"></a>【输入】</h4><p>一个后缀表达式，以 @ 作为结束标志。</p><p>数据保证输入的运算数均是正整数，且每个数值在运算过程中均不会超过 int 所表示的范围。</p><p>除法当作整除即可。</p><h4 id="【输出】-3"><a href="#【输出】-3" class="headerlink" title="【输出】"></a>【输出】</h4><p>输出一个整数，表示后缀表达式的值。</p><h4 id="【输入样例】-3"><a href="#【输入样例】-3" class="headerlink" title="【输入样例】"></a>【输入样例】</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token number">16</span> <span class="token number">9</span> <span class="token number">4</span> <span class="token number">3</span> <span class="token operator">+</span><span class="token operator">*</span><span class="token operator">-</span>@<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="【输出样例】-3"><a href="#【输出样例】-3" class="headerlink" title="【输出样例】"></a>【输出样例】</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token operator">-</span><span class="token number">47</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h4 id="【题目分析】-3"><a href="#【题目分析】-3" class="headerlink" title="【题目分析】"></a>【题目分析】</h4><p>本题考查 STL 中的 <code>stack</code> ，需要在理解 后缀表达式 的基础上，利用 <code>stack</code> 书写相应代码</p><blockquote><p>后缀表达式 相关知识点博客：<a href="http://t.csdn.cn/vvkbP">http://t.csdn.cn/vvkbP</a></p></blockquote><p>🍉 PS：本题数据的读取推荐使用 <code>scanf</code>，<code>cin</code> 在读取单个字符时，会跳过空格，而 <code>scanf</code>不会</p><h4 id="【-C-代码】-3"><a href="#【-C-代码】-3" class="headerlink" title="【 C++ 代码】"></a>【 C++ 代码】</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> s<span class="token punctuation">;</span><span class="token keyword">char</span> c<span class="token punctuation">;</span><span class="token keyword">int</span> sum<span class="token punctuation">,</span> tmp<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment">//利用scanf，每次读取一个字符（包括空格）</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token char">'@'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token comment">//遇到数字，继续读入</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">&gt;=</span> <span class="token char">'0'</span> <span class="token operator">&amp;&amp;</span> c <span class="token operator">&lt;=</span> <span class="token char">'9'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             tmp <span class="token operator">=</span> tmp <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> c <span class="token operator">-</span> <span class="token char">'0'</span><span class="token punctuation">;</span>                  <span class="token comment">//遇到空格，将当前数字元素入栈</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token char">' '</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>            tmp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                  <span class="token comment">//遇到运算符，进行运算</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token char">'+'</span> <span class="token operator">||</span> c <span class="token operator">==</span> <span class="token char">'-'</span> <span class="token operator">||</span> c <span class="token operator">==</span> <span class="token char">'*'</span> <span class="token operator">||</span> c <span class="token operator">==</span> <span class="token char">'/'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">//弹出主栈顶元素num2（主栈顶元素放在操作符右边）和次栈顶元素num1</span>            <span class="token keyword">int</span> num2 <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            s<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> num1 <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            s<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token comment">//计算</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token char">'+'</span><span class="token punctuation">)</span> num2 <span class="token operator">=</span> num1 <span class="token operator">+</span> num2<span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token char">'-'</span><span class="token punctuation">)</span> num2 <span class="token operator">=</span> num1 <span class="token operator">-</span> num2<span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token char">'*'</span><span class="token punctuation">)</span> num2 <span class="token operator">=</span> num1 <span class="token operator">*</span> num2<span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token char">'/'</span><span class="token punctuation">)</span> num2 <span class="token operator">=</span> num1 <span class="token operator">/</span> num2<span class="token punctuation">;</span>                      <span class="token comment">//将计算后的元素再次入栈</span>            s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>      cout <span class="token operator">&lt;&lt;</span> s<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>  <span class="token comment">//当前栈顶元素即为运算结果</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="E：做蛋糕"><a href="#E：做蛋糕" class="headerlink" title="E：做蛋糕"></a>E：做蛋糕</h3><h4 id="【题目描述】-4"><a href="#【题目描述】-4" class="headerlink" title="【题目描述】"></a>【题目描述】</h4><p>你是一家蛋糕店的老板，这一天你接到了 $N$ 张蛋糕订单。</p><p>店内有充足的原材料（奶油、淀粉、鸡蛋）可以用于制作蛋糕，每种原材料按份存储，每份都有一个美味度。已知第 $i$ 份订单的蛋糕需要使用 $x_i$ 份奶油、$y_i$ 份淀粉以及 $z_i$ 份鸡蛋制作。</p><p>作为店长，你决定按顺序每次取目前最好的材料制作蛋糕。换句话说，你会按订单的给定顺序制作蛋糕，对于第一份蛋糕，会使用美味度最高的 $x_i$ 份奶油、$y_i$ 份淀粉以及 $z_i$ 份鸡蛋进行制作；对于第二份蛋糕，会使用剩下的美味度最高的 $x_2$ 份奶油、$y_2$ 份淀粉以及 $z_2$ 份鸡蛋进行制作；以此类推。</p><p>已知一份蛋糕的美味度等同于所有使用掉的原材料的美味度之和，问每份蛋糕的美味度分别是多少？</p><h4 id="【输入】-4"><a href="#【输入】-4" class="headerlink" title="【输入】"></a>【输入】</h4><p>第一行包含三个正整数 $X,Y,Z(1 \le X,Y,Z \le 10^5)$，分别表示店内一开始拥有的奶油、淀粉以及鸡蛋的份数。</p><p>第二行包含 $X$ 个正整数，表示每份奶油的美味度。</p><p>第三行包含 $Y$ 个正整数，表示每份淀粉的美味度。</p><p>第四行包含 $Z$ 个正整数，表示每份鸡蛋的美味度。</p><p>第五行包含一个正整数 $N(1≤ N ≤ min(X,Y, Z))$，表示订单的数量。</p><p>其后 $N$ 行，每行包含三个正整数 $x_i,y_i,z_i(1 \le x_i,y_i,z_i \le 10)$，分别表示制作每份订单的蛋糕所需要使用的奶油、淀粉及鸡蛋的份数。</p><ul><li>每份材料的美味度是一个不超过 $10000$ 的正整数。</li><li>数据保证 $\sum x_{i} \leq X, \sum y_{i} \leq Y, \sum z_{i} \leq Z$</li></ul><h4 id="【输出】-4"><a href="#【输出】-4" class="headerlink" title="【输出】"></a>【输出】</h4><p>输出 $N$ 行，每行包含一个正整数，表示每份订单的蛋糕的美味度。</p><h4 id="【输入样例】-4"><a href="#【输入样例】-4" class="headerlink" title="【输入样例】"></a>【输入样例】</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token number">3</span> <span class="token number">4</span> <span class="token number">5</span><span class="token number">3</span> <span class="token number">1</span> <span class="token number">4</span><span class="token number">1</span> <span class="token number">5</span> <span class="token number">9</span> <span class="token number">2</span><span class="token number">6</span> <span class="token number">5</span> <span class="token number">3</span> <span class="token number">5</span> <span class="token number">8</span><span class="token number">2</span><span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="【输出样例】-4"><a href="#【输出样例】-4" class="headerlink" title="【输出样例】"></a>【输出样例】</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token number">21</span><span class="token number">26</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr><h4 id="【题目分析】-4"><a href="#【题目分析】-4" class="headerlink" title="【题目分析】"></a>【题目分析】</h4><p>本题可以使用 STL 中的很多容器，若选择 <code>vector、deque</code> 等，只需读入数据后，用 <code>sort()</code> 对其降序排序即可；若选择 <code>priority_queue</code>，其默认形式为 <strong>大顶堆</strong>，符合题目要求，较为推荐。</p><h4 id="【-C-代码】-4"><a href="#【-C-代码】-4" class="headerlink" title="【 C++ 代码】"></a>【 C++ 代码】</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> X<span class="token punctuation">,</span> Y<span class="token punctuation">,</span> Z<span class="token punctuation">,</span> N<span class="token punctuation">,</span> tmp<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">;</span>priority_queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> qx<span class="token punctuation">;</span>  <span class="token comment">//定义3个优先队列，默认为大顶堆，美食度高的元素排在队首</span>priority_queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> qy<span class="token punctuation">;</span>priority_queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> qz<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//cin读入优化</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//读入店铺食材库存</span>    cin <span class="token operator">&gt;&gt;</span> X <span class="token operator">&gt;&gt;</span> Y <span class="token operator">&gt;&gt;</span> Z<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> X <span class="token operator">+</span> Y <span class="token operator">+</span> Z<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        cin <span class="token operator">&gt;&gt;</span> tmp<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> X<span class="token punctuation">)</span>            qx<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//食材根据美味度入队</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> X <span class="token operator">+</span> Y<span class="token punctuation">)</span>            qy<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            qz<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//读入订单</span>    cin <span class="token operator">&gt;&gt;</span> N<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token comment">//每个订单的美食度</span>        cin <span class="token operator">&gt;&gt;</span> x <span class="token operator">&gt;&gt;</span> y <span class="token operator">&gt;&gt;</span> z<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> x <span class="token operator">+</span> y <span class="token operator">+</span> z<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>                sum <span class="token operator">+=</span> qx<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//根据订单要求，选择食材（食材出队）</span>                qx<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> x <span class="token operator">+</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>                sum <span class="token operator">+=</span> qy<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                qy<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                sum <span class="token operator">+=</span> qz<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                qz<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        cout <span class="token operator">&lt;&lt;</span> sum <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="F：查资料"><a href="#F：查资料" class="headerlink" title="F：查资料"></a>F：查资料</h3><h4 id="【题目描述】-5"><a href="#【题目描述】-5" class="headerlink" title="【题目描述】"></a>【题目描述】</h4><p>你忽然被布置了一篇论文，并且时间已经所剩无几！众所周知，写论文需要引用较多的参考文献，因此你需要花费一定的时间去网上寻找资料。</p><p>你需要按顺序查找一些资料，每份资料都可以用一个正整数表示。每次上网查找完资料后，你 <strong>都会</strong> 把这份资料存进你的电脑。</p><p>此后，如果你需要再次查找这份资料，并且发现电脑上存着这份资料，就不需要再花更多的时间上网找了。</p><p>但现在有一个新的问题，你的电脑容量不大够了，只能够让你存最多 $m$ 份资料。你认为新查到的资料总是比以前查的资料更有价值，因此每次你会把 <strong>最早</strong> 存入电脑的那份资料删除，腾出空间来存新的资料。</p><p>给定你要查询的资料的顺序，问你总共需要 <strong>上网查找</strong> 多少次？</p><p>初始时电脑上没有任何资料。</p><h4 id="【输入】-5"><a href="#【输入】-5" class="headerlink" title="【输入】"></a>【输入】</h4><p>第一行包含两个正整数 $n,m(1≤n,m≤10^5)$，分别表示需要查找的次数以及电脑的最大容量。</p><p>第二行包含 $n$ 个正整数 $a_1,a_2,…,a_n(1 \le a_i \le5000)$，表示每次要查的资料。</p><h4 id="【输出】-5"><a href="#【输出】-5" class="headerlink" title="【输出】"></a>【输出】</h4><p>输出一个整数，表示需要上网查的次数。</p><h4 id="【输入样例】-5"><a href="#【输入样例】-5" class="headerlink" title="【输入样例】"></a>【输入样例】</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token number">7</span> <span class="token number">3</span><span class="token number">1</span> <span class="token number">9</span> <span class="token number">1</span> <span class="token number">9</span> <span class="token number">8</span> <span class="token number">10</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="【输出样例】-5"><a href="#【输出样例】-5" class="headerlink" title="【输出样例】"></a>【输出样例】</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token number">5</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h4 id="【题目分析】-5"><a href="#【题目分析】-5" class="headerlink" title="【题目分析】"></a>【题目分析】</h4><p>本题使用 STL 中的 <code>deque</code>，会比较方便。（本题涉及查询，而 容器适配器 <code>queue</code> 不支持查询，故推荐使用<code>deque</code> ）</p><h4 id="【-C-代码】-5"><a href="#【-C-代码】-5" class="headerlink" title="【 C++ 代码】"></a>【 C++ 代码】</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> tmp<span class="token punctuation">,</span> cnt<span class="token punctuation">;</span>deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> dq<span class="token punctuation">;</span>deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>iterator it<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//cin读入优化</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> m<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        cin <span class="token operator">&gt;&gt;</span> tmp<span class="token punctuation">;</span>        <span class="token comment">//查询当前资料是否在电脑中</span>        it <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>dq<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dq<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>it <span class="token operator">==</span> dq<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//当前电脑中未找到</span>            <span class="token comment">//查找次数+1</span>            cnt<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token comment">//将当前新资料放入电脑中</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>dq<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">//若电脑容量已满，弹出首资料</span>                dq<span class="token punctuation">.</span><span class="token function">pop_front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            dq<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> cnt <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="G：明明的随机数"><a href="#G：明明的随机数" class="headerlink" title="G：明明的随机数"></a>G：明明的随机数</h3><h4 id="【题目描述】-6"><a href="#【题目描述】-6" class="headerlink" title="【题目描述】"></a>【题目描述】</h4><p>先用计算机生成了 $N$ 个 1 到 1000 之间的随机整数 $N≤100$，对于其中重复的数字，只保留一个，把其余相同的数去掉，不同的数对应着不同的学生的学号。然后再把这些数从小到大排序，按照排好的顺序去找同学做调查。请你协助明明完成 “去重” 与 “排序” 的工作。</p><h4 id="【输入】-6"><a href="#【输入】-6" class="headerlink" title="【输入】"></a>【输入】</h4><p>有 2 行，第 1 行为 1 个正整数，表示所生成的随机数的个数：$N$</p><p>第 2 行有 $N$ 个用空格隔开的正整数，为所产生的随机数。</p><h4 id="【输出】-6"><a href="#【输出】-6" class="headerlink" title="【输出】"></a>【输出】</h4><p>2 行，第 1 行为 1 个正整数M，表示不相同的随机数的个数。第 2 行为 $M$ 个用空格隔开的正整数，为从小到大排好序的不相同的随机数。</p><h4 id="【输入样例】-6"><a href="#【输入样例】-6" class="headerlink" title="【输入样例】"></a>【输入样例】</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token number">10</span><span class="token number">20</span> <span class="token number">40</span> <span class="token number">32</span> <span class="token number">67</span> <span class="token number">40</span> <span class="token number">20</span> <span class="token number">89</span> <span class="token number">300</span> <span class="token number">400</span> <span class="token number">15</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="【输出样例】-6"><a href="#【输出样例】-6" class="headerlink" title="【输出样例】"></a>【输出样例】</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token number">8</span><span class="token number">15</span> <span class="token number">20</span> <span class="token number">32</span> <span class="token number">40</span> <span class="token number">67</span> <span class="token number">89</span> <span class="token number">300</span> <span class="token number">400</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr><h4 id="【题目分析】-6"><a href="#【题目分析】-6" class="headerlink" title="【题目分析】"></a>【题目分析】</h4><p>本题考查 STL 中的 <code>set</code> ，<code>set</code> 容器自带 ”去重“ 和 ”排序“ 的效果，非常适合本题。</p><h4 id="【-C-代码】-6"><a href="#【-C-代码】-6" class="headerlink" title="【 C++ 代码】"></a>【 C++ 代码】</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> N<span class="token punctuation">,</span> tmp<span class="token punctuation">;</span>set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> s<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> N<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        cin <span class="token operator">&gt;&gt;</span> tmp<span class="token punctuation">;</span>        s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//set容器默认升序</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> t<span class="token operator">:</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> t <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 信息奥赛题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 信息奥赛 </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu下安装Clang编译器</title>
      <link href="/2023/03/26/ubuntu/"/>
      <url>/2023/03/26/ubuntu/</url>
      
        <content type="html"><![CDATA[<h1 id="【Linux】Ubuntu-22-04-安装-Clang-编译器"><a href="#【Linux】Ubuntu-22-04-安装-Clang-编译器" class="headerlink" title="【Linux】Ubuntu 22.04 安装 Clang 编译器"></a>【Linux】Ubuntu 22.04 安装 Clang 编译器</h1><p><img src="https://ricky-typora-notes.oss-cn-hangzhou.aliyuncs.com/Ubuntu-22-04-LTSpng.png" alt="Ubuntu-22-04-LTS"></p><p>摊主将在本文中介绍如何在 Ubuntu 上安装 Clang 编译器。</p><hr><h2 id="Clang-介绍-☘️"><a href="#Clang-介绍-☘️" class="headerlink" title="Clang 介绍 ☘️"></a>Clang 介绍 ☘️</h2><p><strong>Clang</strong> 是一款由 LLVM 项目开发的 C、C++、Objective-C 和 Objective-C++ <strong>编译器</strong>。它被设计成可以替代 GCC（GNU Compiler Collection）编译器，并且在许多方面都比 GCC 更优秀，可以提供更好的编译速度、准确性和兼容性。</p><h2 id="系统版本-🖥"><a href="#系统版本-🖥" class="headerlink" title="系统版本 🖥"></a>系统版本 🖥</h2><p>系统版本：Ubuntu 22.04 LTS</p><h2 id="安装步骤-🚀"><a href="#安装步骤-🚀" class="headerlink" title="安装步骤 🚀"></a>安装步骤 🚀</h2><ol><li>打开终端并更新系统软件包：在终端中输入以下命令并执行。</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> update<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://ricky-typora-notes.oss-cn-hangzhou.aliyuncs.com/image-20230322232323046.png" alt="sudo apt-get update"></p><ol start="2"><li>安装 Clang 编译器：在终端中输入以下命令并执行。（安装过程请耐心等待）</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> clang<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://ricky-typora-notes.oss-cn-hangzhou.aliyuncs.com/image-20230322232633305.png" alt="sudo apt-get install clang"></p><ol start="3"><li>检查 Clang 版本：在终端中输入以下命令并执行。</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">clang <span class="token parameter variable">--version</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://ricky-typora-notes.oss-cn-hangzhou.aliyuncs.com/image-20230322232732832.png" alt="clang --version"></p><p>如果出现 Clang 版本信息，则表示 Clang 编译器已经安装成功。</p><hr><h2 id="C语言编译测试-🧑🏻‍💻"><a href="#C语言编译测试-🧑🏻‍💻" class="headerlink" title="C语言编译测试 🧑🏻‍💻"></a>C语言编译测试 🧑🏻‍💻</h2><ol><li>创建一个名为 <code>helloworld.c</code> 的文件，输入以下代码：</li></ol><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hello, World!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>打开终端，进入 <code>helloworld.c</code> 文件所在的目录。</li><li>输入以下命令来使用 Clang 编译程序：</li></ol><pre class="line-numbers language-c" data-language="c"><code class="language-c">clang <span class="token operator">-</span>o helloworld helloworld<span class="token punctuation">.</span>c<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中，<code>clang</code> 是 Clang 编译器的可执行文件，<code>-o</code> 选项表示输出文件名，<code>helloworld</code> 是输出的可执行文件的名称，<code>helloworld.c</code> 是源代码文件的名称。</p><ol start="4"><li>执行程序：</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./helloworld<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输出结果应该是：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Hello, World<span class="token operator">!</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>说明当前 C 语言程序已经成功编译并运行了。</p><hr><h2 id="C-编译测试-🧑🏻‍💻"><a href="#C-编译测试-🧑🏻‍💻" class="headerlink" title="C++编译测试 🧑🏻‍💻"></a>C++编译测试 🧑🏻‍💻</h2><ol><li>创建一个名为 <code>test.cpp</code> 的文件，输入以下代码：</li></ol><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Hello, World!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>打开终端，进入 <code>test.cpp</code> 文件所在的目录。</li><li>输入以下命令来使用 Clang 编译程序：</li></ol><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">clang<span class="token operator">++</span> <span class="token operator">-</span>o test test<span class="token punctuation">.</span>cpp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中，<code>clang++</code> 是 Clang 编译器的可执行文件，<code>-o</code> 选项表示输出文件名，<code>test</code> 是输出的可执行文件的名称，<code>test.cpp</code> 是源代码文件的名称。 </p><ol start="4"><li>执行程序：</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./test<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输出结果应该是：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Hello, World<span class="token operator">!</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>说明当前 C++ 语言程序已经成功编译并运行了。</p>]]></content>
      
      
      <categories>
          
          <category> Linux基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Ubuntu </tag>
            
            <tag> 软件安装教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Acwing第91场周赛复盘</title>
      <link href="/2023/03/24/acwing-di-91-chang-zhou-sai-fu-pan/"/>
      <url>/2023/03/24/acwing-di-91-chang-zhou-sai-fu-pan/</url>
      
        <content type="html"><![CDATA[<h1 id="【Acwing-周赛复盘】第91场周赛复盘（2023-2-18）"><a href="#【Acwing-周赛复盘】第91场周赛复盘（2023-2-18）" class="headerlink" title="【Acwing 周赛复盘】第91场周赛复盘（2023.2.18）"></a>【Acwing 周赛复盘】第91场周赛复盘（2023.2.18）</h1><h2 id="周赛复盘-✍️"><a href="#周赛复盘-✍️" class="headerlink" title="周赛复盘 ✍️"></a>周赛复盘 ✍️</h2><blockquote><p>本周个人排名：1286/3115</p><p>AC情况：2/3</p><p>这是博主参加的第六次周赛，周赛当晚有事，是后来定时自测的 😂</p><p>在 20 分钟内 AC 了 2 题，看了一下这个成绩应该是排在 400名左右的。</p><p>T1 签到题，考察数字的分解 ✅</p><p>T2 考察哈希表/桶思想 ✅</p><p>T3 一眼「二分答案」，但是 <code>check</code> 函数中的变量太多，不知道如何写 ❌ （经过复盘，发现自己潜在问题很多，具体见 T3 的分析部分）</p><p>不过这次 T3 只有 86 个同学通过（往常都是几百人通过），说明确实有难度，做不出来也算是情有可原。</p><p>继续加油，冲冲冲。🚀</p></blockquote><p><img src="https://ricky-typora-notes.oss-cn-hangzhou.aliyuncs.com/image-20230224114420902.png" alt="周赛rank图"></p><h2 id="周赛信息-📚"><a href="#周赛信息-📚" class="headerlink" title="周赛信息 📚"></a>周赛信息 📚</h2><p><strong>时间</strong>：2023年 2 月 18 日 19：00-20：15</p><p><strong>竞赛链接</strong>：<a href="https://www.acwing.com/activity/content/introduction/2893/">https://www.acwing.com/activity/content/introduction/2893/</a> </p><p><strong>y总直播间</strong>：<a href="http://live.bilibili.com/21871779">http://live.bilibili.com/21871779</a></p><p><strong>y总录播讲解视频</strong>：<a href="https://www.bilibili.com/video/BV1o84y1n7Mw/?share_source=copy_web&amp;vd_source=33934722b558a5cefa750c1a9be72249">【AcWing杯 - 第 91 场周赛讲解】</a></p><h2 id="题目列表-🧑🏻‍💻"><a href="#题目列表-🧑🏻‍💻" class="headerlink" title="题目列表 🧑🏻‍💻"></a>题目列表 🧑🏻‍💻</h2><table><thead><tr><th align="center">题目名称</th><th align="center">原题链接</th><th align="center">视频讲解</th><th align="center">难度</th></tr></thead><tbody><tr><td align="center">4861. 构造数列</td><td align="center"><a href="https://www.acwing.com/problem/content/4864/">原题链接</a></td><td align="center"><a href="https://www.acwing.com/video/4629/">视频链接</a></td><td align="center">简单 🟢</td></tr><tr><td align="center">4862. 浇花</td><td align="center"><a href="https://www.acwing.com/problem/content/4865/">原题链接</a></td><td align="center"><a href="https://www.acwing.com/problem/content/video/4865/">视频链接</a></td><td align="center">简单 🟢</td></tr><tr><td align="center">4863. 构造新矩阵</td><td align="center"><a href="https://www.acwing.com/problem/content/4866/">原题链接</a></td><td align="center"><a href="https://www.acwing.com/video/4628/">视频链接</a></td><td align="center">困难 🔴</td></tr></tbody></table><h2 id="题解-🚀"><a href="#题解-🚀" class="headerlink" title="题解 🚀"></a>题解 🚀</h2><h3 id="【题目A】构造数列"><a href="#【题目A】构造数列" class="headerlink" title="【题目A】构造数列"></a>【题目A】构造数列</h3><h4 id="【题目描述】"><a href="#【题目描述】" class="headerlink" title="【题目描述】"></a>【题目描述】</h4><p>我们规定如果一个 <strong>正整数</strong> 满足除最高位外其它所有数位均为 $0$，则称该正整数为圆数。</p><p>例如，$1,8,900,70,5000$ 都是圆数，$120,404,333,8008$ 都不是圆数。</p><p>给定一个正整数 $n$，请你构造一个 <strong>圆数</strong> 数列，要求：</p><ul><li>数列中所有元素相加之和恰好为 $n$。</li><li>数列长度尽可能短。</li></ul><h4 id="【输入】"><a href="#【输入】" class="headerlink" title="【输入】"></a>【输入】</h4><p>第一行包含整数 $T$，表示共有 $T$ 组测试数据。</p><p>每组数据占一行，包含一个整数 $n$。</p><h4 id="【输出】"><a href="#【输出】" class="headerlink" title="【输出】"></a>【输出】</h4><p>每组数据输出两行结果，第一行输出数列长度，第二行输出构造数列。</p><p>如果方案不唯一，输出任意合理方案均可。</p><h4 id="【数据范围】"><a href="#【数据范围】" class="headerlink" title="【数据范围】"></a>【数据范围】</h4><p>前三个测试点满足 $1 \le T \le 10$。</p><p>所有测试点满足 $1 \le T \le 10000$，$1 \le n \le 10000$。</p><h4 id="【输入样例1】"><a href="#【输入样例1】" class="headerlink" title="【输入样例1】"></a>【输入样例1】</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token number">5</span><span class="token number">5009</span><span class="token number">7</span><span class="token number">9876</span><span class="token number">10000</span><span class="token number">10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="【输出样例1】"><a href="#【输出样例1】" class="headerlink" title="【输出样例1】"></a>【输出样例1】</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token number">2</span><span class="token number">5000</span> <span class="token number">9</span><span class="token number">1</span><span class="token number">7</span><span class="token number">4</span><span class="token number">800</span> <span class="token number">70</span> <span class="token number">6</span> <span class="token number">9000</span><span class="token number">1</span><span class="token number">10000</span><span class="token number">1</span><span class="token number">10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="【原题链接】"><a href="#【原题链接】" class="headerlink" title="【原题链接】"></a>【原题链接】</h4><p><a href="https://www.acwing.com/problem/content/description/4864/">https://www.acwing.com/problem/content/description/4864/</a></p><hr><h4 id="【题目分析】"><a href="#【题目分析】" class="headerlink" title="【题目分析】"></a>【题目分析】</h4><p>签到题，考察数字的分解。可以直接对数字 n 进行分解，也可以将 n 转化成字符串分解。</p><h4 id="【复盘后的优化代码】✅"><a href="#【复盘后的优化代码】✅" class="headerlink" title="【复盘后的优化代码】✅"></a>【复盘后的优化代码】✅</h4><p><strong>数字分解法</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e5</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> T<span class="token punctuation">,</span> n<span class="token punctuation">,</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//cin读入优化</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> T<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>T<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>        <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// cnt统计非0位的个数</span>        <span class="token keyword">int</span> pow <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// pow记录当前数字需要乘上几个0</span>        <span class="token comment">// 分解当前数字n</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 当前末尾数字非0，放入一个圆数</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span> a<span class="token punctuation">[</span><span class="token operator">++</span>cnt<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">*</span> pow<span class="token punctuation">;</span>            pow <span class="token operator">*=</span> <span class="token number">10</span><span class="token punctuation">;</span>            n <span class="token operator">=</span> n <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// 输出结果</span>        cout <span class="token operator">&lt;&lt;</span> cnt <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> cnt<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>字符串分解法</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e5</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> T<span class="token punctuation">,</span> n<span class="token punctuation">,</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>string str<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//cin读入优化</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> T<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>T<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cin <span class="token operator">&gt;&gt;</span> str<span class="token punctuation">;</span>        <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> pow <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 从后往前</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token char">'0'</span><span class="token punctuation">)</span> a<span class="token punctuation">[</span><span class="token operator">++</span>cnt<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'0'</span><span class="token punctuation">)</span> <span class="token operator">*</span> pow<span class="token punctuation">;</span>            pow <span class="token operator">*=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        cout <span class="token operator">&lt;&lt;</span> cnt <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> cnt<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><br><h3 id="【题目B】浇花"><a href="#【题目B】浇花" class="headerlink" title="【题目B】浇花"></a>【题目B】浇花</h3><h4 id="【题目描述】-1"><a href="#【题目描述】-1" class="headerlink" title="【题目描述】"></a>【题目描述】</h4><p>某公司养有观赏花，这些花十分娇贵，每天都需要且仅需要浇水一次。</p><p>如果某一天没给花浇水或者给花浇水超过一次，花就会在那一天死亡。</p><p>公司即将迎来 $n$ 天假期，编号 $1∼n$。</p><p>为了让花能够活过整个假期，公司领导安排了 $m$ 个人（编号 $1∼m$）来公司浇花，其中第 $i$ 个人在第 $[a_i,b_i]$ 天每天来公司浇一次花。</p><p>领导是按照时间顺序安排的浇花任务，保证了对于 $1 \le i \le m−1$，均满足：$b_i \le a_{i+1}$。</p><p>给定领导的具体安排，请你判断，花能否活过整个假期，如果不能，请你输出它是在第几天死的，以及那一天的具体浇水次数。</p><h4 id="【输入】-1"><a href="#【输入】-1" class="headerlink" title="【输入】"></a>【输入】</h4><p>第一行包含两个整数 $n,m$。</p><p>接下来 $m$ 行，每行包含两个整数 $a_i,b_i$。</p><h4 id="【输出】-1"><a href="#【输出】-1" class="headerlink" title="【输出】"></a>【输出】</h4><p>输出一行结果。</p><p>如果花能活过整个假期，则输出 <code>OK</code>。</p><p>如果花不能活过整个假期，则输出两个整数 $x,y$，表示花是在第 $x$ 天死的，这一天花被浇了 $y$ 次水。</p><h4 id="【数据范围】-1"><a href="#【数据范围】-1" class="headerlink" title="【数据范围】"></a>【数据范围】</h4><p>前 $4$ 个测试点满足 $1 \le n,m \le 10$。</p><p>所有测试点满足 $1 \le n,m \le 10^5$，$1 \le a_i \le b_i \le n$。</p><h4 id="【输入样例1】-1"><a href="#【输入样例1】-1" class="headerlink" title="【输入样例1】"></a>【输入样例1】</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">10 51 23 34 67 78 10<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="【输出样例1】-1"><a href="#【输出样例1】-1" class="headerlink" title="【输出样例1】"></a>【输出样例1】</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">OK<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="【输入样例2】"><a href="#【输入样例2】" class="headerlink" title="【输入样例2】"></a>【输入样例2】</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">10 51 22 34 57 89 10<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="【输出样例2】"><a href="#【输出样例2】" class="headerlink" title="【输出样例2】"></a>【输出样例2】</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">2 2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="【输入样例3】"><a href="#【输入样例3】" class="headerlink" title="【输入样例3】"></a>【输入样例3】</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">10 51 23 35 77 77 10<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="【输出样例3】"><a href="#【输出样例3】" class="headerlink" title="【输出样例3】"></a>【输出样例3】</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">4 0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="【原题链接】-1"><a href="#【原题链接】-1" class="headerlink" title="【原题链接】"></a>【原题链接】</h4><p><a href="https://www.acwing.com/problem/content/description/4865/">https://www.acwing.com/problem/content/description/4865/</a></p><hr><h4 id="【题目分析】-1"><a href="#【题目分析】-1" class="headerlink" title="【题目分析】"></a>【题目分析】</h4><p>本题暴力法就是使用 <strong>桶思想</strong>，在本题的条件下可以 AC，但是如果去除「保证了对于 $1 \le i \le m−1$，均满足：$b_i \le a_{i+1}$」的条件，就会超时了。</p><p>所以推荐使用 <strong>差分</strong>，把模型抽象出来，即每个人都会给一段连续的天数 + 1（浇水），最后求判断每天被浇水了几次即可。</p><h4 id="【复盘后的优化代码】✅-1"><a href="#【复盘后的优化代码】✅-1" class="headerlink" title="【复盘后的优化代码】✅"></a>【复盘后的优化代码】✅</h4><p><strong>差分</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e5</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">,</span> b<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//cin读入优化</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> m<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cin <span class="token operator">&gt;&gt;</span> l <span class="token operator">&gt;&gt;</span> r<span class="token punctuation">;</span>        b<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span>r <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>  <span class="token comment">// 维护差分数组</span>    <span class="token punctuation">}</span>    <span class="token comment">// 还原</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> b<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"OK"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="【周赛现场-AC-代码】"><a href="#【周赛现场-AC-代码】" class="headerlink" title="【周赛现场 AC 代码】"></a>【周赛现场 AC 代码】</h4><p><strong>暴力/桶思想</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e5</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span><span class="token keyword">int</span> b<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 桶</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//cin读入优化</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> m<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cin <span class="token operator">&gt;&gt;</span> x <span class="token operator">&gt;&gt;</span> y<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> x<span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> y<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment">// 将当前第i人负责的所有天数，放入桶中</span>            b<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 判断每个桶中的元素数量是否为1</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"OK"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><br><h3 id="【题目C】构造新矩阵"><a href="#【题目C】构造新矩阵" class="headerlink" title="【题目C】构造新矩阵"></a>【题目C】构造新矩阵</h3><h4 id="【题目描述】-2"><a href="#【题目描述】-2" class="headerlink" title="【题目描述】"></a>【题目描述】</h4><p>给定一个 $m$ 行 $n$ 列的整数矩阵，行编号 $1∼m$，列编号 $1∼n$。</p><p>其中，第 $i$ 行第 $j$ 列的元素为 $p_{ij}$。</p><p>你可以任意抽取其中不超过 $n−1$ 行元素，这些元素之间保持同一行列关系不变，构成一个新矩阵。</p><p>构成新矩阵后，我们可以确定一个最大的整数 $L$，使得新矩阵中每一列都至少存在一个元素不小于 $L$。</p><p>我们希望通过合理构造新矩阵，使得 $L$ 的值尽可能大。</p><p>请你计算并输出 $L$ 的最大可能值。</p><p><strong>注意</strong>：矩阵一共有 $m$ 行，但是抽取的行数上限是 $n−1$ 行，而不是 $m−1$ 行，读题时不要搞混行和列。</p><h4 id="【输入】-2"><a href="#【输入】-2" class="headerlink" title="【输入】"></a>【输入】</h4><p>第一行包含整数 $T$，表示共有 $T$ 组测试数据。</p><p>每组数据首先包含一个空行。</p><p>第二行包含两个整数 $m,n$。</p><p>接下来 $m$ 行，每行包含 $n$ 个整数，其中第 $i$ 行第 $j$ 个整数表示 $p_{ij}$。</p><h4 id="【输出】-2"><a href="#【输出】-2" class="headerlink" title="【输出】"></a>【输出】</h4><p>每组数据输出一行结果，一个整数，表示 $L$ 的最大可能值。</p><h4 id="【数据范围】-2"><a href="#【数据范围】-2" class="headerlink" title="【数据范围】"></a>【数据范围】</h4><p>前三个测试点满足 $1 \le T \le 5$，$2 \le n×m \le 100$。所有</p><p>测试点满足 $1 \le T \le 10^4$，$2 \le n$，$2 \le n×m \le 10^5$，$1 \le p_{ij} \le 10^9$，一个测试点内所有数据的 $n×m$ 值相加不超过 $10^5$。</p><h4 id="【输入样例】"><a href="#【输入样例】" class="headerlink" title="【输入样例】"></a>【输入样例】</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">52 21 23 44 31 3 13 1 11 2 21 1 32 35 3 42 5 14 27 98 19 610 82 46 5 2 17 9 7 2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="【输出样例】"><a href="#【输出样例】" class="headerlink" title="【输出样例】"></a>【输出样例】</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">32482<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="【原题链接】-2"><a href="#【原题链接】-2" class="headerlink" title="【原题链接】"></a>【原题链接】</h4><p><a href="https://www.acwing.com/problem/content/4866/">https://www.acwing.com/problem/content/4866/</a></p><hr><h4 id="【题目分析】-2"><a href="#【题目分析】-2" class="headerlink" title="【题目分析】"></a>【题目分析】</h4><p>一眼「二分答案」，但是苦于情况太多，没能够把 <code>check</code> 函数写出来，总结原因如下：</p><ul><li><strong>审题能力</strong> 需要加强，<strong>对时间复杂度的恐惧</strong> 要降低。自己读题时，分析复杂度应该是：$T * log * check$（但是本题 T 比较大，<code>check</code> 里面也很大，想着很容易超时，一下子人就比较慌）。但实际上，题目的意思应该是 $T * check$ 这一个整体被控制在 $10^5$，所以是不会超时的。<ul><li>措施 🚀：仔细审题，对时间复杂度不要害怕，在没有更好的优化想法时，先把当前思路的代码敲出来。</li></ul></li><li><strong>情况一多，就变得畏手畏脚，不敢动手</strong>。一会儿考虑这儿，一会儿考虑那儿，思路不够清晰，不够有逻辑。<ul><li>措施 🚀：下次做题时，遇到多种情况、边界条件等，像y总那样慢慢分析，把思路更加有条理的在纸上呈现出来（如下图）</li></ul></li><li><strong>逻辑推理能力</strong> 还需加强，尤其是面对思维题的时候，总是差临门一脚。例如本题中，其实自己已经推导到了，求出每列的 <code>maxV</code>，并且知道要从 「行」 的角度进行转换，用「<strong>画点法</strong>」来模拟最大值的分布等。但是一直不知道该如何处理「选取 $n-1$ 行」这个过程，导致代码无法书写下去。<ul><li>措施🚀：多做题，多总结</li></ul></li></ul><p>y总的思路图，详细讲解见：<a href="https://www.acwing.com/video/4628/">https://www.acwing.com/video/4628/</a></p><p><img src="https://ricky-typora-notes.oss-cn-hangzhou.aliyuncs.com/image-20230224143331727.png" alt="image-20230224143331727"></p><p>🍉 PS：本题由于空间限制，不能开 <code>a[N][N]</code> $(N \le 10^5)$ 的数组，需要用二维 <code>vector</code> 来实现。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> g<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 注意不是g[N][N]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br><h4 id="【复盘后的优化代码】✅-2"><a href="#【复盘后的优化代码】✅-2" class="headerlink" title="【复盘后的优化代码】✅"></a>【复盘后的优化代码】✅</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e5</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> T<span class="token punctuation">,</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> tmp<span class="token punctuation">;</span><span class="token keyword">int</span> row<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> col<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> g<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 二维vecotr数组</span><span class="token keyword">bool</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">int</span> L<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 此题对时间卡的比较严，不要使用memset</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> row<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> col<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">// row[k]存储第k行有几个&gt;=L的数，col[k]存储第k列有几个&gt;=L的数</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> L<span class="token punctuation">)</span> <span class="token punctuation">{</span>                row<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">,</span> col<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">// 检查每列是否有值&gt;=L</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>col<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 在每一列都有&gt;=L元素的基础上，检查是否一行中有至少2个&gt;=L的元素</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>row<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//cin读入优化</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> T<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>T<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 读入矩阵</span>        cin <span class="token operator">&gt;&gt;</span> m <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 记得初始化</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                cin <span class="token operator">&gt;&gt;</span> tmp<span class="token punctuation">;</span>                g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment">//第二种读入方式</span><span class="token comment">//        for (int i = 0; i &lt; m; i++) {</span><span class="token comment">//            g[i].resize(n);</span><span class="token comment">//            for (int j = 0; j &lt; n; j++) {</span><span class="token comment">//                cin &gt;&gt; g[i][j];</span><span class="token comment">//            }</span><span class="token comment">//        }</span>        <span class="token comment">// 对答案二分</span>        <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> r <span class="token operator">=</span> <span class="token number">1e9</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// l + r + 1的最大值&lt;int_max，但是比较接近了，用LL会保险一点</span>            <span class="token keyword">int</span> mid <span class="token operator">=</span> l <span class="token operator">+</span> r <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span><span class="token punctuation">)</span> l <span class="token operator">=</span> mid<span class="token punctuation">;</span>            <span class="token keyword">else</span> r <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        cout <span class="token operator">&lt;&lt;</span> r <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr>]]></content>
      
      
      <categories>
          
          <category> Acwing周赛复盘 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 信息奥赛 </tag>
            
            <tag> Acwing </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的第一篇博客</title>
      <link href="/2023/03/24/wo-de-di-yi-pian-bo-ke/"/>
      <url>/2023/03/24/wo-de-di-yi-pian-bo-ke/</url>
      
        <content type="html"><![CDATA[<h1 id="我的第一篇博客"><a href="#我的第一篇博客" class="headerlink" title="我的第一篇博客"></a>我的第一篇博客</h1><p>Hi，大家好呀。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
