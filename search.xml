<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Acwing周赛复盘</title>
      <link href="/2023/03/24/acwing-zhou-sai-fu-pan/"/>
      <url>/2023/03/24/acwing-zhou-sai-fu-pan/</url>
      
        <content type="html"><![CDATA[<h1 id="【Acwing-周赛复盘】第91场周赛复盘（2023-2-18）"><a href="#【Acwing-周赛复盘】第91场周赛复盘（2023-2-18）" class="headerlink" title="【Acwing 周赛复盘】第91场周赛复盘（2023.2.18）"></a>【Acwing 周赛复盘】第91场周赛复盘（2023.2.18）</h1><h2 id="周赛复盘-✍️"><a href="#周赛复盘-✍️" class="headerlink" title="周赛复盘 ✍️"></a>周赛复盘 ✍️</h2><blockquote><p>本周个人排名：1286/3115</p><p>AC情况：2/3</p><p>这是博主参加的第六次周赛，周赛当晚有事，是后来定时自测的 😂</p><p>在 20 分钟内 AC 了 2 题，看了一下这个成绩应该是排在 400名左右的。</p><p>T1 签到题，考察数字的分解 ✅</p><p>T2 考察哈希表/桶思想 ✅</p><p>T3 一眼「二分答案」，但是 <code>check</code> 函数中的变量太多，不知道如何写 ❌ （经过复盘，发现自己潜在问题很多，具体见 T3 的分析部分）</p><p>不过这次 T3 只有 86 个同学通过（往常都是几百人通过），说明确实有难度，做不出来也算是情有可原。</p><p>继续加油，冲冲冲。🚀</p></blockquote><p><img src="https://ricky-typora-notes.oss-cn-hangzhou.aliyuncs.com/image-20230224114420902.png" alt="周赛rank图"></p><h2 id="周赛信息-📚"><a href="#周赛信息-📚" class="headerlink" title="周赛信息 📚"></a>周赛信息 📚</h2><p><strong>时间</strong>：2023年 2 月 18 日 19：00-20：15</p><p><strong>竞赛链接</strong>：<a href="https://www.acwing.com/activity/content/introduction/2893/">https://www.acwing.com/activity/content/introduction/2893/</a> </p><p><strong>y总直播间</strong>：<a href="http://live.bilibili.com/21871779">http://live.bilibili.com/21871779</a></p><p><strong>y总录播讲解视频</strong>：<a href="https://www.bilibili.com/video/BV1o84y1n7Mw/?share_source=copy_web&amp;vd_source=33934722b558a5cefa750c1a9be72249">【AcWing杯 - 第 91 场周赛讲解】</a></p><h2 id="题目列表-🧑🏻‍💻"><a href="#题目列表-🧑🏻‍💻" class="headerlink" title="题目列表 🧑🏻‍💻"></a>题目列表 🧑🏻‍💻</h2><table><thead><tr><th align="center">题目名称</th><th align="center">原题链接</th><th align="center">视频讲解</th><th align="center">难度</th></tr></thead><tbody><tr><td align="center">4861. 构造数列</td><td align="center"><a href="https://www.acwing.com/problem/content/4864/">原题链接</a></td><td align="center"><a href="https://www.acwing.com/video/4629/">视频链接</a></td><td align="center">简单 🟢</td></tr><tr><td align="center">4862. 浇花</td><td align="center"><a href="https://www.acwing.com/problem/content/4865/">原题链接</a></td><td align="center"><a href="https://www.acwing.com/problem/content/video/4865/">视频链接</a></td><td align="center">简单 🟢</td></tr><tr><td align="center">4863. 构造新矩阵</td><td align="center"><a href="https://www.acwing.com/problem/content/4866/">原题链接</a></td><td align="center"><a href="https://www.acwing.com/video/4628/">视频链接</a></td><td align="center">困难 🔴</td></tr></tbody></table><h2 id="题解-🚀"><a href="#题解-🚀" class="headerlink" title="题解 🚀"></a>题解 🚀</h2><h3 id="【题目A】构造数列"><a href="#【题目A】构造数列" class="headerlink" title="【题目A】构造数列"></a>【题目A】构造数列</h3><h4 id="【题目描述】"><a href="#【题目描述】" class="headerlink" title="【题目描述】"></a>【题目描述】</h4><p>我们规定如果一个 <strong>正整数</strong> 满足除最高位外其它所有数位均为 $0$，则称该正整数为圆数。</p><p>例如，$1,8,900,70,5000$ 都是圆数，$120,404,333,8008$ 都不是圆数。</p><p>给定一个正整数 $n$，请你构造一个 <strong>圆数</strong> 数列，要求：</p><ul><li>数列中所有元素相加之和恰好为 $n$。</li><li>数列长度尽可能短。</li></ul><h4 id="【输入】"><a href="#【输入】" class="headerlink" title="【输入】"></a>【输入】</h4><p>第一行包含整数 $T$，表示共有 $T$ 组测试数据。</p><p>每组数据占一行，包含一个整数 $n$。</p><h4 id="【输出】"><a href="#【输出】" class="headerlink" title="【输出】"></a>【输出】</h4><p>每组数据输出两行结果，第一行输出数列长度，第二行输出构造数列。</p><p>如果方案不唯一，输出任意合理方案均可。</p><h4 id="【数据范围】"><a href="#【数据范围】" class="headerlink" title="【数据范围】"></a>【数据范围】</h4><p>前三个测试点满足 $1 \le T \le 10$。</p><p>所有测试点满足 $1 \le T \le 10000$，$1 \le n \le 10000$。</p><h4 id="【输入样例1】"><a href="#【输入样例1】" class="headerlink" title="【输入样例1】"></a>【输入样例1】</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token number">5</span><span class="token number">5009</span><span class="token number">7</span><span class="token number">9876</span><span class="token number">10000</span><span class="token number">10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="【输出样例1】"><a href="#【输出样例1】" class="headerlink" title="【输出样例1】"></a>【输出样例1】</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token number">2</span><span class="token number">5000</span> <span class="token number">9</span><span class="token number">1</span><span class="token number">7</span><span class="token number">4</span><span class="token number">800</span> <span class="token number">70</span> <span class="token number">6</span> <span class="token number">9000</span><span class="token number">1</span><span class="token number">10000</span><span class="token number">1</span><span class="token number">10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="【原题链接】"><a href="#【原题链接】" class="headerlink" title="【原题链接】"></a>【原题链接】</h4><p><a href="https://www.acwing.com/problem/content/description/4864/">https://www.acwing.com/problem/content/description/4864/</a></p><hr><h4 id="【题目分析】"><a href="#【题目分析】" class="headerlink" title="【题目分析】"></a>【题目分析】</h4><p>签到题，考察数字的分解。可以直接对数字 n 进行分解，也可以将 n 转化成字符串分解。</p><h4 id="【复盘后的优化代码】✅"><a href="#【复盘后的优化代码】✅" class="headerlink" title="【复盘后的优化代码】✅"></a>【复盘后的优化代码】✅</h4><p><strong>数字分解法</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e5</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> T<span class="token punctuation">,</span> n<span class="token punctuation">,</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//cin读入优化</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> T<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>T<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>        <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// cnt统计非0位的个数</span>        <span class="token keyword">int</span> pow <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// pow记录当前数字需要乘上几个0</span>        <span class="token comment">// 分解当前数字n</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 当前末尾数字非0，放入一个圆数</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span> a<span class="token punctuation">[</span><span class="token operator">++</span>cnt<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">*</span> pow<span class="token punctuation">;</span>            pow <span class="token operator">*=</span> <span class="token number">10</span><span class="token punctuation">;</span>            n <span class="token operator">=</span> n <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// 输出结果</span>        cout <span class="token operator">&lt;&lt;</span> cnt <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> cnt<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>字符串分解法</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e5</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> T<span class="token punctuation">,</span> n<span class="token punctuation">,</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>string str<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//cin读入优化</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> T<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>T<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cin <span class="token operator">&gt;&gt;</span> str<span class="token punctuation">;</span>        <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> pow <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 从后往前</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token char">'0'</span><span class="token punctuation">)</span> a<span class="token punctuation">[</span><span class="token operator">++</span>cnt<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'0'</span><span class="token punctuation">)</span> <span class="token operator">*</span> pow<span class="token punctuation">;</span>            pow <span class="token operator">*=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        cout <span class="token operator">&lt;&lt;</span> cnt <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> cnt<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><br><h3 id="【题目B】浇花"><a href="#【题目B】浇花" class="headerlink" title="【题目B】浇花"></a>【题目B】浇花</h3><h4 id="【题目描述】-1"><a href="#【题目描述】-1" class="headerlink" title="【题目描述】"></a>【题目描述】</h4><p>某公司养有观赏花，这些花十分娇贵，每天都需要且仅需要浇水一次。</p><p>如果某一天没给花浇水或者给花浇水超过一次，花就会在那一天死亡。</p><p>公司即将迎来 $n$ 天假期，编号 $1∼n$。</p><p>为了让花能够活过整个假期，公司领导安排了 $m$ 个人（编号 $1∼m$）来公司浇花，其中第 $i$ 个人在第 $[a_i,b_i]$ 天每天来公司浇一次花。</p><p>领导是按照时间顺序安排的浇花任务，保证了对于 $1 \le i \le m−1$，均满足：$b_i \le a_{i+1}$。</p><p>给定领导的具体安排，请你判断，花能否活过整个假期，如果不能，请你输出它是在第几天死的，以及那一天的具体浇水次数。</p><h4 id="【输入】-1"><a href="#【输入】-1" class="headerlink" title="【输入】"></a>【输入】</h4><p>第一行包含两个整数 $n,m$。</p><p>接下来 $m$ 行，每行包含两个整数 $a_i,b_i$。</p><h4 id="【输出】-1"><a href="#【输出】-1" class="headerlink" title="【输出】"></a>【输出】</h4><p>输出一行结果。</p><p>如果花能活过整个假期，则输出 <code>OK</code>。</p><p>如果花不能活过整个假期，则输出两个整数 $x,y$，表示花是在第 $x$ 天死的，这一天花被浇了 $y$ 次水。</p><h4 id="【数据范围】-1"><a href="#【数据范围】-1" class="headerlink" title="【数据范围】"></a>【数据范围】</h4><p>前 $4$ 个测试点满足 $1 \le n,m \le 10$。</p><p>所有测试点满足 $1 \le n,m \le 10^5$，$1 \le a_i \le b_i \le n$。</p><h4 id="【输入样例1】-1"><a href="#【输入样例1】-1" class="headerlink" title="【输入样例1】"></a>【输入样例1】</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">10 51 23 34 67 78 10<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="【输出样例1】-1"><a href="#【输出样例1】-1" class="headerlink" title="【输出样例1】"></a>【输出样例1】</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">OK<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="【输入样例2】"><a href="#【输入样例2】" class="headerlink" title="【输入样例2】"></a>【输入样例2】</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">10 51 22 34 57 89 10<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="【输出样例2】"><a href="#【输出样例2】" class="headerlink" title="【输出样例2】"></a>【输出样例2】</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">2 2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="【输入样例3】"><a href="#【输入样例3】" class="headerlink" title="【输入样例3】"></a>【输入样例3】</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">10 51 23 35 77 77 10<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="【输出样例3】"><a href="#【输出样例3】" class="headerlink" title="【输出样例3】"></a>【输出样例3】</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">4 0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="【原题链接】-1"><a href="#【原题链接】-1" class="headerlink" title="【原题链接】"></a>【原题链接】</h4><p><a href="https://www.acwing.com/problem/content/description/4865/">https://www.acwing.com/problem/content/description/4865/</a></p><hr><h4 id="【题目分析】-1"><a href="#【题目分析】-1" class="headerlink" title="【题目分析】"></a>【题目分析】</h4><p>本题暴力法就是使用 <strong>桶思想</strong>，在本题的条件下可以 AC，但是如果去除「保证了对于 $1 \le i \le m−1$，均满足：$b_i \le a_{i+1}$」的条件，就会超时了。</p><p>所以推荐使用 <strong>差分</strong>，把模型抽象出来，即每个人都会给一段连续的天数 + 1（浇水），最后求判断每天被浇水了几次即可。</p><h4 id="【复盘后的优化代码】✅-1"><a href="#【复盘后的优化代码】✅-1" class="headerlink" title="【复盘后的优化代码】✅"></a>【复盘后的优化代码】✅</h4><p><strong>差分</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e5</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">,</span> b<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//cin读入优化</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> m<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cin <span class="token operator">&gt;&gt;</span> l <span class="token operator">&gt;&gt;</span> r<span class="token punctuation">;</span>        b<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span>r <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>  <span class="token comment">// 维护差分数组</span>    <span class="token punctuation">}</span>    <span class="token comment">// 还原</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> b<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"OK"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="【周赛现场-AC-代码】"><a href="#【周赛现场-AC-代码】" class="headerlink" title="【周赛现场 AC 代码】"></a>【周赛现场 AC 代码】</h4><p><strong>暴力/桶思想</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e5</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span><span class="token keyword">int</span> b<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 桶</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//cin读入优化</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> m<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cin <span class="token operator">&gt;&gt;</span> x <span class="token operator">&gt;&gt;</span> y<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> x<span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> y<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment">// 将当前第i人负责的所有天数，放入桶中</span>            b<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 判断每个桶中的元素数量是否为1</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"OK"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><br><h3 id="【题目C】构造新矩阵"><a href="#【题目C】构造新矩阵" class="headerlink" title="【题目C】构造新矩阵"></a>【题目C】构造新矩阵</h3><h4 id="【题目描述】-2"><a href="#【题目描述】-2" class="headerlink" title="【题目描述】"></a>【题目描述】</h4><p>给定一个 $m$ 行 $n$ 列的整数矩阵，行编号 $1∼m$，列编号 $1∼n$。</p><p>其中，第 $i$ 行第 $j$ 列的元素为 $p_{ij}$。</p><p>你可以任意抽取其中不超过 $n−1$ 行元素，这些元素之间保持同一行列关系不变，构成一个新矩阵。</p><p>构成新矩阵后，我们可以确定一个最大的整数 $L$，使得新矩阵中每一列都至少存在一个元素不小于 $L$。</p><p>我们希望通过合理构造新矩阵，使得 $L$ 的值尽可能大。</p><p>请你计算并输出 $L$ 的最大可能值。</p><p><strong>注意</strong>：矩阵一共有 $m$ 行，但是抽取的行数上限是 $n−1$ 行，而不是 $m−1$ 行，读题时不要搞混行和列。</p><h4 id="【输入】-2"><a href="#【输入】-2" class="headerlink" title="【输入】"></a>【输入】</h4><p>第一行包含整数 $T$，表示共有 $T$ 组测试数据。</p><p>每组数据首先包含一个空行。</p><p>第二行包含两个整数 $m,n$。</p><p>接下来 $m$ 行，每行包含 $n$ 个整数，其中第 $i$ 行第 $j$ 个整数表示 $p_{ij}$。</p><h4 id="【输出】-2"><a href="#【输出】-2" class="headerlink" title="【输出】"></a>【输出】</h4><p>每组数据输出一行结果，一个整数，表示 $L$ 的最大可能值。</p><h4 id="【数据范围】-2"><a href="#【数据范围】-2" class="headerlink" title="【数据范围】"></a>【数据范围】</h4><p>前三个测试点满足 $1 \le T \le 5$，$2 \le n×m \le 100$。所有</p><p>测试点满足 $1 \le T \le 10^4$，$2 \le n$，$2 \le n×m \le 10^5$，$1 \le p_{ij} \le 10^9$，一个测试点内所有数据的 $n×m$ 值相加不超过 $10^5$。</p><h4 id="【输入样例】"><a href="#【输入样例】" class="headerlink" title="【输入样例】"></a>【输入样例】</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">52 21 23 44 31 3 13 1 11 2 21 1 32 35 3 42 5 14 27 98 19 610 82 46 5 2 17 9 7 2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="【输出样例】"><a href="#【输出样例】" class="headerlink" title="【输出样例】"></a>【输出样例】</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">32482<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="【原题链接】-2"><a href="#【原题链接】-2" class="headerlink" title="【原题链接】"></a>【原题链接】</h4><p><a href="https://www.acwing.com/problem/content/4866/">https://www.acwing.com/problem/content/4866/</a></p><hr><h4 id="【题目分析】-2"><a href="#【题目分析】-2" class="headerlink" title="【题目分析】"></a>【题目分析】</h4><p>一眼「二分答案」，但是苦于情况太多，没能够把 <code>check</code> 函数写出来，总结原因如下：</p><ul><li><strong>审题能力</strong> 需要加强，<strong>对时间复杂度的恐惧</strong> 要降低。自己读题时，分析复杂度应该是：$T * log * check$（但是本题 T 比较大，<code>check</code> 里面也很大，想着很容易超时，一下子人就比较慌）。但实际上，题目的意思应该是 $T * check$ 这一个整体被控制在 $10^5$，所以是不会超时的。<ul><li>措施 🚀：仔细审题，对时间复杂度不要害怕，在没有更好的优化想法时，先把当前思路的代码敲出来。</li></ul></li><li><strong>情况一多，就变得畏手畏脚，不敢动手</strong>。一会儿考虑这儿，一会儿考虑那儿，思路不够清晰，不够有逻辑。<ul><li>措施 🚀：下次做题时，遇到多种情况、边界条件等，像y总那样慢慢分析，把思路更加有条理的在纸上呈现出来（如下图）</li></ul></li><li><strong>逻辑推理能力</strong> 还需加强，尤其是面对思维题的时候，总是差临门一脚。例如本题中，其实自己已经推导到了，求出每列的 <code>maxV</code>，并且知道要从 「行」 的角度进行转换，用「<strong>画点法</strong>」来模拟最大值的分布等。但是一直不知道该如何处理「选取 $n-1$ 行」这个过程，导致代码无法书写下去。<ul><li>措施🚀：多做题，多总结</li></ul></li></ul><p>y总的思路图，详细讲解见：<a href="https://www.acwing.com/video/4628/">https://www.acwing.com/video/4628/</a></p><p><img src="https://ricky-typora-notes.oss-cn-hangzhou.aliyuncs.com/image-20230224143331727.png" alt="image-20230224143331727"></p><p>🍉 PS：本题由于空间限制，不能开 <code>a[N][N]</code> $(N \le 10^5)$ 的数组，需要用二维 <code>vector</code> 来实现。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> g<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 注意不是g[N][N]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br><h4 id="【复盘后的优化代码】✅-2"><a href="#【复盘后的优化代码】✅-2" class="headerlink" title="【复盘后的优化代码】✅"></a>【复盘后的优化代码】✅</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e5</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> T<span class="token punctuation">,</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> tmp<span class="token punctuation">;</span><span class="token keyword">int</span> row<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> col<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> g<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 二维vecotr数组</span><span class="token keyword">bool</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">int</span> L<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 此题对时间卡的比较严，不要使用memset</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> row<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> col<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">// row[k]存储第k行有几个&gt;=L的数，col[k]存储第k列有几个&gt;=L的数</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> L<span class="token punctuation">)</span> <span class="token punctuation">{</span>                row<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">,</span> col<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">// 检查每列是否有值&gt;=L</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>col<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 在每一列都有&gt;=L元素的基础上，检查是否一行中有至少2个&gt;=L的元素</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>row<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//cin读入优化</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> T<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>T<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 读入矩阵</span>        cin <span class="token operator">&gt;&gt;</span> m <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 记得初始化</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                cin <span class="token operator">&gt;&gt;</span> tmp<span class="token punctuation">;</span>                g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment">//第二种读入方式</span><span class="token comment">//        for (int i = 0; i &lt; m; i++) {</span><span class="token comment">//            g[i].resize(n);</span><span class="token comment">//            for (int j = 0; j &lt; n; j++) {</span><span class="token comment">//                cin &gt;&gt; g[i][j];</span><span class="token comment">//            }</span><span class="token comment">//        }</span>        <span class="token comment">// 对答案二分</span>        <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> r <span class="token operator">=</span> <span class="token number">1e9</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// l + r + 1的最大值&lt;int_max，但是比较接近了，用LL会保险一点</span>            <span class="token keyword">int</span> mid <span class="token operator">=</span> l <span class="token operator">+</span> r <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span><span class="token punctuation">)</span> l <span class="token operator">=</span> mid<span class="token punctuation">;</span>            <span class="token keyword">else</span> r <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        cout <span class="token operator">&lt;&lt;</span> r <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Ricky的第一篇博客</title>
      <link href="/2023/03/24/ricky-de-di-yi-pian-bo-ke/"/>
      <url>/2023/03/24/ricky-de-di-yi-pian-bo-ke/</url>
      
        <content type="html"><![CDATA[<h1 id="我的第一篇博客"><a href="#我的第一篇博客" class="headerlink" title="我的第一篇博客"></a>我的第一篇博客</h1><p>Hi，大家好呀。</p><p>我是 Ricky，一个想开水果摊的CSer，如果你不介意的话，可以叫我「摊主」。</p><h2 id="写在最前-✍️"><a href="#写在最前-✍️" class="headerlink" title="写在最前 ✍️"></a>写在最前 ✍️</h2><p>这篇博客将是摊主在本站上传的第一篇博客。</p><p>之所以不先上传技术博客，是因为摊主是一个比较感性、有仪式感的人，希望通过这篇博客，来纪念自己搭建博客的举措。</p><p>希望读到这篇博客的你，能够从中有所收获。如果你看完这篇博客后，产生了自己搭建博客的想法，那摊主我感到非常开心，请相信我，只要你肯付出实践，什么时候都不算太晚。</p><p>摊主也希望未来回顾这篇博客的自己，能够有所感悟，能够从过去的经历中汲取前行的动力。无论未来如何，请适当停下脚步，望一望回头的风景。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>我的第一篇博客</title>
      <link href="/2023/03/24/wo-de-di-yi-pian-bo-ke/"/>
      <url>/2023/03/24/wo-de-di-yi-pian-bo-ke/</url>
      
        <content type="html"><![CDATA[<h1 id="我的第一篇博客"><a href="#我的第一篇博客" class="headerlink" title="我的第一篇博客"></a>我的第一篇博客</h1><p>Hi，大家好呀。</p><p>我是 Ricky，一个想开水果摊的CSer，如果你不介意的话，可以叫我「摊主」。</p><h2 id="写在最前-✍️"><a href="#写在最前-✍️" class="headerlink" title="写在最前 ✍️"></a>写在最前 ✍️</h2><p>这篇博客将是摊主在本站上传的第一篇博客。</p><p>之所以不先上传技术博客，是因为摊主是一个比较感性、有仪式感的人，希望通过这篇博客，来纪念自己搭建博客的举措。</p><p>希望读到这篇博客的你，能够从中有所收获。如果你看完这篇博客后，产生了自己搭建博客的想法，那摊主我感到非常开心，请相信我，只要你肯付出实践，什么时候都不算太晚。</p><p>摊主也希望未来回顾这篇博客的自己，能够有所感悟，能够从过去的经历中汲取前行的动力。无论未来如何，请适当停下脚步，望一望回头的风景。</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
